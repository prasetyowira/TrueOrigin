{
  "tasks": [
    {
      "id": 1,
      "title": "Implement Landing Page",
      "description": "Refine the landing page content, ensure responsiveness, and add any missing sections based on the Figma design",
      "status": "done",
      "dependencies": [],
      "priority": "high",
      "details": "The basic landing page structure (home.tsx, LandingCard.tsx) has already been implemented. Now focus on refining the content, ensuring responsive behavior across all device sizes, and adding any missing sections from the Figma design in `plans/design.md`. Review and enhance the existing reusable components for the header, hero section, value proposition, key stakeholders section, technology section, and footer. Continue using Tailwind CSS for styling adjustments and implement shadcn/ui version 2.3.0 for UI components. Verify that all navigation links to the verification page, login page, and dashboard areas are working properly. Ensure the 'Book Demo' button and other call-to-action elements are fully functional and visually aligned with the design.",
      "testStrategy": "Manually test the landing page on different screen sizes (mobile, tablet, desktop) to ensure responsive design. Verify all navigation links work correctly. Check that all images and assets are properly loaded and displayed. Compare the implemented page against the Figma design to ensure all sections are included and styled correctly. Confirm that all shadcn/ui components (version 2.3.0) are rendering correctly across all devices."
    },
    {
      "id": 2,
      "title": "Implement Public Verification Interface",
      "description": "Create the QR code scanning and verification result display for product authentication",
      "status": "in-progress",
      "dependencies": [],
      "priority": "high",
      "details": "Implement the QR scanner page (`ScanPage.tsx`) with camera access using the HTML5 QR code library. Create verification result modals/pages (`VerificationResultModal.tsx`) to display success, failure, or already scanned states. Integrate with the `verify_product_v2` API to validate scanned QR codes. Display product information on successful verification. Follow the mobile-first design from Figma (iPhone 13 layout) and ensure proper error handling for camera permissions and invalid codes. Use shadcn/ui version 2.3.0 for UI components throughout the implementation.",
      "testStrategy": "Test QR code scanning with various QR codes (valid first scan, valid subsequent scan, invalid). Verify camera permissions work correctly. Test error handling for network issues and invalid codes. Ensure the UI matches the Figma design and is responsive on mobile devices. Verify that shadcn/ui components are properly implemented and styled according to the design system.",
      "subtasks": [
        {
          "id": 1,
          "title": "Implement QR Scanner Page with Camera Access",
          "description": "Create the ScanPage.tsx component with HTML5 QR code library integration for camera access and QR code scanning functionality",
          "dependencies": [],
          "details": "Implementation steps:\n1. Create ScanPage.tsx component with responsive layout following the iPhone 13 design from Figma\n2. Integrate the HTML5 QR code library to access device camera\n3. Implement camera permission request and handling\n4. Add error states for camera access denial or unavailability\n5. Create scanning overlay UI with guidance for users using shadcn/ui 2.3.0 components\n6. Implement QR code detection callback that passes scanned data to verification function\n7. Add loading state while verification is in progress\n8. Test with various devices to ensure camera works correctly\n9. Implement proper cleanup of camera resources when component unmounts",
          "status": "pending",
          "parentTaskId": 2
        },
        {
          "id": 2,
          "title": "Create Verification Result Modal with Product Information Display",
          "description": "Develop VerificationResultModal.tsx to show verification outcomes (success/failure/already scanned) with appropriate product information using StatusBadge and ProductInfo components",
          "dependencies": [
            1
          ],
          "details": "Implementation steps:\n1. Create VerificationResultModal.tsx component with three states: success, failure, and already scanned\n2. Implement StatusBadge component to visually indicate verification status using shadcn/ui 2.3.0 components\n3. Create ProductInfo component to display product details (name, brand, manufacturing date, etc.) using shadcn/ui 2.3.0 components\n4. Style the modal according to Figma designs with mobile-first approach\n5. Use shadcn/ui Dialog or Sheet component for the modal implementation\n6. Add animations for modal appearance/disappearance\n7. Ensure modal is accessible and can be dismissed\n8. Display appropriate messaging for each verification state\n9. For successful verifications, show complete product information\n10. For failures or already scanned products, show appropriate error messaging\n11. Test the modal with various product data structures to ensure proper rendering\n\n<info added on 2025-04-30T05:21:47.611Z>\nFor the VerificationResultModal implementation, use shadcn/ui 2.3.0's Dialog component as the primary modal container. Specifically:\n\n- Import Dialog, DialogContent, DialogHeader, and DialogTitle from \"@/components/ui/dialog\" (shadcn/ui 2.3.0)\n- For mobile responsiveness, consider using the Sheet component variant which is optimized for mobile displays\n- Leverage shadcn/ui's Alert and AlertDescription components for status messaging\n- Use the Badge component from shadcn/ui for the StatusBadge implementation with appropriate variant props (default, destructive, outline) to indicate different verification states\n- Implement motion animations using the built-in shadcn animation properties or integrate with framer-motion for custom transitions\n- Ensure proper ARIA attributes are set through the shadcn Dialog props for accessibility compliance\n</info added on 2025-04-30T05:21:47.611Z>",
          "status": "pending",
          "parentTaskId": 2
        },
        {
          "id": 3,
          "title": "Integrate Verification API with Robust Error Handling",
          "description": "Connect the QR scanner to the verify_product_v2 API endpoint with comprehensive error handling and state management",
          "dependencies": [
            1,
            2
          ],
          "details": "Implementation steps:\n1. Update productApi.ts to include the verify_product_v2 endpoint integration\n2. Implement proper error handling for API calls (network errors, timeouts, server errors)\n3. Create verification state management to track scanning and verification process\n4. Handle edge cases like invalid QR codes, expired products, or tampered codes\n5. Implement retry logic for failed API calls\n6. Add detailed error logging for debugging purposes\n7. Create user-friendly error messages for different failure scenarios using shadcn/ui 2.3.0 Alert and Toast components\n8. Implement offline detection and appropriate messaging\n9. Add analytics tracking for verification attempts and results\n10. Test the complete verification flow with various test QR codes (valid, invalid, already scanned)\n11. Ensure proper state transitions between scanning, loading, and result display",
          "status": "pending",
          "parentTaskId": 2
        },
        {
          "id": 4,
          "title": "Set up shadcn/ui 2.3.0 Components and Theme",
          "description": "Install and configure shadcn/ui version 2.3.0 for use in the verification interface",
          "dependencies": [],
          "details": "Implementation steps:\n1. Install shadcn/ui version 2.3.0 and its dependencies\n2. Configure the theme to match the Figma design system\n3. Set up the necessary component registry\n4. Create a component library documentation for the team\n5. Ensure proper integration with the existing styling system\n6. Test component accessibility and responsiveness\n7. Create reusable component compositions for common UI patterns in the verification flow\n8. Document any custom extensions or modifications to the base shadcn/ui components",
          "status": "pending",
          "parentTaskId": 2
        }
      ]
    },
    {
      "id": 3,
      "title": "Implement Reward Redemption Flow",
      "description": "Create the wallet scanning and reward redemption process after successful verification",
      "status": "pending",
      "dependencies": [
        2
      ],
      "priority": "high",
      "details": "Implement the wallet scan/input modal/page (`RedeemWalletModal.tsx`) that allows users to scan a wallet QR code or manually input a wallet address. Create the redeem success modal/page (`RedeemSuccessModal.tsx`) to display confirmation after successful redemption. Integrate with the reward redemption API to process rewards. Implement proper state management to track the verification and redemption flow. Follow the Figma design for mobile-first layout and ensure smooth transitions between verification and redemption steps. Use shadcn/ui version 2.3.0 components for all UI elements to maintain consistency with the design system.",
      "testStrategy": "Test the wallet scanning functionality with different wallet QR codes. Test manual wallet address input with valid and invalid addresses. Verify API integration for reward redemption works correctly. Ensure the UI matches the Figma design and provides clear feedback during the redemption process. Verify that shadcn/ui components are properly implemented and responsive across different screen sizes.",
      "subtasks": [
        {
          "id": 1,
          "title": "Implement Wallet Scan/Input Modal Component",
          "description": "Create the RedeemWalletModal.tsx component that allows users to scan a wallet QR code or manually input a wallet address",
          "dependencies": [],
          "details": "Implementation details:\n1. Create a new component file RedeemWalletModal.tsx in the appropriate directory\n2. Implement a mobile-first UI according to the Figma design with:\n   - A QR code scanner component using a library like react-qr-reader\n   - A manual input field for wallet addresses with validation using shadcn/ui v2.3.0 Input component\n   - A toggle between scan and manual input modes using shadcn/ui v2.3.0 Tabs or Switch component\n   - Appropriate error handling for invalid wallet addresses with shadcn/ui v2.3.0 Alert component\n3. Add state management to track the entered/scanned wallet address\n4. Implement form validation to ensure the wallet address is in the correct format\n5. Add a submit button using shadcn/ui v2.3.0 Button component that will be used to proceed to redemption\n6. Create unit tests to verify:\n   - Component renders correctly\n   - Input validation works as expected\n   - Mode switching between scan and manual input functions properly\n   - Submit functionality captures the correct wallet address\n\n<info added on 2025-04-30T05:22:15.182Z>\nAdditional implementation details:\n\n- Use the shadcn/ui v2.3.0 Dialog component as the foundation for the modal, ensuring it follows the design system's styling and accessibility features\n- Implement the modal with proper responsive behavior using shadcn/ui v2.3.0's responsive utilities\n- For the wallet address input field, use shadcn/ui v2.3.0 Input component with the following configuration:\n  - Set appropriate placeholder text (e.g., \"Enter wallet address\")\n  - Add proper aria-labels for accessibility\n  - Implement the shadcn/ui v2.3.0 Form component to wrap the Input for validation integration\n  - Use shadcn/ui's built-in validation styling for error states\n- Ensure the modal has proper focus management according to shadcn/ui v2.3.0 specifications\n- Add appropriate animations for modal entry/exit using shadcn/ui v2.3.0 transition utilities\n</info added on 2025-04-30T05:22:15.182Z>",
          "status": "pending",
          "parentTaskId": 3
        },
        {
          "id": 2,
          "title": "Integrate Reward Redemption API",
          "description": "Create a service to handle the API integration for redeeming rewards using the wallet address",
          "dependencies": [
            1
          ],
          "details": "Implementation details:\n1. Create a new service file (e.g., rewardService.ts) to handle API interactions\n2. Implement a redeemReward function that:\n   - Takes a wallet address and verification ID as parameters\n   - Makes a POST request to the reward redemption API endpoint\n   - Handles success and error responses appropriately\n   - Returns a promise with the redemption result\n3. Add proper error handling for network issues, server errors, and validation errors\n4. Create a Redux action/reducer or context state updates to manage the redemption process state\n5. Implement loading states during API calls with shadcn/ui v2.3.0 Skeleton or Spinner components\n6. Add unit tests for the service:\n   - Mock API responses for success and failure scenarios\n   - Test error handling\n   - Verify correct parameters are sent to the API\n7. Connect the RedeemWalletModal submit button to trigger this API call with the entered wallet address",
          "status": "pending",
          "parentTaskId": 3
        },
        {
          "id": 3,
          "title": "Implement Redemption Success Modal and Flow",
          "description": "Create the RedeemSuccessModal.tsx component and implement the complete redemption flow with state management",
          "dependencies": [
            1,
            2
          ],
          "details": "Implementation details:\n1. Create a new component file RedeemSuccessModal.tsx in the appropriate directory\n2. Implement the success modal UI according to the Figma design with:\n   - Confirmation message\n   - Transaction details (if available from API)\n   - A button to close or return to home using shadcn/ui v2.3.0 Button component\n   - Use shadcn/ui v2.3.0 Dialog or Modal component as the container\n3. Implement the complete redemption flow state management:\n   - Track verification status\n   - Track wallet input status\n   - Track redemption API call status\n   - Handle transitions between verification, wallet input, and success states\n4. Add smooth transitions between the verification step, wallet input modal, and success modal\n5. Implement proper error handling throughout the flow using shadcn/ui v2.3.0 Alert or Toast components\n6. Add analytics tracking for successful redemptions\n7. Create unit and integration tests:\n   - Test the success modal renders correctly\n   - Test the complete flow from verification to redemption success\n   - Test error scenarios and recovery\n8. Ensure the entire flow works on both mobile and desktop viewports\n\n<info added on 2025-04-30T05:22:23.107Z>\nFor the Modal component implementation:\n\n- Use shadcn/ui v2.3.0 Dialog component as the base for the success modal\n- Configure the Dialog with `<Dialog.Root>`, `<Dialog.Trigger>`, `<Dialog.Portal>`, `<Dialog.Overlay>`, `<Dialog.Content>`, and `<Dialog.Close>` components\n- Add appropriate animations using the built-in shadcn/ui transitions\n- Ensure proper accessibility attributes are set on the Dialog component\n- For the confirmation button, use the shadcn/ui v2.3.0 Button component with variant=\"default\" and size=\"lg\"\n- Consider using shadcn/ui v2.3.0 ScrollArea if the transaction details might overflow the modal\n- Implement proper focus management when the modal opens and closes\n</info added on 2025-04-30T05:22:23.107Z>",
          "status": "pending",
          "parentTaskId": 3
        }
      ]
    },
    {
      "id": 4,
      "title": "Develop UI Component Library",
      "description": "Continue developing the reusable UI component library with consistent design tokens",
      "status": "done",
      "dependencies": [],
      "priority": "medium",
      "details": "Continue developing the UI component library using Tailwind CSS and shadcn/ui version 2.3.0 as a foundation. Several components have already been implemented (Filters, LandingCard, ProtectedRoute, QRCodeScanner, Sidebar, Table). Additionally, initial implementation/setup for Modal, Button, Input, Checkbox, Radio Group, Toast, Select, and Alert components using shadcn/ui v2.3.0 is now complete. Documentation and initial design consistency review for existing components have also been addressed.\n\nFocus on refining and extending these components, particularly:\n\n1. Enhancing Modal components with additional variations and use cases\n2. Expanding Button components with application-specific variants\n3. Extending Input components with custom validation patterns\n4. Refining form components (selects, checkboxes, radio buttons) for specific use cases\n5. Enhancing feedback components (toasts, alerts) with application-specific messaging\n6. Additional layout and navigation components as needed\n\nMaintain consistent styling with Tailwind CSS across all components. Continue to refine the cohesive design system with tokens for colors, typography, spacing, and shadows. Ensure all components are accessible and responsive, and continue to document new features and variations.",
      "testStrategy": "Test each component individually for proper rendering and functionality. Verify components work correctly across different screen sizes. Check accessibility compliance for all interactive components. Ensure consistent styling and behavior across the component library. For already implemented components (Filters, LandingCard, ProtectedRoute, QRCodeScanner, Sidebar, Table, Modal, Button, Input, Checkbox, Radio Group, Toast, Select, Alert), perform regression testing to ensure they continue to function correctly with new additions and refinements.",
      "subtasks": [
        {
          "id": 1,
          "title": "Implement Modal Component",
          "description": "Create a reusable Modal component with different size variants and standard features (close button, title area, content area, footer with action buttons). Use shadcn/ui Dialog component as the foundation.",
          "status": "done"
        },
        {
          "id": 2,
          "title": "Implement Button Component System",
          "description": "Create a comprehensive Button component with variants (primary, secondary, tertiary), states (default, hover, active, disabled), and sizes (small, medium, large). Use shadcn/ui Button component as the foundation.",
          "status": "done"
        },
        {
          "id": 3,
          "title": "Implement Input Components",
          "description": "Create standardized Input components with validation states, error messages, and consistent styling. Use shadcn/ui Input component as the foundation.",
          "status": "done"
        },
        {
          "id": 4,
          "title": "Document Existing Components",
          "description": "Create documentation for already implemented components (Filters, LandingCard, ProtectedRoute, QRCodeScanner, Sidebar, Table) with usage examples and props. Ensure documentation specifically covers how these components integrate with shadcn/ui version 2.3.0 and any version-specific features being utilized.",
          "status": "done"
        },
        {
          "id": 5,
          "title": "Ensure Design Consistency",
          "description": "Review all components to ensure consistent application of design tokens and Tailwind classes. Verify that all components follow shadcn/ui version 2.3.0 conventions and best practices for styling and component structure.",
          "status": "done"
        },
        {
          "id": 6,
          "title": "Verify shadcn/ui Version Compatibility",
          "description": "Ensure all components are compatible with shadcn/ui version 2.3.0 and leverage its features appropriately",
          "status": "done"
        },
        {
          "id": 7,
          "title": "Implement Checkbox Component",
          "description": "Add and configure the shadcn/ui Checkbox component (version 2.3.0) for use in forms. Ensure it integrates with form handling libraries if necessary.",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 4
        },
        {
          "id": 8,
          "title": "Implement Radio Group Component",
          "description": "Add and configure the shadcn/ui Radio Group component (version 2.3.0) for selecting one option from a set. Ensure proper label association and form integration.",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 4
        },
        {
          "id": 9,
          "title": "Implement Toast Notification System",
          "description": "Add and configure the shadcn/ui Toast component (version 2.3.0) system for displaying brief, non-interruptive notifications. Set up the Toaster and provide a hook or utility for triggering toasts.",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 4
        },
        {
          "id": 10,
          "title": "Review/Refine Select Component Integration",
          "description": "Ensure the shadcn/ui Select component (version 2.3.0) is properly integrated and styled for use in forms and filter components.",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 4
        },
        {
          "id": 11,
          "title": "Review/Refine Alert Component Usage",
          "description": "Ensure the shadcn/ui Alert component (version 2.3.0) is used consistently for displaying important messages and error states, leveraging variants like 'destructive'.",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 4
        },
        {
          "id": 12,
          "title": "Create Application-Specific Button Variants",
          "description": "Extend the base Button component with application-specific variants needed for the project (e.g., action buttons, navigation buttons, etc.). Ensure these maintain design consistency while addressing specific UI needs.",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 4
        },
        {
          "id": 13,
          "title": "Enhance Modal Component with Additional Variations",
          "description": "Extend the base Modal component with additional variations for specific use cases (confirmation dialogs, form modals, information modals, etc.). Implement standard patterns for each variation.",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 4
        },
        {
          "id": 14,
          "title": "Implement Custom Form Validation Patterns",
          "description": "Extend the Input components with custom validation patterns specific to application needs. Create reusable validation hooks or utilities that work with the form components.",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 4
        },
        {
          "id": 15,
          "title": "Document New Component Variations",
          "description": "Create comprehensive documentation for the new component variations and extensions, including usage examples, props, and integration patterns.",
          "details": "",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 4
        }
      ]
    },
    {
      "id": 5,
      "title": "Implement Brand Owner Dashboard Layout",
      "description": "Create the dashboard layout with sidebar navigation for brand owners using shadcn/ui components",
      "status": "done",
      "dependencies": [
        4
      ],
      "priority": "medium",
      "details": "Implement the `BrandOwnerLayout.tsx` component that includes a collapsible sidebar with navigation links and a main content area. Use shadcn/ui version 2.3.0 components for the layout, specifically utilizing the Sidebar/Sheet components for navigation. Use the sidebar design from Figma with icons for each section (Dashboard, Product Management, Add Product, Reseller Management, User Management, Settings). Implement the top bar/header with page title and user information. Set up nested routes within React Router for the brand owner dashboard sections. Ensure the layout is responsive and adapts to different screen sizes.",
      "testStrategy": "Test the sidebar navigation to ensure all links work correctly. Verify the layout is responsive on different screen sizes. Check that the collapsible sidebar functions properly. Ensure the nested routes render the correct content in the main area. Verify shadcn/ui components are properly implemented and styled according to the design.",
      "subtasks": [
        {
          "id": 1,
          "title": "Enhance Sidebar with Brand Owner Navigation Links and Icons",
          "description": "Update the existing Sidebar.tsx component to include brand owner specific navigation links with icons as per the Figma design. Implement collapsible functionality and ensure proper styling.",
          "dependencies": [],
          "details": "1. Update Sidebar.tsx to include the specific navigation links for brand owners (Dashboard, Product Management, Add Product, Reseller Management, User Management, Settings).\n2. Add appropriate icons for each navigation item from an icon library (e.g., React Icons, Material UI icons).\n3. Implement the collapsible functionality with an expand/collapse button.\n4. Style the sidebar according to the Figma design, including active states for selected items.\n5. Ensure the sidebar is responsive and adapts to different screen sizes (consider using media queries).\n6. Test the sidebar navigation by verifying that links are clickable and the collapse/expand functionality works properly.\n7. Implement smooth transitions for the collapse/expand animations.",
          "status": "done",
          "parentTaskId": 5
        },
        {
          "id": 2,
          "title": "Implement Main Content Area and React Router Integration",
          "description": "Create the main content area structure in BrandOwnerLayout.tsx and set up nested routes with React Router to dynamically render content based on sidebar selection.",
          "dependencies": [
            1
          ],
          "details": "1. Create the BrandOwnerLayout.tsx component that incorporates the enhanced Sidebar from subtask 1.\n2. Implement the top bar/header with page title that dynamically updates based on the selected navigation item.\n3. Add user information display in the header (avatar, name, dropdown menu).\n4. Set up the main content area with appropriate padding and responsive layout.\n5. Configure React Router with nested routes for each section (Dashboard, Product Management, etc.).\n6. Create placeholder components for each section that will be rendered in the main content area.\n7. Implement logic to highlight the active navigation item in the sidebar based on the current route.\n8. Test the routing by navigating between different sections and verifying that the correct content is displayed.\n9. Ensure the layout maintains responsiveness across different screen sizes.\n10. Add appropriate loading states for route transitions.",
          "status": "done",
          "parentTaskId": 5
        },
        {
          "id": 3,
          "title": "Integrate shadcn/ui v2.3.0 Components",
          "description": "Integrate and configure shadcn/ui version 2.3.0 components for the layout, focusing on Sidebar/Sheet components.",
          "dependencies": [],
          "details": "1. Install shadcn/ui version 2.3.0 and its dependencies.\n2. Replace or enhance the current sidebar implementation with shadcn/ui Sheet component for mobile responsiveness.\n3. Configure the shadcn/ui Sidebar component with proper styling to match the Figma design.\n4. Implement responsive behavior using shadcn/ui's built-in responsive utilities.\n5. Ensure proper theming and styling integration with the rest of the application.\n6. Test the shadcn/ui components across different screen sizes and browsers.\n7. Document any custom configurations or extensions made to the shadcn/ui components for future reference.",
          "status": "done",
          "parentTaskId": 5
        }
      ]
    },
    {
      "id": 6,
      "title": "Implement Product Management Page",
      "description": "Create the product management interface for brand owners to view and manage products",
      "status": "done",
      "dependencies": [
        5
      ],
      "priority": "medium",
      "details": "Implement the `ProductManagementPage.tsx` component with filter controls (date, category, product ID) and a product table using shadcn/ui Table component version 2.3.0. Connect to the API to fetch and display products for the brand owner's organization. Implement filtering functionality to filter products based on selected criteria. Add actions for editing products and generating QR codes. Include pagination for large product lists. Follow the Figma design for the product management page layout and styling. Use shadcn/ui version 2.3.0 for all UI components including Table, Modals, and other interface elements.",
      "testStrategy": "Test fetching and displaying products from the API. Verify filtering functionality works correctly. Test pagination with large datasets. Ensure the UI matches the Figma design and is responsive. Test error handling for API failures. Verify that all shadcn/ui components (version 2.3.0) are properly implemented and styled.",
      "subtasks": [
        {
          "id": 1,
          "title": "Refactor Product Components into Separate Reusable Components",
          "description": "Extract and refactor ProductCard, CreateProductModal, and GenerateQRModal from the inline implementation in brand-owners/products.tsx into separate reusable components.",
          "dependencies": [],
          "details": "1. Create separate component files in the components/product directory:\n   - components/product/ProductCard.tsx\n   - components/product/CreateProductModal.tsx\n   - components/product/GenerateQRModal.tsx\n2. Move the existing implementation from brand-owners/products.tsx to these files\n3. Add proper TypeScript interfaces for component props\n4. Ensure components are properly exported\n5. Update imports in brand-owners/products.tsx to use the new component files\n6. Test each component individually to ensure they render correctly\n7. Implement proper prop passing between parent and child components\n8. Add documentation comments to describe component purpose and usage\n9. Use shadcn/ui version 2.3.0 components for all UI elements",
          "status": "done",
          "parentTaskId": 6
        },
        {
          "id": 2,
          "title": "Replace Mock API Calls with Actual Backend Canister Calls",
          "description": "Replace the mock API calls for product listing and creation with actual calls to the TrustOrigin_backend canister.",
          "dependencies": [
            1
          ],
          "details": "1. Update the API service to include methods for interacting with the TrustOrigin_backend canister:\n   - Implement `listProductsByOrganization(orgId: string)` function\n   - Implement `createProduct(productData: ProductData)` function\n2. Replace mock data fetching in brand-owners/products.tsx with real API calls\n3. Implement proper loading states during API calls\n4. Add error handling for failed API requests\n5. Update the CreateProductModal to use the real product creation API\n6. Ensure the product table refreshes after successful product creation\n7. Test the integration with the backend using different test accounts\n8. Implement proper TypeScript interfaces for API responses",
          "status": "done",
          "parentTaskId": 6
        },
        {
          "id": 3,
          "title": "Implement Edit Product Functionality",
          "description": "Create an EditProductModal component and implement the functionality to edit existing products.",
          "dependencies": [
            1,
            2
          ],
          "details": "1. Create a new EditProductModal.tsx component in the components/product directory\n2. Implement the modal UI based on the Figma design, using shadcn/ui Modal component version 2.3.0\n3. Add an edit button/action to each product row in the product table\n4. Implement the API service method `updateProduct(productId: string, productData: ProductData)`\n5. Connect the EditProductModal to the backend API\n6. Pre-populate the edit form with the selected product's current data\n7. Add form validation for the edit form\n8. Implement success/error notifications for the edit operation\n9. Refresh the product table after successful edits\n10. Test editing different product fields and verify changes are persisted",
          "status": "done",
          "parentTaskId": 6
        },
        {
          "id": 4,
          "title": "Implement QR Code Generation and Serial Number Logic",
          "description": "Connect the GenerateQRModal to the backend to implement actual QR code and serial number generation functionality.",
          "dependencies": [
            1,
            2
          ],
          "details": "1. Update the GenerateQRModal component to connect with the backend, using shadcn/ui Modal component version 2.3.0\n2. Implement the API service method `generateProductSerials(productId: string, quantity: number)`\n3. Add form validation for serial number quantity input\n4. Implement loading states during QR code generation\n5. Create a QR code display component that renders the generated QR codes\n6. Add functionality to download individual QR codes or all QR codes as a ZIP file\n7. Implement a preview of generated serial numbers\n8. Add success/error notifications for the generation process\n9. Implement pagination if many QR codes are generated, using shadcn/ui pagination components\n10. Test the generation process with different quantities and product types\n11. Ensure generated QR codes contain the correct product information and can be properly scanned",
          "status": "done",
          "parentTaskId": 6
        }
      ]
    },
    {
      "id": 7,
      "title": "Implement Add Product Form",
      "description": "Enhance the existing CreateProductModal within brand-owners/products.tsx for adding new products to the system",
      "status": "in-progress",
      "dependencies": [
        5,
        6
      ],
      "priority": "medium",
      "details": "Work with the existing `CreateProductModal` component within brand-owners/products.tsx that contains form fields for product name, category, description, and metadata. This task depends on the refactoring subtask from Task 6 to potentially become a standalone component. Ensure the form uses shadcn/ui Form, Input, Textarea, and Select components based on shadcn/ui version 2.3.0. Implement or enhance form validation using react-hook-form and zod. Connect to the API to submit new product data. Add functionality to manage metadata key-value pairs. Follow the Figma design for the add product form layout and styling. Implement success and error feedback for form submission.",
      "testStrategy": "Test form validation with valid and invalid inputs. Verify API integration for creating products works correctly. Test adding and removing metadata fields. Ensure the UI matches the Figma design and provides clear feedback during submission."
    },
    {
      "id": 8,
      "title": "Implement Reseller Dashboard",
      "description": "Create the dashboard layout and registration flow for resellers using shadcn/ui components",
      "status": "pending",
      "dependencies": [
        4
      ],
      "priority": "medium",
      "details": "Implement the `ResellerLayout.tsx` component with sidebar navigation similar to the brand owner dashboard. Create the `ResellerRegistrationPage.tsx` with form fields for name, address, phone number, shop IDs, and document uploads. Implement the `ResellerCertificationPage.tsx` to display and download certification. Connect to the API for submitting registration data and fetching certification status. Follow the Figma design for the reseller dashboard layout and styling. Implement proper file upload handling for documents. Use shadcn/ui version 2.3.0 components throughout the implementation, including Layout, Form, Input, Button, and other UI elements to maintain consistency with the rest of the application.",
      "testStrategy": "Test the registration form with valid and invalid inputs. Verify file upload functionality works correctly. Test API integration for registration and certification. Ensure the UI matches the Figma design and provides clear feedback during the registration process. Verify that shadcn/ui components are properly implemented and styled according to the design system.",
      "subtasks": [
        {
          "id": 1,
          "title": "Implement ResellerLayout.tsx Component with Sidebar Navigation",
          "description": "Create the base layout component for the reseller dashboard with sidebar navigation similar to the brand owner dashboard.",
          "dependencies": [],
          "details": "Implementation steps:\n1. Create a new `ResellerLayout.tsx` component in the appropriate directory\n2. Use shadcn/ui v2.3.0 Layout components for the base structure\n3. Implement the sidebar navigation with links to Dashboard, Registration, Certification, and other relevant pages\n4. Create a content area that will render child components\n5. Style the layout according to the Figma design specifications\n6. Implement responsive behavior for mobile and desktop views\n7. Add any necessary authentication checks or guards\n8. Create unit tests for the layout component\n\nTesting approach:\n- Verify that the sidebar navigation renders correctly\n- Test that navigation links work properly\n- Ensure the layout is responsive across different screen sizes\n- Validate that child components render correctly in the content area\n- Confirm shadcn/ui components are properly implemented",
          "status": "pending",
          "parentTaskId": 8
        },
        {
          "id": 2,
          "title": "Implement ResellerRegistrationPage.tsx with Form and API Integration",
          "description": "Create the registration page for resellers with form fields and API integration for submitting registration data.",
          "dependencies": [
            1
          ],
          "details": "Implementation steps:\n1. Create a new `ResellerRegistrationPage.tsx` component\n2. Use shadcn/ui v2.3.0 Form, Input, Button components for the form implementation\n3. Implement form fields for:\n   - Name\n   - Address\n   - Phone number\n   - Shop IDs\n   - Document uploads\n4. Add form validation for all fields\n5. Implement file upload functionality for documents with:\n   - File size validation\n   - File type validation\n   - Upload progress indicator\n6. Create API service functions to submit registration data to the backend\n7. Add loading states and error handling\n8. Implement success/failure notifications\n9. Style the form according to the Figma design\n\nTesting approach:\n- Test form validation for all fields\n- Verify file upload functionality works correctly\n- Test API integration with mock responses\n- Ensure error states are handled properly\n- Validate that the form submits data in the correct format\n- Verify shadcn/ui components are properly implemented and styled",
          "status": "pending",
          "parentTaskId": 8
        },
        {
          "id": 3,
          "title": "Implement ResellerCertificationPage.tsx with Status Display and Download",
          "description": "Create the certification page that displays certification status and allows downloading of certification documents.",
          "dependencies": [
            1,
            2
          ],
          "details": "Implementation steps:\n1. Create a new `ResellerCertificationPage.tsx` component\n2. Use shadcn/ui v2.3.0 components for UI elements (Card, Badge, Button, etc.)\n3. Implement API service functions to fetch certification status and data\n4. Create UI components to display certification status (pending, approved, rejected)\n5. Add detailed view of certification information\n6. Implement document download functionality for approved certifications\n7. Add appropriate loading states and error handling\n8. Create empty/pending states for users without certifications\n9. Style the page according to the Figma design\n\nTesting approach:\n- Test API integration for fetching certification data\n- Verify that different certification statuses display correctly\n- Test document download functionality\n- Ensure proper error handling for API failures\n- Validate that the UI matches the Figma design specifications\n- Confirm shadcn/ui components are properly implemented and styled",
          "status": "pending",
          "parentTaskId": 8
        }
      ]
    },
    {
      "id": 9,
      "title": "Implement User Dashboard",
      "description": "Create the user dashboard with verification history and profile management",
      "status": "pending",
      "dependencies": [
        4
      ],
      "priority": "low",
      "details": "Implement the user dashboard with components for profile management (name, email, phone), verification history list with pagination, and reward points/tokens display. Create a user settings page for preference management. Connect to the API to fetch user profile data and verification history. Implement pagination for the verification history list. Follow a responsive design approach to ensure the dashboard works on all device sizes. Add functionality to update user profile information. Use shadcn/ui version 2.3.0 for UI components including Layout, Table, and other interface elements.",
      "testStrategy": "Test fetching and displaying user profile data and verification history. Verify pagination works correctly. Test updating user profile information. Ensure the dashboard is responsive on different screen sizes. Test error handling for API failures.",
      "subtasks": [
        {
          "id": 1,
          "title": "Implement User Dashboard Layout and Profile Management",
          "description": "Create the user dashboard UI with responsive layout, profile management section, and user settings page with the ability to view and edit user information.",
          "dependencies": [],
          "details": "Implementation details:\n1. Create a responsive dashboard layout with sidebar navigation and main content area using shadcn/ui v2.3.0 components\n2. Implement profile management section with editable fields for name, email, and phone number using shadcn/ui Form components\n3. Create a user settings page with preference management options using shadcn/ui components\n4. Connect to the API to fetch user profile data\n5. Implement functionality to update user profile information with form validation\n6. Add a reward points/tokens display component using shadcn/ui Card component\n7. Ensure responsive design works on all device sizes (mobile, tablet, desktop)\n8. Add loading states and error handling for API interactions\n9. Test profile data fetching and updating functionality\n10. Implement unit tests for profile management components",
          "status": "pending",
          "parentTaskId": 9
        },
        {
          "id": 2,
          "title": "Implement Verification History with Pagination",
          "description": "Create the verification history section of the dashboard that displays past verifications with pagination support.",
          "dependencies": [
            1
          ],
          "details": "Implementation details:\n1. Create a verification history list component that displays past verifications using shadcn/ui v2.3.0 Table component\n2. Connect to the API to fetch verification history data\n3. Implement pagination controls (previous/next buttons, page numbers) using shadcn/ui Pagination component\n4. Add functionality to change page size (items per page) using shadcn/ui Select component\n5. Display verification details including date, status, and type\n6. Implement sorting and filtering options for the verification history using shadcn/ui components\n7. Add loading states while fetching verification data using shadcn/ui Skeleton component\n8. Implement error handling for API request failures\n9. Ensure the verification history component is responsive across all device sizes\n10. Add unit tests for the verification history component and pagination functionality",
          "status": "pending",
          "parentTaskId": 9
        }
      ]
    },
    {
      "id": 10,
      "title": "Implement Comprehensive Error Handling",
      "description": "Enhance and standardize error handling across the application, building upon existing error handling in some components",
      "status": "in-progress",
      "dependencies": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "priority": "medium",
      "details": "Review and build upon existing error handling in QRCodeScanner, productApi, ProtectedRoute, and unauthorized.tsx components. Implement a global error boundary to catch and display unhandled errors. Standardize API error handling and display mechanisms across all components. Implement consistent form validation errors with clear user feedback. Add network error detection and retry functionality where missing. Set up an error logging system to track and report errors. Create a library of user-friendly error messages for different error scenarios. Ensure all components handle loading, error, and empty states appropriately. Implement toast notifications for success and error feedback using shadcn/ui version 2.3.0 components (Alert, Toast) for consistent UI presentation.",
      "testStrategy": "Audit existing error handling in QRCodeScanner, productApi, ProtectedRoute, and unauthorized.tsx to understand current implementation. Test enhanced error handling with various error scenarios (network errors, API errors, validation errors). Verify error messages are user-friendly and helpful. Test the error boundary with forced errors. Ensure loading states are displayed appropriately during API calls. Check that retry functionality works correctly for recoverable errors. Verify standardized error handling works consistently across all components. Confirm shadcn/ui components are properly implemented for error feedback.",
      "subtasks": [
        {
          "id": 1,
          "title": "Define Standard Error Format and Create Error Utility Library",
          "description": "Create a standardized error structure and utility functions for consistent error handling across the application",
          "dependencies": [],
          "details": "1. Create an `errors` directory with an index.ts file to export all error-related utilities\n2. Define standard error interfaces (e.g., `AppError`, `ApiError`, `ValidationError`)\n3. Implement error factory functions to create consistent error objects\n4. Create a library of user-friendly error messages for common scenarios\n5. Implement utility functions for error classification (network errors, validation errors, etc.)\n6. Add helper functions for error logging and reporting\n7. Create a toast notification system for displaying errors and success messages using shadcn/ui Toast component v2.3.0\n8. Test the error utilities with various error scenarios\n9. Document the error structure and utilities for other developers",
          "status": "pending",
          "parentTaskId": 10
        },
        {
          "id": 2,
          "title": "Implement Global Error Boundary Component",
          "description": "Create a global error boundary to catch unhandled errors and provide fallback UI",
          "dependencies": [
            1
          ],
          "details": "1. Create an `ErrorBoundary` component using React's error boundary API\n2. Implement fallback UI for different types of errors using the standard error format and shadcn/ui Alert component v2.3.0\n3. Add error reporting functionality to send errors to logging service\n4. Configure the ErrorBoundary to reset on route changes\n5. Wrap the application root with the ErrorBoundary component\n6. Add specific error boundaries for critical application sections\n7. Implement retry functionality where appropriate\n8. Test the error boundary by intentionally throwing errors\n9. Create loading and empty state components that can be used consistently\n10. Update the application's root component to use the new error boundary",
          "status": "pending",
          "parentTaskId": 10
        },
        {
          "id": 3,
          "title": "Standardize API and Component Error Handling",
          "description": "Review and improve error handling in API client calls and UI components for consistent user feedback",
          "dependencies": [
            1,
            2
          ],
          "details": "1. Refactor the API client to use the standard error format from subtask 1\n2. Update existing error handling in QRCodeScanner, productApi, ProtectedRoute, and unauthorized.tsx\n3. Implement network error detection and retry functionality in API calls\n4. Create a higher-order component or hook for standardized API error handling\n5. Update form components to use consistent validation error display with shadcn/ui Alert component v2.3.0\n6. Implement toast notifications for API success and error feedback using shadcn/ui Toast component v2.3.0\n7. Add loading, error, and empty states to all data-fetching components\n8. Create reusable error display components (inline errors, error pages, etc.) using shadcn/ui components\n9. Test error handling across different network conditions\n10. Update documentation with examples of proper error handling patterns",
          "status": "pending",
          "parentTaskId": 10
        }
      ]
    }
  ],
  "metadata": {
    "projectName": "TrueOrigin Frontend Implementation",
    "totalTasks": 10,
    "sourceFile": "/Users/prasetyopandu/Documents/Project/icp/TrueOrigin/plans/frontend.md",
    "generatedAt": "2024-10-07"
  }
}