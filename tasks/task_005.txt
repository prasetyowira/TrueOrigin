# Task ID: 5
# Title: Implement Brand Owner Dashboard Layout
# Status: done
# Dependencies: 4
# Priority: medium
# Description: Create the dashboard layout with sidebar navigation for brand owners using shadcn/ui components
# Details:
Implement the `BrandOwnerLayout.tsx` component that includes a collapsible sidebar with navigation links and a main content area. Use shadcn/ui version 2.3.0 components for the layout, specifically utilizing the Sidebar/Sheet components for navigation. Use the sidebar design from Figma with icons for each section (Dashboard, Product Management, Add Product, Reseller Management, User Management, Settings). Implement the top bar/header with page title and user information. Set up nested routes within React Router for the brand owner dashboard sections. Ensure the layout is responsive and adapts to different screen sizes.

# Test Strategy:
Test the sidebar navigation to ensure all links work correctly. Verify the layout is responsive on different screen sizes. Check that the collapsible sidebar functions properly. Ensure the nested routes render the correct content in the main area. Verify shadcn/ui components are properly implemented and styled according to the design.

# Subtasks:
## 1. Enhance Sidebar with Brand Owner Navigation Links and Icons [done]
### Dependencies: None
### Description: Update the existing Sidebar.tsx component to include brand owner specific navigation links with icons as per the Figma design. Implement collapsible functionality and ensure proper styling.
### Details:
1. Update Sidebar.tsx to include the specific navigation links for brand owners (Dashboard, Product Management, Add Product, Reseller Management, User Management, Settings).
2. Add appropriate icons for each navigation item from an icon library (e.g., React Icons, Material UI icons).
3. Implement the collapsible functionality with an expand/collapse button.
4. Style the sidebar according to the Figma design, including active states for selected items.
5. Ensure the sidebar is responsive and adapts to different screen sizes (consider using media queries).
6. Test the sidebar navigation by verifying that links are clickable and the collapse/expand functionality works properly.
7. Implement smooth transitions for the collapse/expand animations.

## 2. Implement Main Content Area and React Router Integration [done]
### Dependencies: 5.1
### Description: Create the main content area structure in BrandOwnerLayout.tsx and set up nested routes with React Router to dynamically render content based on sidebar selection.
### Details:
1. Create the BrandOwnerLayout.tsx component that incorporates the enhanced Sidebar from subtask 1.
2. Implement the top bar/header with page title that dynamically updates based on the selected navigation item.
3. Add user information display in the header (avatar, name, dropdown menu).
4. Set up the main content area with appropriate padding and responsive layout.
5. Configure React Router with nested routes for each section (Dashboard, Product Management, etc.).
6. Create placeholder components for each section that will be rendered in the main content area.
7. Implement logic to highlight the active navigation item in the sidebar based on the current route.
8. Test the routing by navigating between different sections and verifying that the correct content is displayed.
9. Ensure the layout maintains responsiveness across different screen sizes.
10. Add appropriate loading states for route transitions.

## 3. Integrate shadcn/ui v2.3.0 Components [done]
### Dependencies: None
### Description: Integrate and configure shadcn/ui version 2.3.0 components for the layout, focusing on Sidebar/Sheet components.
### Details:
1. Install shadcn/ui version 2.3.0 and its dependencies.
2. Replace or enhance the current sidebar implementation with shadcn/ui Sheet component for mobile responsiveness.
3. Configure the shadcn/ui Sidebar component with proper styling to match the Figma design.
4. Implement responsive behavior using shadcn/ui's built-in responsive utilities.
5. Ensure proper theming and styling integration with the rest of the application.
6. Test the shadcn/ui components across different screen sizes and browsers.
7. Document any custom configurations or extensions made to the shadcn/ui components for future reference.

