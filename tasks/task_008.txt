# Task ID: 8
# Title: Implement Reseller Dashboard
# Status: pending
# Dependencies: 4
# Priority: medium
# Description: Create the dashboard layout and registration flow for resellers using shadcn/ui components
# Details:
Implement the `ResellerLayout.tsx` component with sidebar navigation similar to the brand owner dashboard. Create the `ResellerRegistrationPage.tsx` with form fields for name, address, phone number, shop IDs, and document uploads. Implement the `ResellerCertificationPage.tsx` to display and download certification. Connect to the API for submitting registration data and fetching certification status. Follow the Figma design for the reseller dashboard layout and styling. Implement proper file upload handling for documents. Use shadcn/ui version 2.3.0 components throughout the implementation, including Layout, Form, Input, Button, and other UI elements to maintain consistency with the rest of the application.

# Test Strategy:
Test the registration form with valid and invalid inputs. Verify file upload functionality works correctly. Test API integration for registration and certification. Ensure the UI matches the Figma design and provides clear feedback during the registration process. Verify that shadcn/ui components are properly implemented and styled according to the design system.

# Subtasks:
## 1. Implement ResellerLayout.tsx Component with Sidebar Navigation [pending]
### Dependencies: None
### Description: Create the base layout component for the reseller dashboard with sidebar navigation similar to the brand owner dashboard.
### Details:
Implementation steps:
1. Create a new `ResellerLayout.tsx` component in the appropriate directory
2. Use shadcn/ui v2.3.0 Layout components for the base structure
3. Implement the sidebar navigation with links to Dashboard, Registration, Certification, and other relevant pages
4. Create a content area that will render child components
5. Style the layout according to the Figma design specifications
6. Implement responsive behavior for mobile and desktop views
7. Add any necessary authentication checks or guards
8. Create unit tests for the layout component

Testing approach:
- Verify that the sidebar navigation renders correctly
- Test that navigation links work properly
- Ensure the layout is responsive across different screen sizes
- Validate that child components render correctly in the content area
- Confirm shadcn/ui components are properly implemented

## 2. Implement ResellerRegistrationPage.tsx with Form and API Integration [pending]
### Dependencies: 8.1
### Description: Create the registration page for resellers with form fields and API integration for submitting registration data.
### Details:
Implementation steps:
1. Create a new `ResellerRegistrationPage.tsx` component
2. Use shadcn/ui v2.3.0 Form, Input, Button components for the form implementation
3. Implement form fields for:
   - Name
   - Address
   - Phone number
   - Shop IDs
   - Document uploads
4. Add form validation for all fields
5. Implement file upload functionality for documents with:
   - File size validation
   - File type validation
   - Upload progress indicator
6. Create API service functions to submit registration data to the backend
7. Add loading states and error handling
8. Implement success/failure notifications
9. Style the form according to the Figma design

Testing approach:
- Test form validation for all fields
- Verify file upload functionality works correctly
- Test API integration with mock responses
- Ensure error states are handled properly
- Validate that the form submits data in the correct format
- Verify shadcn/ui components are properly implemented and styled

## 3. Implement ResellerCertificationPage.tsx with Status Display and Download [pending]
### Dependencies: 8.1, 8.2
### Description: Create the certification page that displays certification status and allows downloading of certification documents.
### Details:
Implementation steps:
1. Create a new `ResellerCertificationPage.tsx` component
2. Use shadcn/ui v2.3.0 components for UI elements (Card, Badge, Button, etc.)
3. Implement API service functions to fetch certification status and data
4. Create UI components to display certification status (pending, approved, rejected)
5. Add detailed view of certification information
6. Implement document download functionality for approved certifications
7. Add appropriate loading states and error handling
8. Create empty/pending states for users without certifications
9. Style the page according to the Figma design

Testing approach:
- Test API integration for fetching certification data
- Verify that different certification statuses display correctly
- Test document download functionality
- Ensure proper error handling for API failures
- Validate that the UI matches the Figma design specifications
- Confirm shadcn/ui components are properly implemented and styled

