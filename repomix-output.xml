This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
scripts/
  task-complexity-report.json
src/
  declarations/
    TrustOrigin_backend/
      index.d.ts
      index.js
      TrustOrigin_backend.did
      TrustOrigin_backend.did.d.ts
      TrustOrigin_backend.did.js
  frontend/
    src/
      api/
        productApi.ts
      components/
        icons/
          index.tsx
        ui/
          alert.tsx
          avatar.tsx
          button.tsx
          card.tsx
          checkbox.tsx
          dialog.tsx
          input.tsx
          label.tsx
          radio-group.tsx
          select.tsx
          table.tsx
          tabs.tsx
          textarea.tsx
          toast.tsx
          toaster.tsx
        Accordion.tsx
        Avatar.tsx
        Badge.tsx
        Breadcrumb.tsx
        Card.tsx
        CardGrid.tsx
        ConfirmationModal.tsx
        Container.tsx
        DashboardLayout.tsx
        DataGrid.tsx
        Filters.tsx
        FormField.tsx
        index.ts
        interfaces.d.ts
        LandingCard.tsx
        LoadingSpinner.tsx
        Modal.tsx
        Pagination.tsx
        ProtectedRoute.tsx
        QRCodeScanner.tsx
        SelectField.tsx
        Sidebar.tsx
        SidebarLogo.tsx
        SidebarToggle.tsx
        Table.tsx
        Tabs.tsx
        TextareaField.tsx
        Toast.tsx
        Tooltip.tsx
      contexts/
        useAuthContext/
          index.tsx
          interface.d.ts
      hooks/
        use-toast.ts
        useAuth.ts
      layouts/
        BrandOwnerLayout.tsx
      lib/
        utils.ts
        validators.ts
      pages/
        auth/
          login.tsx
        brand-owners/
          products.tsx
        home.tsx
        placeholder.tsx
        unauthorized.tsx
        verify.tsx
      providers/
        index.ts
        QueryProvider.tsx
      types/
        global.d.ts
      App.tsx
      index.css
      main.tsx
      utils.ts
      vite-env.d.ts
    .gitignore
    components.json
    eslint.config.js
    index.html
    package.json
    postcss.config.cjs
    tailwind.config.js
    tsconfig.app.json
    tsconfig.json
    tsconfig.node.json
    vite.config.ts
.gitignore
.nvmrc
.repomixignore
canister_ids.json
dfx.json
package.json
repomix.config.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/frontend/src/components/icons/index.tsx">
import React from "react";

// Base IconProps type
type IconProps = {
  fillColor?: string;
  strokeColor?: string;
  width?: number | string;
  height?: number | string;
};

// Dashboard Icon
export const DashboardIcon: React.FC<IconProps> = ({ 
  fillColor = "currentColor", 
  strokeColor = "currentColor", 
  width = 24, 
  height = 24 
}) => {
  return (
    <svg
      width={width}
      height={height}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M3 9L12 2L21 9V20C21 20.5304 20.7893 21.0391 20.4142 21.4142C20.0391 21.7893 19.5304 22 19 22H5C4.46957 22 3.96086 21.7893 3.58579 21.4142C3.21071 21.0391 3 20.5304 3 20V9Z"
        stroke={strokeColor}
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M9 22V12H15V22"
        stroke={strokeColor}
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

// Products Icon
export const ProductsIcon: React.FC<IconProps> = ({
  fillColor = "currentColor",
  strokeColor = "currentColor",
  width = 24,
  height = 24
}) => {
  return (
    <svg
      width={width}
      height={height}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path opacity="0.4" d="M22 9.75C21.59 9.75 21.25 9.41 21.25 9V7C21.25 4.42 19.58 2.75 17 2.75H7C4.42 2.75 2.75 4.42 2.75 7V9C2.75 9.41 2.41 9.75 2 9.75C1.59 9.75 1.25 9.41 1.25 9V7C1.25 3.56 3.56 1.25 7 1.25H17C20.44 1.25 22.75 3.56 22.75 7V9C22.75 9.41 22.41 9.75 22 9.75Z" fill={fillColor} />
      <path opacity="0.4" d="M17 22.75H7C3.56 22.75 1.25 20.44 1.25 17V15C1.25 14.59 1.59 14.25 2 14.25C2.41 14.25 2.75 14.59 2.75 15V17C2.75 19.58 4.42 21.25 7 21.25H17C19.58 21.25 21.25 19.58 21.25 17V15C21.25 14.59 21.59 14.25 22 14.25C22.41 14.25 22.75 14.59 22.75 15V17C22.75 20.44 20.44 22.75 17 22.75Z" fill={fillColor} />
      <path d="M16.3999 8.20999L12.6399 6.17996C12.2399 5.96996 11.7699 5.96996 11.3699 6.17996L7.60992 8.20999C7.33992 8.35999 7.16992 8.64995 7.16992 8.97995C7.16992 9.30995 7.33992 9.59997 7.60992 9.74997L11.3699 11.78C11.5699 11.89 11.7899 11.94 12.0099 11.94C12.2299 11.94 12.4499 11.89 12.6499 11.78L16.4099 9.74997C16.6799 9.59997 16.8499 9.30995 16.8499 8.97995C16.8399 8.64995 16.6699 8.35999 16.3999 8.20999Z" fill={fillColor} />
      <path d="M10.7402 12.4699L7.24023 10.7199C6.97023 10.5899 6.66022 10.6 6.40022 10.76C6.14022 10.92 5.99023 11.1899 5.99023 11.4899V14.7999C5.99023 15.3699 6.31024 15.89 6.82024 16.14L10.3202 17.89C10.4402 17.95 10.5702 17.9799 10.7102 17.9799C10.8702 17.9799 11.0202 17.9399 11.1602 17.8499C11.4202 17.6899 11.5702 17.4199 11.5702 17.1199V13.8099C11.5702 13.2399 11.2602 12.7299 10.7402 12.4699Z" fill={fillColor} />
      <path d="M17.5899 10.76C17.3299 10.6 17.0199 10.5899 16.7499 10.7199L13.2499 12.4699C12.7399 12.7299 12.4199 13.2399 12.4199 13.8099V17.1199C12.4199 17.4199 12.5699 17.6899 12.8299 17.8499C12.9699 17.9399 13.1199 17.9799 13.2799 17.9799C13.4099 17.9799 13.5399 17.95 13.6699 17.89L17.1699 16.14C17.6799 15.88 17.9999 15.3699 17.9999 14.7999V11.4899C17.9999 11.1899 17.8499 10.92 17.5899 10.76Z" fill={fillColor} />
    </svg>
  );
};

// ProductAddIcon Icon
export const ProductAddIcon: React.FC<IconProps> = ({
  fillColor = "currentColor",
  strokeColor = "currentColor",
  width = 24,
  height = 24
}) => {
  return (
    <svg
      width={width}
      height={height}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M22 15.7C22 15.69 21.99 15.68 21.98 15.67C21.94 15.61 21.89 15.55 21.84 15.5C21.83 15.49 21.82 15.47 21.81 15.46C21 14.56 19.81 14 18.5 14C17.24 14 16.09 14.52 15.27 15.36C14.48 16.17 14 17.28 14 18.5C14 19.34 14.24 20.14 14.65 20.82C14.87 21.19 15.15 21.53 15.47 21.81C15.49 21.82 15.5 21.83 15.51 21.84C15.56 21.89 15.61 21.93 15.67 21.98C15.67 21.98 15.67 21.98 15.68 21.98C15.69 21.99 15.7 22 15.71 22C16.46 22.63 17.43 23 18.5 23C20.14 23 21.57 22.12 22.35 20.82C22.58 20.43 22.76 20 22.87 19.55C22.96 19.21 23 18.86 23 18.5C23 17.44 22.63 16.46 22 15.7ZM20.18 19.23H19.25V20.2C19.25 20.61 18.91 20.95 18.5 20.95C18.09 20.95 17.75 20.61 17.75 20.2V19.23H16.82C16.41 19.23 16.07 18.89 16.07 18.48C16.07 18.07 16.41 17.73 16.82 17.73H17.75V16.84C17.75 16.43 18.09 16.09 18.5 16.09C18.91 16.09 19.25 16.43 19.25 16.84V17.73H20.18C20.59 17.73 20.93 18.07 20.93 18.48C20.93 18.89 20.6 19.23 20.18 19.23Z" fill={fillColor} />
      <path opacity="0.4" d="M19.3499 5.65995L13.0599 2.27C12.3999 1.91 11.5999 1.91 10.9299 2.27L4.63991 5.65995C4.17991 5.90995 3.8999 6.39998 3.8999 6.93998C3.8999 7.47998 4.17991 7.96995 4.63991 8.21995L10.9299 11.61C11.2599 11.79 11.6299 11.88 11.9899 11.88C12.3499 11.88 12.7199 11.79 13.0499 11.61L19.3399 8.21995C19.7999 7.96995 20.0799 7.47998 20.0799 6.93998C20.0999 6.39998 19.8099 5.90995 19.3499 5.65995Z" fill={fillColor} />
      <path opacity="0.4" d="M9.90021 12.79L4.05022 9.86001C3.60022 9.63001 3.08021 9.66001 2.65021 9.92001C2.22021 10.18 1.97021 10.64 1.97021 11.14V16.67C1.97021 17.63 2.50021 18.49 3.36021 18.92L9.21022 21.8401C9.41022 21.9401 9.63022 21.99 9.85022 21.99C10.1102 21.99 10.3702 21.92 10.6002 21.77C11.0302 21.51 11.2802 21.05 11.2802 20.55V15.02C11.2902 14.08 10.7602 13.22 9.90021 12.79Z" fill={fillColor} />
      <path opacity="0.4" d="M22.03 11.15V15.74C22.02 15.73 22.01 15.71 22 15.7C22 15.69 21.99 15.68 21.9799 15.67C21.9399 15.61 21.89 15.55 21.84 15.5C21.83 15.49 21.82 15.47 21.81 15.46C21 14.56 19.81 14 18.5 14C17.24 14 16.09 14.52 15.27 15.36C14.48 16.17 14 17.28 14 18.5C14 19.34 14.2399 20.14 14.6499 20.82C14.8199 21.11 15.0299 21.37 15.2599 21.61L14.7899 21.85C14.5899 21.95 14.3699 22 14.1499 22C13.8899 22 13.63 21.93 13.39 21.78C12.97 21.52 12.71 21.06 12.71 20.56V15.04C12.71 14.08 13.24 13.22 14.1 12.79L19.95 9.87C20.4 9.64 20.92 9.66 21.35 9.93C21.77 10.19 22.03 10.65 22.03 11.15Z" fill={fillColor} />
    </svg>
  );
};

// ResellerIcon Icon
export const ResellerIcon: React.FC<IconProps> = ({
  fillColor = "currentColor",
  strokeColor = "currentColor",
  width = 24,
  height = 24
}) => {
  return (
    <svg
      width={width}
      height={height}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path opacity="0.4" d="M15.0002 22.75C14.7302 22.75 14.4802 22.6 14.3502 22.37C14.2202 22.14 14.2202 21.85 14.3602 21.62L15.4102 19.87C15.6202 19.51 16.0802 19.4 16.4402 19.61C16.8002 19.82 16.9102 20.28 16.7002 20.64L16.4302 21.09C19.1902 20.44 21.2602 17.96 21.2602 15C21.2602 14.59 21.6002 14.25 22.0102 14.25C22.4202 14.25 22.7602 14.59 22.7602 15C22.7502 19.27 19.2702 22.75 15.0002 22.75Z" fill={fillColor} />
      <path opacity="0.4" d="M2 9.75C1.59 9.75 1.25 9.41 1.25 9C1.25 4.73 4.73 1.25 9 1.25C9.27 1.25 9.51999 1.4 9.64999 1.63C9.77999 1.86 9.78 2.15 9.64 2.38L8.59 4.13C8.38 4.49001 7.92 4.60001 7.56 4.39001C7.2 4.18001 7.09 3.71999 7.3 3.35999L7.57001 2.90997C4.81001 3.55997 2.74001 6.04 2.74001 9C2.75001 9.41 2.41 9.75 2 9.75Z" fill={fillColor} />
      <path d="M10.6704 13.8499L7.53044 12.1599C7.20044 11.9799 6.80044 11.9799 6.47044 12.1599L3.33044 13.8499C3.10044 13.9699 2.96045 14.2199 2.96045 14.4899C2.96045 14.7599 3.10044 15.0099 3.33044 15.1299L6.47044 16.8199C6.64044 16.9099 6.82044 16.9499 7.00044 16.9499C7.18044 16.9499 7.36044 16.9099 7.53044 16.8199L10.6704 15.1299C10.9004 15.0099 11.0404 14.7599 11.0404 14.4899C11.0404 14.2199 10.8904 13.9799 10.6704 13.8499Z" fill={fillColor} />
      <path d="M5.95023 17.4099L3.03023 15.9499C2.81023 15.8399 2.55023 15.8499 2.33023 15.9799C2.12023 16.1099 1.99023 16.3399 1.99023 16.5899V19.3499C1.99023 19.8299 2.25022 20.2599 2.68022 20.4699L5.60023 21.9299C5.70023 21.9799 5.81023 22.0099 5.92023 22.0099C6.05023 22.0099 6.18023 21.9699 6.30023 21.8999C6.51023 21.7699 6.64023 21.5399 6.64023 21.2899V18.5299C6.65023 18.0499 6.38023 17.6199 5.95023 17.4099Z" fill={fillColor} />
      <path d="M11.6601 15.9799C11.4501 15.8499 11.1901 15.8399 10.9601 15.9499L8.04008 17.4099C7.61008 17.6199 7.3501 18.0499 7.3501 18.5299V21.2899C7.3501 21.5399 7.48009 21.7699 7.69009 21.8999C7.81009 21.9699 7.9401 22.0099 8.0701 22.0099C8.1801 22.0099 8.29009 21.9799 8.39009 21.9299L11.3101 20.4699C11.7401 20.2599 12.0001 19.8299 12.0001 19.3499V16.5899C12.0001 16.3399 11.8701 16.1099 11.6601 15.9799Z" fill={fillColor} />
      <path d="M20.6704 3.83001L17.5304 2.14C17.2004 1.96 16.8004 1.96 16.4704 2.14L13.3304 3.83001C13.1004 3.95001 12.9604 4.19996 12.9604 4.46996C12.9604 4.73996 13.1004 4.98998 13.3304 5.10998L16.4704 6.79998C16.6404 6.88998 16.8204 6.92998 17.0004 6.92998C17.1804 6.92998 17.3604 6.88998 17.5304 6.79998L20.6704 5.10998C20.9004 4.98998 21.0404 4.73996 21.0404 4.46996C21.0404 4.18996 20.8904 3.95001 20.6704 3.83001Z" fill={fillColor} />
      <path d="M15.9502 7.37999L13.0302 5.91997C12.8102 5.80997 12.5502 5.82 12.3302 5.95C12.1202 6.08 11.9902 6.30999 11.9902 6.55999V9.32C11.9902 9.8 12.2502 10.23 12.6802 10.44L15.6002 11.9C15.7002 11.95 15.8102 11.98 15.9202 11.98C16.0502 11.98 16.1802 11.94 16.3002 11.87C16.5102 11.74 16.6402 11.51 16.6402 11.26V8.49999C16.6502 8.01999 16.3802 7.58999 15.9502 7.37999Z" fill={fillColor} />
      <path d="M21.6601 5.95C21.4501 5.82 21.1901 5.80997 20.9601 5.91997L18.0401 7.37999C17.6101 7.58999 17.3501 8.01999 17.3501 8.49999V11.26C17.3501 11.51 17.4801 11.74 17.6901 11.87C17.8101 11.94 17.9401 11.98 18.0701 11.98C18.1801 11.98 18.2901 11.95 18.3901 11.9L21.3101 10.44C21.7401 10.23 22.0001 9.8 22.0001 9.32V6.55999C22.0001 6.30999 21.8701 6.08 21.6601 5.95Z" fill={fillColor} />
    </svg>
  );
};

// Analytics Icon
export const AnalyticsIcon: React.FC<IconProps> = ({
  fillColor = "currentColor",
  strokeColor = "currentColor",
  width = 24,
  height = 24
}) => {
  return (
    <svg
      width={width}
      height={height}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path opacity="0.4" d="M21 2V14.1C21 16 20 17 18.1 17H5.89999C3.99999 17 3 16 3 14.1V2H21Z" fill={fillColor} />
      <path d="M22 2.75H2C1.59 2.75 1.25 2.41 1.25 2C1.25 1.59 1.59 1.25 2 1.25H22C22.41 1.25 22.75 1.59 22.75 2C22.75 2.41 22.41 2.75 22 2.75Z" fill={fillColor} />
      <path d="M16.6698 22.34C16.5398 22.6 16.2698 22.75 15.9998 22.75C15.8898 22.75 15.7698 22.72 15.6698 22.67L11.9998 20.84L8.32976 22.67C8.22976 22.72 8.10978 22.75 7.99978 22.75C7.72978 22.75 7.45976 22.6 7.32976 22.34C7.13976 21.96 7.28979 21.51 7.66979 21.33L11.2498 19.54V17H12.7498V19.54L16.3298 21.33C16.7098 21.51 16.8598 21.96 16.6698 22.34Z" fill={fillColor} />
      <path d="M7.49993 11.7499C7.28993 11.7499 7.06994 11.6599 6.91994 11.4799C6.64994 11.1599 6.69992 10.6899 7.01992 10.4199L10.1699 7.78993C10.4599 7.54993 10.8299 7.44994 11.1799 7.50994C11.5399 7.56994 11.8499 7.78991 12.0399 8.10991L13.0899 9.85991L16.0199 7.41994C16.3399 7.14994 16.8099 7.19992 17.0799 7.51992C17.3499 7.83992 17.2999 8.30991 16.9799 8.57991L13.8299 11.2099C13.5399 11.4499 13.1699 11.5499 12.8199 11.4899C12.4599 11.4299 12.1499 11.2099 11.9599 10.8899L10.9099 9.13994L7.97994 11.5799C7.83994 11.6899 7.66993 11.7499 7.49993 11.7499Z" fill={fillColor} />
    </svg>
  );
};

// Users Icon
export const UsersIcon: React.FC<IconProps> = ({
  fillColor = "currentColor",
  strokeColor = "currentColor",
  width = 24,
  height = 24
}) => {
  return (
    <svg
      width={width}
      height={height}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path opacity="0.4" d="M9 2C6.38 2 4.25 4.13 4.25 6.75C4.25 9.32 6.26 11.4 8.88 11.49C8.96 11.48 9.04 11.48 9.1 11.49C9.12 11.49 9.13 11.49 9.15 11.49C9.16 11.49 9.16 11.49 9.17 11.49C11.73 11.4 13.74 9.32 13.75 6.75C13.75 4.13 11.62 2 9 2Z" fill={fillColor} />
      <path d="M14.08 14.15C11.29 12.29 6.73996 12.29 3.92996 14.15C2.65996 15 1.95996 16.15 1.95996 17.38C1.95996 18.61 2.65996 19.75 3.91996 20.59C5.31996 21.53 7.15996 22 8.99996 22C10.84 22 12.68 21.53 14.08 20.59C15.34 19.74 16.04 18.6 16.04 17.36C16.03 16.13 15.34 14.99 14.08 14.15Z" fill={fillColor} />
      <path opacity="0.4" d="M19.9899 7.33998C20.1499 9.27998 18.7699 10.98 16.8599 11.21C16.8499 11.21 16.8499 11.21 16.8399 11.21H16.8099C16.7499 11.21 16.6899 11.21 16.6399 11.23C15.6699 11.28 14.7799 10.97 14.1099 10.4C15.1399 9.47998 15.7299 8.09998 15.6099 6.59998C15.5399 5.78998 15.2599 5.04998 14.8399 4.41998C15.2199 4.22998 15.6599 4.10998 16.1099 4.06998C18.0699 3.89998 19.8199 5.35998 19.9899 7.33998Z" fill={fillColor} />
      <path d="M21.9902 16.59C21.9102 17.56 21.2902 18.4 20.2502 18.97C19.2502 19.52 17.9902 19.78 16.7402 19.75C17.4602 19.1 17.8802 18.29 17.9602 17.43C18.0602 16.19 17.4702 15 16.2902 14.05C15.6202 13.52 14.8402 13.1 13.9902 12.79C16.2002 12.15 18.9802 12.58 20.6902 13.96C21.6102 14.7 22.0802 15.63 21.9902 16.59Z" fill={fillColor} />
    </svg>
  );
};

export default {
  DashboardIcon,
  ProductsIcon,
  ProductAddIcon,
  ResellerIcon,
  AnalyticsIcon,
  UsersIcon
};
</file>

<file path="src/frontend/src/components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/frontend/src/components/ui/textarea.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

/**
 * A styled textarea component that maintains consistent visual styling with other form elements.
 */
const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = "Textarea";

export { Textarea };
</file>

<file path="src/frontend/src/components/Accordion.tsx">
import * as React from "react";
import { ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";

interface AccordionItemProps {
  title: React.ReactNode;
  children: React.ReactNode;
  expanded?: boolean;
  onChange?: (expanded: boolean) => void;
  className?: string;
  titleClassName?: string;
  contentClassName?: string;
  icon?: React.ReactNode;
  disabled?: boolean;
}

/**
 * An individual accordion item with a clickable title and expandable content.
 */
const AccordionItem: React.FC<AccordionItemProps> = ({
  title,
  children,
  expanded: controlledExpanded,
  onChange,
  className,
  titleClassName,
  contentClassName,
  icon = <ChevronDown className="h-4 w-4 transition-transform duration-200" />,
  disabled = false,
}) => {
  const [internalExpanded, setInternalExpanded] = React.useState(false);
  
  // Handle controlled vs uncontrolled state
  const isExpanded = controlledExpanded !== undefined ? controlledExpanded : internalExpanded;
  
  const toggleExpanded = () => {
    if (disabled) return;
    
    const newState = !isExpanded;
    if (controlledExpanded === undefined) {
      setInternalExpanded(newState);
    }
    
    if (onChange) {
      onChange(newState);
    }
  };

  return (
    <div className={cn("border-b", className)}>
      <button
        type="button"
        onClick={toggleExpanded}
        className={cn(
          "flex w-full items-center justify-between py-4 text-left font-medium transition-all hover:text-primary",
          disabled && "cursor-not-allowed opacity-50 hover:text-current",
          titleClassName
        )}
        disabled={disabled}
        aria-expanded={isExpanded}
      >
        <span>{title}</span>
        <span
          className={cn(
            "ml-2 flex-shrink-0 transition-transform duration-200",
            isExpanded && "rotate-180"
          )}
        >
          {icon}
        </span>
      </button>
      <div
        className={cn(
          "overflow-hidden transition-all",
          isExpanded ? "max-h-screen" : "max-h-0",
          contentClassName
        )}
        aria-hidden={!isExpanded}
      >
        <div className="pb-4 pt-2">{children}</div>
      </div>
    </div>
  );
};

interface AccordionProps {
  children: React.ReactNode;
  className?: string;
  allowMultiple?: boolean;
}

interface AccordionComposition {
  Item: typeof AccordionItem;
}

/**
 * An accordion component that groups collapsible content sections.
 */
const Accordion: React.FC<AccordionProps> & AccordionComposition = ({
  children,
  className,
  allowMultiple = false,
}) => {
  return (
    <div className={cn("divide-y divide-border rounded-md border", className)}>
      {children}
    </div>
  );
};

Accordion.Item = AccordionItem;

export { Accordion, AccordionItem };
</file>

<file path="src/frontend/src/components/Avatar.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";

type AvatarSize = "xs" | "sm" | "md" | "lg" | "xl";

interface AvatarProps {
  src?: string;
  alt?: string;
  initials?: string;
  size?: AvatarSize;
  rounded?: "full" | "md" | "lg";
  className?: string;
  fallbackClassName?: string;
}

/**
 * An avatar component displaying a user image or initials fallback.
 */
const Avatar: React.FC<AvatarProps> = ({
  src,
  alt = "User avatar",
  initials,
  size = "md",
  rounded = "full",
  className,
  fallbackClassName,
}) => {
  const [imageError, setImageError] = React.useState(false);
  
  // Size classes
  const sizeClasses: Record<AvatarSize, string> = {
    xs: "h-6 w-6 text-xs",
    sm: "h-8 w-8 text-sm",
    md: "h-10 w-10 text-base",
    lg: "h-12 w-12 text-lg",
    xl: "h-16 w-16 text-xl",
  };
  
  // Rounded classes
  const roundedClasses: Record<string, string> = {
    full: "rounded-full",
    md: "rounded-md",
    lg: "rounded-lg",
  };
  
  // Generate initials if not provided
  const getInitials = () => {
    if (initials) return initials;
    if (!alt || alt === "User avatar") return "U";
    
    return alt
      .split(" ")
      .map(word => word[0])
      .join("")
      .substring(0, 2)
      .toUpperCase();
  };
  
  const handleImageError = () => {
    setImageError(true);
  };
  
  return (
    <div 
      className={cn(
        "inline-flex items-center justify-center overflow-hidden bg-muted",
        sizeClasses[size],
        roundedClasses[rounded],
        className
      )}
    >
      {src && !imageError ? (
        <img
          src={src}
          alt={alt}
          className={cn("h-full w-full object-cover")}
          onError={handleImageError}
        />
      ) : (
        <div
          className={cn(
            "flex h-full w-full items-center justify-center bg-primary/10 font-medium text-primary",
            fallbackClassName
          )}
          aria-label={alt}
        >
          {getInitials()}
        </div>
      )}
    </div>
  );
};

export { Avatar };
</file>

<file path="src/frontend/src/components/Badge.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";

type BadgeVariant = 
  | "default"
  | "primary"
  | "secondary"
  | "success"
  | "warning"
  | "danger"
  | "info"
  | "outline";

interface BadgeProps {
  children: React.ReactNode;
  variant?: BadgeVariant;
  size?: "sm" | "md" | "lg";
  rounded?: boolean;
  className?: string;
  icon?: React.ReactNode;
}

/**
 * A badge component for displaying statuses, counts, or labels.
 */
const Badge: React.FC<BadgeProps> = ({
  children,
  variant = "default",
  size = "md",
  rounded = false,
  className,
  icon,
}) => {
  // Variant styles
  const variantStyles: Record<BadgeVariant, string> = {
    default: "bg-muted text-muted-foreground",
    primary: "bg-primary text-primary-foreground",
    secondary: "bg-secondary text-secondary-foreground",
    success: "bg-green-100 text-green-800",
    warning: "bg-yellow-100 text-yellow-800",
    danger: "bg-red-100 text-red-800",
    info: "bg-blue-100 text-blue-800",
    outline: "border border-input bg-transparent text-foreground",
  };

  // Size styles
  const sizeStyles = {
    sm: "text-xs px-2 py-0.5",
    md: "text-xs px-2.5 py-0.5",
    lg: "text-sm px-3 py-1",
  };

  return (
    <span
      className={cn(
        "inline-flex items-center font-medium",
        rounded ? "rounded-full" : "rounded-md",
        variantStyles[variant],
        sizeStyles[size],
        className
      )}
    >
      {icon && <span className="mr-1">{icon}</span>}
      {children}
    </span>
  );
};

export { Badge };
</file>

<file path="src/frontend/src/components/Breadcrumb.tsx">
import * as React from "react";
import { Link } from "react-router-dom";
import { ChevronRight, Home } from "lucide-react";
import { cn } from "@/lib/utils";

interface BreadcrumbItem {
  label: string;
  href?: string;
  icon?: React.ReactNode;
}

interface BreadcrumbProps {
  items: BreadcrumbItem[];
  className?: string;
  separator?: React.ReactNode;
  homeIcon?: boolean;
}

/**
 * A breadcrumb navigation component displaying the current page location hierarchy.
 */
const Breadcrumb: React.FC<BreadcrumbProps> = ({
  items,
  className,
  separator = <ChevronRight className="h-4 w-4 mx-2 text-muted-foreground" />,
  homeIcon = true,
}) => {
  if (!items.length) return null;

  return (
    <nav className={cn("flex", className)} aria-label="Breadcrumb">
      <ol className="inline-flex items-center space-x-1 md:space-x-2">
        {items.map((item, index) => {
          const isLast = index === items.length - 1;
          const isFirst = index === 0;
          
          const content = (
            <div className="flex items-center">
              {isFirst && homeIcon ? (
                <Home className="h-4 w-4 mr-1" />
              ) : item.icon ? (
                <span className="mr-1">{item.icon}</span>
              ) : null}
              <span className={cn(
                isLast ? "font-medium" : "text-muted-foreground",
              )}>
                {item.label}
              </span>
            </div>
          );

          return (
            <li key={index} className="inline-flex items-center">
              {index > 0 && separator}
              {item.href && !isLast ? (
                <Link
                  to={item.href}
                  className="inline-flex items-center hover:text-primary hover:underline transition-colors"
                >
                  {content}
                </Link>
              ) : (
                <span className="inline-flex items-center">
                  {content}
                </span>
              )}
            </li>
          );
        })}
      </ol>
    </nav>
  );
};

export { Breadcrumb, type BreadcrumbItem };
</file>

<file path="src/frontend/src/components/Card.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";

interface CardProps {
  children: React.ReactNode;
  className?: string;
  hoverable?: boolean;
  bordered?: boolean;
  elevated?: boolean;
}

interface CardHeaderProps {
  children: React.ReactNode;
  className?: string;
}

interface CardBodyProps {
  children: React.ReactNode;
  className?: string;
}

interface CardFooterProps {
  children: React.ReactNode;
  className?: string;
}

/**
 * A versatile card component with header, body, and footer sections.
 */
const Card = React.forwardRef<HTMLDivElement, CardProps>(
  ({ children, className, hoverable, bordered = true, elevated }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          "rounded-lg bg-card text-card-foreground",
          bordered && "border",
          elevated && "shadow-sm",
          hoverable && "transition-all duration-200 hover:shadow-md",
          className
        )}
      >
        {children}
      </div>
    );
  }
);

Card.displayName = "Card";

/**
 * Header section for the Card component.
 */
const CardHeader = React.forwardRef<HTMLDivElement, CardHeaderProps>(
  ({ children, className }, ref) => {
    return (
      <div
        ref={ref}
        className={cn("flex flex-col space-y-1.5 p-6", className)}
      >
        {children}
      </div>
    );
  }
);

CardHeader.displayName = "CardHeader";

/**
 * Body section for the Card component.
 */
const CardBody = React.forwardRef<HTMLDivElement, CardBodyProps>(
  ({ children, className }, ref) => {
    return (
      <div ref={ref} className={cn("p-6 pt-0", className)}>
        {children}
      </div>
    );
  }
);

CardBody.displayName = "CardBody";

/**
 * Footer section for the Card component.
 */
const CardFooter = React.forwardRef<HTMLDivElement, CardFooterProps>(
  ({ children, className }, ref) => {
    return (
      <div
        ref={ref}
        className={cn("flex items-center p-6 pt-0", className)}
      >
        {children}
      </div>
    );
  }
);

CardFooter.displayName = "CardFooter";

export { Card, CardHeader, CardBody, CardFooter };
</file>

<file path="src/frontend/src/components/CardGrid.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";

type GridColumns = 1 | 2 | 3 | 4 | 5 | 6;

interface CardGridProps {
  children: React.ReactNode;
  className?: string;
  columns?: {
    default: GridColumns;
    sm?: GridColumns;
    md?: GridColumns;
    lg?: GridColumns;
    xl?: GridColumns;
  };
  gap?: "none" | "xs" | "sm" | "md" | "lg" | "xl";
}

/**
 * A responsive grid layout for displaying cards or content items.
 */
const CardGrid: React.FC<CardGridProps> = ({
  children,
  className,
  columns = { default: 1, md: 2, lg: 3 },
  gap = "md",
}) => {
  // Gap size classes
  const gapClasses = {
    none: "gap-0",
    xs: "gap-1",
    sm: "gap-2",
    md: "gap-4",
    lg: "gap-6",
    xl: "gap-8",
  };

  // Build responsive grid template columns
  const gridColClasses = [
    `grid-cols-${columns.default}`,
    columns.sm && `sm:grid-cols-${columns.sm}`,
    columns.md && `md:grid-cols-${columns.md}`,
    columns.lg && `lg:grid-cols-${columns.lg}`,
    columns.xl && `xl:grid-cols-${columns.xl}`,
  ]
    .filter(Boolean)
    .join(" ");

  return (
    <div
      className={cn(
        "grid",
        gridColClasses,
        gapClasses[gap],
        className
      )}
    >
      {children}
    </div>
  );
};

export { CardGrid };
</file>

<file path="src/frontend/src/components/Container.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";

type ContainerSize = "sm" | "md" | "lg" | "xl" | "full";

interface ContainerProps {
  children: React.ReactNode;
  size?: ContainerSize;
  className?: string;
  centered?: boolean;
  padded?: boolean;
}

/**
 * A responsive container component for layout.
 */
const Container: React.FC<ContainerProps> = ({
  children,
  size = "lg",
  className,
  centered = false,
  padded = true,
}) => {
  const sizeClasses: Record<ContainerSize, string> = {
    sm: "max-w-screen-sm",
    md: "max-w-screen-md",
    lg: "max-w-screen-lg",
    xl: "max-w-screen-xl",
    full: "max-w-full",
  };

  return (
    <div
      className={cn(
        "w-full",
        sizeClasses[size],
        padded && "px-4 md:px-6",
        centered && "mx-auto",
        className
      )}
    >
      {children}
    </div>
  );
};

export { Container };
</file>

<file path="src/frontend/src/components/DashboardLayout.tsx">
import React, { useState } from 'react';
import { NavLink, Outlet, useNavigate } from 'react-router-dom';
import { Menu } from './interfaces';
import { useAuthContext } from '@/contexts/useAuthContext';
import { Button } from './ui/button';
import { Menu as MenuIcon, X, ChevronRight } from 'lucide-react';
import { cn } from '@/lib/utils';

interface DashboardLayoutProps {
  menuItems: Menu[];
  title: string;
  logo?: React.ReactNode;
}

/**
 * Shared dashboard layout component for Brand Owner and Reseller dashboards
 * 
 * Provides a responsive sidebar with navigation links and a main content area
 * that renders the current route's component via Outlet.
 */
export const DashboardLayout: React.FC<DashboardLayoutProps> = ({
  menuItems,
  title,
  logo,
}) => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const { logout, profile } = useAuthContext();
  const navigate = useNavigate();

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  const handleLogout = async () => {
    await logout();
    navigate('/auth/login');
  };

  // Get user's initial for avatar
  const getUserInitial = () => {
    if (profile && profile.first_name && typeof profile.first_name === 'string' && profile.first_name.length > 0) {
      return profile.first_name[0].toUpperCase();
    }
    return 'U';
  };

  return (
    <div className="flex min-h-screen bg-gray-50">
      {/* Sidebar */}
      <aside
        className={cn(
          "fixed inset-y-0 left-0 z-50 flex w-64 flex-col bg-white border-r border-gray-200 shadow-lg transition-transform duration-300 ease-in-out transform lg:relative lg:translate-x-0",
          isSidebarOpen ? "translate-x-0" : "-translate-x-full"
        )}
      >
        {/* Sidebar Header */}
        <div className="flex h-16 items-center justify-between px-4 border-b">
          <div className="flex items-center gap-2">
            {logo}
            <h2 className="text-lg font-semibold">{title}</h2>
          </div>
          <Button
            variant="ghost"
            size="sm"
            className="lg:hidden"
            onClick={toggleSidebar}
          >
            <X className="h-5 w-5" />
          </Button>
        </div>

        {/* Sidebar Navigation */}
        <nav className="flex-1 overflow-y-auto py-4 px-2">
          <ul className="space-y-1">
            {menuItems.map((item, index) => (
              <li key={index}>
                <NavLink
                  to={item.path}
                  className={({ isActive }) => cn(
                    "flex items-center gap-3 rounded-md px-3 py-2.5 text-sm font-medium",
                    isActive
                      ? "bg-primary/10 text-primary"
                      : "text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                  )}
                  onClick={() => setIsSidebarOpen(false)}
                >
                  {typeof item.logo === 'string' ? (
                    <span>{item.logo}</span>
                  ) : (
                    item.logo
                  )}
                  <span>{item.name}</span>
                  <ChevronRight className="ml-auto h-4 w-4 opacity-50" />
                </NavLink>
              </li>
            ))}
          </ul>
        </nav>

        {/* Sidebar Footer - User profile & logout */}
        <div className="border-t border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <div className="h-8 w-8 rounded-full bg-primary/20 flex items-center justify-center text-primary font-medium">
                {getUserInitial()}
              </div>
              <div className="ml-3">
                <p className="text-sm font-medium">{profile?.first_name || 'User'}</p>
                <p className="text-xs text-gray-500">{profile?.email || ''}</p>
              </div>
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={handleLogout}
              className="text-gray-700"
            >
              Logout
            </Button>
          </div>
        </div>
      </aside>

      {/* Main Content */}
      <div className="flex flex-1 flex-col">
        {/* Top Bar */}
        <header className="sticky top-0 z-10 flex h-16 items-center bg-white border-b border-gray-200 px-4">
          <Button
            variant="ghost"
            size="sm"
            className="mr-4 lg:hidden"
            onClick={toggleSidebar}
          >
            <MenuIcon className="h-5 w-5" />
          </Button>
          <h1 className="text-xl font-semibold">{title}</h1>
          <div className="ml-auto flex items-center space-x-4">
            {/* Other header controls can go here */}
          </div>
        </header>

        {/* Main Content Area */}
        <main className="flex-1 overflow-y-auto p-4 md:p-6">
          <Outlet />
        </main>
      </div>

      {/* Mobile overlay - when sidebar is open */}
      {isSidebarOpen && (
        <div 
          className="fixed inset-0 z-40 bg-black/50 lg:hidden"
          onClick={() => setIsSidebarOpen(false)}
        />
      )}
    </div>
  );
};
</file>

<file path="src/frontend/src/components/DataGrid.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";
import {
  Table,
  TableBody,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  ChevronLeft,
  ChevronRight,
  ChevronsLeft,
  ChevronsRight,
  ArrowUpDown,
  SortAsc,
  SortDesc,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

export interface Column<T> {
  key: string;
  header: string;
  renderCell?: (item: T) => React.ReactNode;
  sortable?: boolean;
  hidden?: boolean;
}

export interface DataGridProps<T> {
  data: T[];
  columns: Column<T>[];
  keyExtractor: (item: T) => string;
  loading?: boolean;
  pagination?: boolean;
  pageSize?: number;
  pageSizeOptions?: number[];
  onPageChange?: (page: number) => void;
  onPageSizeChange?: (pageSize: number) => void;
  currentPage?: number;
  totalItems?: number;
  sortable?: boolean;
  onSortChange?: (column: string, direction: "asc" | "desc" | null) => void;
  filterable?: boolean;
  onFilterChange?: (column: string, value: string) => void;
  emptyStateMessage?: string;
  className?: string;
  striped?: boolean;
  bordered?: boolean;
}

/**
 * A data grid component for displaying and managing tabular data with sorting, filtering, and pagination.
 */
function DataGrid<T>({
  data,
  columns,
  keyExtractor,
  loading = false,
  pagination = false,
  pageSize = 10,
  pageSizeOptions = [5, 10, 25, 50],
  onPageChange,
  onPageSizeChange,
  currentPage = 1,
  totalItems = 0,
  sortable = false,
  onSortChange,
  filterable = false,
  onFilterChange,
  emptyStateMessage = "No data available",
  className,
  striped = false,
  bordered = false,
}: DataGridProps<T>) {
  const [sortColumn, setSortColumn] = React.useState<string | null>(null);
  const [sortDirection, setSortDirection] = React.useState<"asc" | "desc" | null>(null);
  const [filters, setFilters] = React.useState<Record<string, string>>({});
  const [localCurrentPage, setLocalCurrentPage] = React.useState(currentPage);
  const [localPageSize, setLocalPageSize] = React.useState(pageSize);

  // Handle controlled vs uncontrolled pagination
  React.useEffect(() => {
    setLocalCurrentPage(currentPage);
  }, [currentPage]);

  React.useEffect(() => {
    setLocalPageSize(pageSize);
  }, [pageSize]);

  // Calculate pagination details
  const totalPages = Math.max(1, Math.ceil(totalItems / localPageSize));
  
  // Handle sort change
  const handleSortChange = (column: string) => {
    if (!sortable || !onSortChange) return;
    
    let newDirection: "asc" | "desc" | null = "asc";
    
    if (sortColumn === column) {
      if (sortDirection === "asc") newDirection = "desc";
      else if (sortDirection === "desc") newDirection = null;
    }
    
    setSortColumn(newDirection ? column : null);
    setSortDirection(newDirection);
    onSortChange(column, newDirection);
  };
  
  // Handle filter change
  const handleFilterChange = (column: string, value: string) => {
    if (!filterable || !onFilterChange) return;
    
    const newFilters = { ...filters, [column]: value };
    setFilters(newFilters);
    onFilterChange(column, value);
  };
  
  // Handle page change
  const handlePageChange = (page: number) => {
    const newPage = Math.max(1, Math.min(page, totalPages));
    setLocalCurrentPage(newPage);
    if (onPageChange) onPageChange(newPage);
  };
  
  // Handle page size change
  const handlePageSizeChange = (size: string) => {
    const newSize = parseInt(size, 10);
    setLocalPageSize(newSize);
    if (onPageSizeChange) onPageSizeChange(newSize);
  };

  return (
    <div className={cn("w-full", className)}>
      {/* Filters */}
      {filterable && (
        <div className="mb-4 grid grid-cols-1 gap-2 md:grid-cols-3 lg:grid-cols-4">
          {columns
            .filter((column) => !column.hidden)
            .map((column) => (
              <div key={`filter-${column.key}`}>
                <Input 
                  placeholder={`Filter by ${column.header}`}
                  value={filters[column.key] || ""}
                  onChange={(e) => handleFilterChange(column.key, e.target.value)}
                  className="w-full"
                />
              </div>
            ))}
        </div>
      )}
      
      {/* Data Table */}
      <div className="rounded-md border">
        <Table bordered={bordered}>
          <TableHeader>
            <TableRow>
              {columns
                .filter((column) => !column.hidden)
                .map((column) => (
                  <TableHead 
                    key={column.key}
                    className={cn(
                      column.sortable && sortable && "cursor-pointer select-none",
                    )}
                    onClick={() => {
                      if (column.sortable && sortable) {
                        handleSortChange(column.key);
                      }
                    }}
                  >
                    <div className="flex items-center space-x-1">
                      <span>{column.header}</span>
                      {column.sortable && sortable && (
                        <span className="inline-flex">
                          {sortColumn === column.key ? (
                            sortDirection === "asc" ? (
                              <SortAsc className="h-4 w-4" />
                            ) : sortDirection === "desc" ? (
                              <SortDesc className="h-4 w-4" />
                            ) : (
                              <ArrowUpDown className="h-4 w-4 opacity-50" />
                            )
                          ) : (
                            <ArrowUpDown className="h-4 w-4 opacity-50" />
                          )}
                        </span>
                      )}
                    </div>
                  </TableHead>
                ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {loading ? (
              <TableRow>
                <TableCell
                  colSpan={columns.filter((col) => !col.hidden).length}
                  className="h-24 text-center"
                >
                  <div className="flex items-center justify-center">
                    <div className="h-6 w-6 animate-spin rounded-full border-2 border-primary border-t-transparent"></div>
                    <span className="ml-2">Loading...</span>
                  </div>
                </TableCell>
              </TableRow>
            ) : data.length === 0 ? (
              <TableRow>
                <TableCell
                  colSpan={columns.filter((col) => !col.hidden).length}
                  className="h-24 text-center"
                >
                  {emptyStateMessage}
                </TableCell>
              </TableRow>
            ) : (
              data.map((item, rowIndex) => (
                <TableRow 
                  key={keyExtractor(item)}
                  className={cn(
                    striped && rowIndex % 2 === 1 && "bg-muted/50"
                  )}
                >
                  {columns
                    .filter((column) => !column.hidden)
                    .map((column) => (
                      <TableCell key={`${keyExtractor(item)}-${column.key}`}>
                        {column.renderCell
                          ? column.renderCell(item)
                          : (item as any)[column.key] !== undefined
                          ? String((item as any)[column.key])
                          : ""}
                      </TableCell>
                    ))}
                </TableRow>
              ))
            )}
          </TableBody>
          {pagination && (
            <TableFooter>
              <TableRow>
                <TableCell colSpan={columns.filter((col) => !col.hidden).length}>
                  <div className="flex items-center justify-between px-2">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-muted-foreground">
                        Rows per page:
                      </span>
                      <Select
                        value={String(localPageSize)}
                        onValueChange={handlePageSizeChange}
                      >
                        <SelectTrigger className="h-8 w-[70px]">
                          <SelectValue placeholder={String(localPageSize)} />
                        </SelectTrigger>
                        <SelectContent>
                          {pageSizeOptions.map((size) => (
                            <SelectItem key={size} value={String(size)}>
                              {size}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <span className="text-sm text-muted-foreground">
                        {(localCurrentPage - 1) * localPageSize + 1}-
                        {Math.min(localCurrentPage * localPageSize, totalItems)} of {totalItems}
                      </span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Button
                        variant="outline"
                        size="icon"
                        className="h-8 w-8"
                        onClick={() => handlePageChange(1)}
                        disabled={localCurrentPage === 1}
                      >
                        <ChevronsLeft className="h-4 w-4" />
                        <span className="sr-only">First page</span>
                      </Button>
                      <Button
                        variant="outline"
                        size="icon"
                        className="h-8 w-8"
                        onClick={() => handlePageChange(localCurrentPage - 1)}
                        disabled={localCurrentPage === 1}
                      >
                        <ChevronLeft className="h-4 w-4" />
                        <span className="sr-only">Previous page</span>
                      </Button>
                      <span className="text-sm">
                        Page {localCurrentPage} of {totalPages}
                      </span>
                      <Button
                        variant="outline"
                        size="icon"
                        className="h-8 w-8"
                        onClick={() => handlePageChange(localCurrentPage + 1)}
                        disabled={localCurrentPage >= totalPages}
                      >
                        <ChevronRight className="h-4 w-4" />
                        <span className="sr-only">Next page</span>
                      </Button>
                      <Button
                        variant="outline"
                        size="icon"
                        className="h-8 w-8"
                        onClick={() => handlePageChange(totalPages)}
                        disabled={localCurrentPage >= totalPages}
                      >
                        <ChevronsRight className="h-4 w-4" />
                        <span className="sr-only">Last page</span>
                      </Button>
                    </div>
                  </div>
                </TableCell>
              </TableRow>
            </TableFooter>
          )}
        </Table>
      </div>
    </div>
  );
}

export { DataGrid };
</file>

<file path="src/frontend/src/components/index.ts">
// UI Components
export { Accordion, AccordionItem } from "./Accordion";
export { Avatar } from "./Avatar";
export { Badge } from "./Badge";
export { Breadcrumb, type BreadcrumbItem } from "./Breadcrumb";
export { Card, CardHeader, CardBody, CardFooter } from "./Card";
export { CardGrid } from "./CardGrid";
export { Container } from "./Container";
export { DataGrid, type Column } from "./DataGrid";
export { LoadingSpinner } from "./LoadingSpinner";
export { default as Modal } from "./Modal";
export { Pagination } from "./Pagination";
export { default as SelectField } from "./SelectField";
export { TextareaField } from "./TextareaField";
export { Tabs, type TabItem } from "./Tabs";
export { Toast } from "./Toast";
export { Tooltip } from "./Tooltip";
export { default as ConfirmationModal } from "./ConfirmationModal";
</file>

<file path="src/frontend/src/components/LoadingSpinner.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";

type SpinnerSize = "xs" | "sm" | "md" | "lg" | "xl";

interface LoadingSpinnerProps {
  size?: SpinnerSize;
  className?: string;
  color?: string;
}

/**
 * A customizable loading spinner with different size variants.
 */
const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ 
  size = "md", 
  className,
  color = "primary"
}) => {
  // Size variants in pixels
  const sizeClasses: Record<SpinnerSize, string> = {
    xs: "h-4 w-4 border-[2px]",
    sm: "h-6 w-6 border-[2px]",
    md: "h-8 w-8 border-[3px]",
    lg: "h-12 w-12 border-[3px]",
    xl: "h-16 w-16 border-[4px]",
  };

  // Color variants
  const colorClasses: Record<string, string> = {
    primary: "border-primary",
    secondary: "border-secondary",
    muted: "border-muted",
    white: "border-white",
    gray: "border-gray-300",
  };

  return (
    <div
      className={cn(
        "inline-block animate-spin rounded-full border-solid border-current border-r-transparent motion-reduce:animate-[spin_1.5s_linear_infinite]",
        sizeClasses[size],
        colorClasses[color] || `border-${color}`,
        className
      )}
      role="status"
      aria-label="Loading"
    >
      <span className="sr-only">Loading...</span>
    </div>
  );
};

export { LoadingSpinner };
</file>

<file path="src/frontend/src/components/Pagination.tsx">
import * as React from "react";
import {
  ChevronLeft,
  ChevronRight,
  ChevronsLeft,
  ChevronsRight,
  MoreHorizontal,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
  siblingCount?: number;
  className?: string;
  showFirstLast?: boolean;
  size?: "sm" | "md" | "lg";
  variant?: "outline" | "ghost";
}

/**
 * A pagination component for navigating through multi-page content.
 */
const Pagination: React.FC<PaginationProps> = ({
  currentPage,
  totalPages,
  onPageChange,
  siblingCount = 1,
  className,
  showFirstLast = true,
  size = "md",
  variant = "outline",
}) => {
  // Prevent out-of-bounds pages
  const safePage = Math.max(1, Math.min(currentPage, totalPages));

  // Define sizes for different variants
  const buttonSizes = {
    sm: "h-7 w-7 text-xs",
    md: "h-8 w-8 text-sm",
    lg: "h-9 w-9",
  };
  
  // Generate page numbers to show
  const generatePagination = (): (number | "dots")[] => {
    if (totalPages <= siblingCount * 2 + 3) {
      return Array.from({ length: totalPages }, (_, i) => i + 1);
    }
    
    // Always include first and last page
    const startPages = Array.from(
      { length: siblingCount + 1 },
      (_, i) => i + 1
    );
    const endPages = Array.from(
      { length: siblingCount + 1 },
      (_, i) => totalPages - siblingCount + i
    );
    
    // Current page and siblings
    const middlePages = Array.from(
      { length: siblingCount * 2 + 1 },
      (_, i) => currentPage - siblingCount + i
    ).filter(page => page > 0 && page <= totalPages);
    
    const result: (number | "dots")[] = [];
    
    // Add first pages
    startPages.forEach(page => {
      if (!result.includes(page) && page <= totalPages) {
        result.push(page);
      }
    });
    
    // Add dots before middle pages if needed
    const lastResultItem = result[result.length - 1];
    if (typeof lastResultItem === 'number' && middlePages[0] > lastResultItem + 1) {
      result.push("dots");
    }
    
    // Add middle pages
    middlePages.forEach(page => {
      const lastItem = result[result.length - 1];
      if (!result.includes(page) && (lastItem === "dots" || typeof lastItem === 'number' && page > lastItem)) {
        result.push(page);
      }
    });
    
    // Add dots after middle pages if needed
    const lastResult = result[result.length - 1];
    const lastMiddlePage = middlePages[middlePages.length - 1];
    
    if (endPages[0] > (lastResult === "dots" 
      ? (typeof lastMiddlePage === 'number' ? lastMiddlePage + 1 : 0)
      : (typeof lastResult === 'number' ? lastResult + 1 : 0))
    ) {
      result.push("dots");
    }
    
    // Add end pages
    endPages.forEach(page => {
      const lastItem = result[result.length - 1];
      if (!result.includes(page) && (
        lastItem === "dots" || 
        (typeof lastItem === 'number' && page > lastItem)
      )) {
        result.push(page);
      }
    });
    
    return result;
  };
  
  const pageItems = generatePagination();
  
  return (
    <nav
      role="navigation"
      aria-label="Pagination"
      className={cn("flex items-center justify-center", className)}
    >
      <ul className="flex items-center gap-1">
        {showFirstLast && (
          <li>
            <Button
              variant={variant}
              size="icon"
              className={buttonSizes[size]}
              onClick={() => onPageChange(1)}
              disabled={safePage === 1}
              aria-label="Go to first page"
            >
              <ChevronsLeft className="h-4 w-4" />
            </Button>
          </li>
        )}
        
        <li>
          <Button
            variant={variant}
            size="icon"
            className={buttonSizes[size]}
            onClick={() => onPageChange(safePage - 1)}
            disabled={safePage === 1}
            aria-label="Go to previous page"
          >
            <ChevronLeft className="h-4 w-4" />
          </Button>
        </li>
        
        {pageItems.map((page, i) => (
          <li key={i}>
            {page === "dots" ? (
              <span className="flex h-8 w-8 items-center justify-center">
                <MoreHorizontal className="h-4 w-4" />
              </span>
            ) : (
              <Button
                variant={page === safePage ? "default" : variant}
                size="icon"
                className={buttonSizes[size]}
                onClick={() => onPageChange(page)}
                aria-current={page === safePage ? "page" : undefined}
                aria-label={`Page ${page}`}
              >
                {page}
              </Button>
            )}
          </li>
        ))}
        
        <li>
          <Button
            variant={variant}
            size="icon"
            className={buttonSizes[size]}
            onClick={() => onPageChange(safePage + 1)}
            disabled={safePage === totalPages}
            aria-label="Go to next page"
          >
            <ChevronRight className="h-4 w-4" />
          </Button>
        </li>
        
        {showFirstLast && (
          <li>
            <Button
              variant={variant}
              size="icon"
              className={buttonSizes[size]}
              onClick={() => onPageChange(totalPages)}
              disabled={safePage === totalPages}
              aria-label="Go to last page"
            >
              <ChevronsRight className="h-4 w-4" />
            </Button>
          </li>
        )}
      </ul>
    </nav>
  );
};

export { Pagination };
</file>

<file path="src/frontend/src/components/SelectField.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface SelectOption {
  value: string;
  label: string;
}

interface SelectGroupOption {
  label: string;
  options: SelectOption[];
}

interface SelectFieldProps {
  id: string;
  label: string;
  placeholder?: string;
  options: SelectOption[] | SelectGroupOption[];
  value?: string;
  onChange?: (value: string) => void;
  error?: string | null | boolean;
  containerClassName?: string;
  required?: boolean;
  disabled?: boolean;
}

/**
 * A form select field with label and error handling.
 */
const SelectField: React.FC<SelectFieldProps> = ({
  id,
  label,
  placeholder = "Select an option",
  options,
  value,
  onChange,
  error,
  containerClassName,
  required = false,
  disabled = false,
}) => {
  const hasError = Boolean(error);
  const errorMessage = typeof error === "string" ? error : null;
  
  // Check if options are grouped
  const isGrouped = options.length > 0 && "options" in options[0];

  return (
    <div className={cn("grid w-full items-center gap-1.5", containerClassName)}>
      <Label htmlFor={id} className={cn(hasError && "text-destructive")}>
        {label}
        {required && <span className="text-destructive ml-1">*</span>}
      </Label>
      
      <Select
        value={value}
        onValueChange={onChange}
        disabled={disabled}
      >
        <SelectTrigger 
          id={id}
          className={cn(
            hasError && "border-destructive focus-visible:ring-destructive"
          )}
        >
          <SelectValue placeholder={placeholder} />
        </SelectTrigger>
        
        <SelectContent>
          {isGrouped ? (
            // Render grouped options
            (options as SelectGroupOption[]).map((group, groupIndex) => (
              <SelectGroup key={groupIndex}>
                <SelectLabel>{group.label}</SelectLabel>
                {group.options.map((option, optionIndex) => (
                  <SelectItem
                    key={`${groupIndex}-${optionIndex}`}
                    value={option.value}
                  >
                    {option.label}
                  </SelectItem>
                ))}
              </SelectGroup>
            ))
          ) : (
            // Render flat options
            (options as SelectOption[]).map((option, index) => (
              <SelectItem key={index} value={option.value}>
                {option.label}
              </SelectItem>
            ))
          )}
        </SelectContent>
      </Select>
      
      {errorMessage && (
        <p className="text-sm font-medium text-destructive">
          {errorMessage}
        </p>
      )}
    </div>
  );
};

export default SelectField;
</file>

<file path="src/frontend/src/components/SidebarToggle.tsx">
import { MenuIcon, ChevronLeftIcon } from "lucide-react";
import { Button } from "@/components/ui/button";

/**
 * Props for the SidebarToggle component
 */
type SidebarToggleProps = {
  /** Whether the sidebar is currently collapsed */
  collapsed: boolean;
  /** Function to toggle the sidebar collapsed state */
  onClick: () => void;
  /** Optional classname for additional styling */
  className?: string;
};

/**
 * A button component that toggles the sidebar between expanded and collapsed states
 * 
 * @param collapsed Whether the sidebar is currently collapsed
 * @param onClick Function to call when the toggle is clicked
 * @param className Optional additional CSS classes
 */
const SidebarToggle: React.FC<SidebarToggleProps> = ({
  collapsed,
  onClick,
  className = ""
}) => {
  return (
    <Button
      onClick={onClick}
      variant="ghost"
      size="icon"
      className={`rounded-full ${className}`}
      aria-label={collapsed ? "Expand sidebar" : "Collapse sidebar"}
    >
      {collapsed ? (
        <MenuIcon className="h-5 w-5" />
      ) : (
        <ChevronLeftIcon className="h-5 w-5" />
      )}
    </Button>
  );
};

export default SidebarToggle;
</file>

<file path="src/frontend/src/components/Tabs.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";

interface TabItem {
  id: string;
  label: React.ReactNode;
  content: React.ReactNode;
  disabled?: boolean;
}

interface TabsProps {
  items: TabItem[];
  defaultActiveId?: string;
  onChange?: (id: string) => void;
  className?: string;
  tabClassName?: string;
  activeTabClassName?: string;
  contentClassName?: string;
  variant?: "default" | "underline" | "pills";
}

/**
 * A tabs component for organizing and navigating between related content sections.
 */
const Tabs: React.FC<TabsProps> = ({
  items,
  defaultActiveId,
  onChange,
  className,
  tabClassName,
  activeTabClassName,
  contentClassName,
  variant = "default",
}) => {
  const [activeId, setActiveId] = React.useState(defaultActiveId || items[0]?.id);

  const handleTabClick = (id: string) => {
    setActiveId(id);
    if (onChange) onChange(id);
  };

  // Style variants
  const variantStyles = {
    default: {
      tabContainer: "border-b border-border",
      tab: "px-4 py-2 border-b-2 border-transparent",
      activeTab: "border-primary text-primary font-medium",
    },
    underline: {
      tabContainer: "border-b border-border",
      tab: "px-4 py-2 border-b-2 border-transparent",
      activeTab: "border-primary text-primary font-medium",
    },
    pills: {
      tabContainer: "space-x-1",
      tab: "px-4 py-2 rounded-md",
      activeTab: "bg-primary/10 text-primary font-medium",
    },
  };

  const selectedVariant = variantStyles[variant];

  // Get the active tab content
  const activeTab = items.find((item) => item.id === activeId);

  return (
    <div className={cn("w-full", className)}>
      <div className={cn("flex mb-4", selectedVariant.tabContainer)}>
        {items.map((item) => (
          <button
            key={item.id}
            className={cn(
              "transition-colors text-sm focus:outline-none focus:ring-2 focus:ring-primary/30 focus:ring-offset-2",
              selectedVariant.tab,
              item.disabled && "opacity-50 cursor-not-allowed",
              activeId === item.id ? selectedVariant.activeTab : "text-muted-foreground hover:text-foreground",
              tabClassName,
              activeId === item.id && activeTabClassName
            )}
            onClick={() => !item.disabled && handleTabClick(item.id)}
            disabled={item.disabled}
            aria-selected={activeId === item.id}
            role="tab"
          >
            {item.label}
          </button>
        ))}
      </div>
      <div className={cn("mt-2", contentClassName)}>
        {activeTab?.content}
      </div>
    </div>
  );
};

export { Tabs, type TabItem };
</file>

<file path="src/frontend/src/components/TextareaField.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";

interface TextareaFieldProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  id: string;
  label: string;
  error?: string | null | boolean;
  containerClassName?: string;
  required?: boolean;
}

/**
 * A form textarea field with label and error handling.
 */
const TextareaField = React.forwardRef<HTMLTextAreaElement, TextareaFieldProps>(
  ({ id, label, error, className, containerClassName, required = false, ...props }, ref) => {
    const hasError = Boolean(error);
    const errorMessage = typeof error === "string" ? error : null;

    return (
      <div className={cn("grid w-full items-center gap-1.5", containerClassName)}>
        <Label htmlFor={id} className={cn(hasError && "text-destructive")}>
          {label}
          {required && <span className="text-destructive ml-1">*</span>}
        </Label>
        <Textarea
          id={id}
          ref={ref}
          className={cn(hasError && "border-destructive focus-visible:ring-destructive", className)}
          aria-invalid={hasError}
          {...props}
        />
        {errorMessage && (
          <p className="text-sm font-medium text-destructive">
            {errorMessage}
          </p>
        )}
      </div>
    );
  }
);
TextareaField.displayName = "TextareaField";

export { TextareaField };
</file>

<file path="src/frontend/src/components/Toast.tsx">
import * as React from "react";
import { X } from "lucide-react";
import { cn } from "@/lib/utils";

type ToastVariant = "default" | "success" | "warning" | "error" | "info";

interface ToastProps {
  title: string;
  message?: string;
  variant?: ToastVariant;
  onClose?: () => void;
  duration?: number; // in milliseconds
  className?: string;
}

/**
 * A toast notification component for displaying feedback messages.
 */
const Toast: React.FC<ToastProps> = ({
  title,
  message,
  variant = "default",
  onClose,
  duration = 5000, // Default 5 seconds
  className,
}) => {
  const [visible, setVisible] = React.useState(true);

  React.useEffect(() => {
    if (duration > 0) {
      const timer = setTimeout(() => {
        setVisible(false);
        if (onClose) onClose();
      }, duration);
      return () => clearTimeout(timer);
    }
  }, [duration, onClose]);

  const handleClose = () => {
    setVisible(false);
    if (onClose) onClose();
  };

  if (!visible) return null;

  // Variant styles
  const variantStyles: Record<ToastVariant, string> = {
    default: "bg-background border-border",
    success: "bg-green-50 border-green-200 text-green-900",
    warning: "bg-amber-50 border-amber-200 text-amber-900",
    error: "bg-red-50 border-red-200 text-red-900",
    info: "bg-blue-50 border-blue-200 text-blue-900",
  };

  const iconVariants: Record<ToastVariant, React.ReactNode> = {
    default: null,
    success: (
      <div className="flex h-6 w-6 items-center justify-center rounded-full bg-green-100">
        <svg className="h-4 w-4 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
        </svg>
      </div>
    ),
    warning: (
      <div className="flex h-6 w-6 items-center justify-center rounded-full bg-amber-100">
        <svg className="h-4 w-4 text-amber-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
      </div>
    ),
    error: (
      <div className="flex h-6 w-6 items-center justify-center rounded-full bg-red-100">
        <svg className="h-4 w-4 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
        </svg>
      </div>
    ),
    info: (
      <div className="flex h-6 w-6 items-center justify-center rounded-full bg-blue-100">
        <svg className="h-4 w-4 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>
    ),
  };

  return (
    <div
      className={cn(
        "pointer-events-auto w-full max-w-sm rounded-lg border shadow-lg",
        "animate-in slide-in-from-top-full fade-in duration-300",
        variantStyles[variant],
        className
      )}
      role="alert"
    >
      <div className="flex p-4">
        {iconVariants[variant] && (
          <div className="flex-shrink-0 mr-3">{iconVariants[variant]}</div>
        )}
        <div className="flex-1">
          <h3 className="font-medium">{title}</h3>
          {message && <p className="mt-1 text-sm opacity-90">{message}</p>}
        </div>
        <button
          type="button"
          className="ml-4 inline-flex flex-shrink-0 rounded-md p-1.5 focus:outline-none focus:ring-2 focus:ring-offset-2"
          onClick={handleClose}
        >
          <span className="sr-only">Close</span>
          <X className="h-4 w-4" />
        </button>
      </div>
    </div>
  );
};

export { Toast };
</file>

<file path="src/frontend/src/components/Tooltip.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";

type TooltipPosition = "top" | "right" | "bottom" | "left";

interface TooltipProps {
  children: React.ReactNode;
  content: React.ReactNode;
  position?: TooltipPosition;
  delay?: number;
  className?: string;
  contentClassName?: string;
  disabled?: boolean;
}

/**
 * A tooltip component that displays contextual information on hover.
 */
const Tooltip: React.FC<TooltipProps> = ({
  children,
  content,
  position = "top",
  delay = 300,
  className,
  contentClassName,
  disabled = false,
}) => {
  const [isVisible, setIsVisible] = React.useState(false);
  const [delayHandler, setDelayHandler] = React.useState<NodeJS.Timeout | null>(null);
  const tooltipRef = React.useRef<HTMLDivElement>(null);
  
  // Position classes
  const positionClasses: Record<TooltipPosition, string> = {
    top: "bottom-full left-1/2 transform -translate-x-1/2 -translate-y-2 mb-2",
    right: "left-full top-1/2 transform -translate-y-1/2 translate-x-2 ml-2",
    bottom: "top-full left-1/2 transform -translate-x-1/2 translate-y-2 mt-2",
    left: "right-full top-1/2 transform -translate-y-1/2 -translate-x-2 mr-2",
  };
  
  // Arrow position classes
  const arrowClasses: Record<TooltipPosition, string> = {
    top: "bottom-[-6px] left-1/2 transform -translate-x-1/2 border-t-gray-800 border-l-transparent border-r-transparent border-b-transparent",
    right: "left-[-6px] top-1/2 transform -translate-y-1/2 border-r-gray-800 border-t-transparent border-b-transparent border-l-transparent",
    bottom: "top-[-6px] left-1/2 transform -translate-x-1/2 border-b-gray-800 border-l-transparent border-r-transparent border-t-transparent",
    left: "right-[-6px] top-1/2 transform -translate-y-1/2 border-l-gray-800 border-t-transparent border-b-transparent border-r-transparent",
  };
  
  const showTooltip = () => {
    if (disabled) return;
    
    if (delayHandler) clearTimeout(delayHandler);
    const handler = setTimeout(() => {
      setIsVisible(true);
    }, delay);
    setDelayHandler(handler);
  };
  
  const hideTooltip = () => {
    if (delayHandler) clearTimeout(delayHandler);
    setDelayHandler(null);
    setIsVisible(false);
  };
  
  React.useEffect(() => {
    return () => {
      if (delayHandler) clearTimeout(delayHandler);
    };
  }, [delayHandler]);
  
  return (
    <div className={cn("relative inline-block", className)} onMouseEnter={showTooltip} onMouseLeave={hideTooltip}>
      {children}
      
      {isVisible && (
        <div
          ref={tooltipRef}
          className={cn(
            "absolute z-50 px-2 py-1 text-xs text-white bg-gray-800 rounded shadow-md whitespace-nowrap",
            positionClasses[position],
            contentClassName
          )}
          role="tooltip"
        >
          {content}
          <div
            className={cn(
              "absolute w-0 h-0 border-4",
              arrowClasses[position]
            )}
          />
        </div>
      )}
    </div>
  );
};

export { Tooltip };
</file>

<file path="src/frontend/src/layouts/BrandOwnerLayout.tsx">
/**
 * @file Brand Owner Layout Component
 * @fileoverview Provides a consistent layout for all brand owner pages with a sidebar navigation and content area
 * 
 * Functions:
 * - BrandOwnerLayout: Main layout component for brand owner pages
 * 
 * Constants:
 * - brandOwnerMenuItems: Navigation items for the sidebar
 * 
 * Flow:
 * 1. Render sidebar with navigation options
 * 2. Render main content area that displays children components
 * 3. Handle sidebar collapse/expand functionality
 * 
 * Error Handling:
 * - None specific to layout
 * 
 * @module layouts/BrandOwnerLayout
 * @requires components/Sidebar - For navigation sidebar
 * @exports {FC} BrandOwnerLayout - Main layout component
 */

import React, { useState, useEffect } from 'react';
import { Outlet, useNavigate, useLocation } from 'react-router-dom';
import Sidebar from '../components/Sidebar';
import SidebarToggle from '../components/SidebarToggle';
import { useAuthContext } from '../contexts/useAuthContext';
import { 
  ProductsIcon, 
  ProductAddIcon,
  AnalyticsIcon,
  ResellerIcon,
  UsersIcon 
} from '../components/icons';
import defaultAvatar from '../assets/default-avatar.jpg';

// Define IconProps type matching what's in the icons file
type IconProps = {
  fillColor: string;
};

/**
 * Props for the BrandOwnerLayout component
 */
type BrandOwnerLayoutProps = {
  children?: React.ReactNode;
};

/**
 * Main layout component for brand owner dashboard
 * Provides sidebar navigation and content area
 */
const BrandOwnerLayout: React.FC<BrandOwnerLayoutProps> = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { profile, isLoading } = useAuthContext(); 
  const [collapsed, setCollapsed] = useState(false);
  
  const handleMenuToggle = () => {
    setCollapsed(!collapsed);
  };

  // Get principal ID from profile for display, handle loading state
  const principalId = isLoading ? 'Loading...' : (profile?.id?.toText() || 'Anonymous');

  const handleNavigate = (path: string) => {
    navigate(path);
  };

  const menuItems = [
    {
      label: 'Products',
      icon: ProductsIcon as React.ComponentType<IconProps>,
      active: location.pathname === '/brand-owners/products',
      onClickEvent: () => handleNavigate('/brand-owners/products'),
    },
    {
      label: 'Add Product',
      icon: ProductAddIcon as React.ComponentType<IconProps>,
      active: location.pathname === '/brand-owners/add-product',
      onClickEvent: () => handleNavigate('/brand-owners/add-product'),
    },
    {
      label: 'Reseller Management',
      icon: ResellerIcon as React.ComponentType<IconProps>,
      active: location.pathname === '/brand-owners/resellers',
      onClickEvent: () => handleNavigate('/brand-owners/resellers'),
    },
    {
      label: 'User Management',
      icon: UsersIcon as React.ComponentType<IconProps>,
      active: location.pathname === '/brand-owners/users',
      onClickEvent: () => handleNavigate('/brand-owners/users'),
    },
    {
      label: 'Analytic',
      icon: AnalyticsIcon as React.ComponentType<IconProps>,
      active: location.pathname === '/brand-owners/analytics',
      onClickEvent: () => handleNavigate('/brand-owners/analytics'),
    },
  ];

  // Get metadata from the profile to check for avatar
  const getAvatarFromMeta = () => {
    if (isLoading || !profile?.detail_meta) return '';
    
    const avatarMeta = profile.detail_meta.find(item => item.key === 'avatar');
    return avatarMeta ? avatarMeta.value : defaultAvatar;
  };

  const userAvatar = getAvatarFromMeta() || defaultAvatar;

  // Restore sidebar state from localStorage on component mount
  useEffect(() => {
    const savedState = localStorage.getItem('sidebarCollapsed');
    if (savedState !== null) {
      setCollapsed(savedState === 'true');
    }
  }, []);

  // Save sidebar state to localStorage when it changes
  useEffect(() => {
    localStorage.setItem('sidebarCollapsed', String(collapsed));
  }, [collapsed]);

  return (
    <div className="flex h-screen bg-gray-50">
      <Sidebar 
        menuItems={menuItems} 
        userAvatar={userAvatar} 
        principalId={principalId}
        collapsed={collapsed}
      />
      <div className="flex flex-col flex-1 overflow-hidden">
        <header className="bg-white shadow-sm z-10">
          <div className="px-4 py-2 flex items-center">
            <SidebarToggle collapsed={collapsed} onClick={handleMenuToggle} />
            <div className="ml-4">
              <h1 className="text-xl font-semibold">
                {menuItems.find(item => item.active)?.label || 'Dashboard'}
              </h1>
            </div>
          </div>
        </header>
        <main className="flex-1 overflow-y-auto bg-gray-50">
          <Outlet />
        </main>
      </div>
    </div>
  );
};

export default BrandOwnerLayout;
</file>

<file path="src/frontend/src/pages/placeholder.tsx">
/**
 * @file Placeholder Page Component
 * @fileoverview Generic placeholder component for pages that are not yet implemented
 * 
 * Functions:
 * - PlaceholderPage: Renders a placeholder UI for unimplemented pages
 * 
 * Constants:
 * - None
 * 
 * Flow:
 * 1. Render a simple card with the provided title
 * 2. Show a message indicating the page is in development
 * 
 * Error Handling:
 * - None
 * 
 * @module pages/placeholder
 * @requires components/ui/card - For card UI component
 * @exports {FC} PlaceholderPage - Placeholder page component
 */

import React from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Construction } from "lucide-react";

/**
 * Props for the PlaceholderPage component
 */
type PlaceholderPageProps = {
  /** The title to display in the placeholder */
  title: string;
  /** Optional description to display */
  description?: string;
};

/**
 * A generic placeholder component for pages that are not yet implemented
 * 
 * @param title - The title to display in the placeholder
 * @param description - Optional description to display
 * @returns Placeholder UI element
 */
const PlaceholderPage: React.FC<PlaceholderPageProps> = ({ 
  title,
  description = "This feature is currently in development and will be available soon."
}) => {
  return (
    <div className="container py-10">
      <Card className="w-full max-w-3xl mx-auto">
        <CardHeader className="text-center">
          <div className="w-full flex justify-center mb-4">
            <Construction size={48} className="text-amber-500" />
          </div>
          <CardTitle className="text-2xl">{title}</CardTitle>
          <CardDescription>{description}</CardDescription>
        </CardHeader>
        <CardContent className="text-center">
          <p className="mb-6 text-gray-600">
            Our team is working hard to bring you this feature. 
            Please check back later for updates.
          </p>
          <Button variant="outline" onClick={() => window.history.back()}>
            Go Back
          </Button>
        </CardContent>
      </Card>
    </div>
  );
};

export default PlaceholderPage;
</file>

<file path="src/frontend/src/providers/index.ts">
export * from './QueryProvider';
</file>

<file path="src/frontend/src/providers/QueryProvider.tsx">
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactNode } from 'react';

// Create a client
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 1,
      refetchOnWindowFocus: false,
    },
  },
});

interface QueryProviderProps {
  children: ReactNode;
}

export function QueryProvider({ children }: QueryProviderProps) {
  return (
    <QueryClientProvider client={queryClient}>
      {children}
    </QueryClientProvider>
  );
}
</file>

<file path="scripts/task-complexity-report.json">
{
  "meta": {
    "generatedAt": "2025-04-30T05:13:11.944Z",
    "tasksAnalyzed": 10,
    "thresholdScore": 5,
    "projectName": "Your Project Name",
    "usedResearch": false
  },
  "complexityAnalysis": [
    {
      "taskId": 1,
      "taskTitle": "Implement Landing Page",
      "complexityScore": 6,
      "recommendedSubtasks": 5,
      "expansionPrompt": "Break down the landing page implementation into specific subtasks focusing on responsive design, content refinement, component enhancement, navigation functionality, and final testing across devices.",
      "reasoning": "This task involves refining existing components rather than building from scratch, but requires attention to responsive design across multiple device sizes and ensuring all sections match the Figma design. The task spans multiple components (header, hero, value proposition, etc.) and includes both visual and functional elements."
    },
    {
      "taskId": 2,
      "taskTitle": "Implement Public Verification Interface",
      "complexityScore": 7,
      "recommendedSubtasks": 6,
      "expansionPrompt": "Divide the QR code verification interface implementation into subtasks covering camera access setup, QR scanning functionality, API integration, verification result display states, error handling, and responsive design implementation.",
      "reasoning": "This task involves complex functionality including camera access, QR code scanning, API integration, and multiple result states. It requires careful error handling for camera permissions and invalid codes, plus mobile-first responsive design implementation."
    },
    {
      "taskId": 3,
      "taskTitle": "Implement Reward Redemption Flow",
      "complexityScore": 7,
      "recommendedSubtasks": 5,
      "expansionPrompt": "Break down the reward redemption flow into subtasks covering wallet input methods, wallet validation, API integration, success/failure states, and state management between verification and redemption steps.",
      "reasoning": "This task builds on the verification flow and adds wallet scanning/input functionality, API integration for redemption, and state management across multiple steps. It requires handling different input methods (QR scan or manual input) and managing the transition between verification and redemption."
    },
    {
      "taskId": 4,
      "taskTitle": "Develop UI Component Library",
      "complexityScore": 8,
      "recommendedSubtasks": 6,
      "expansionPrompt": "Divide the UI component library development into logical component groups: modal system, button variants, form input components, feedback components, layout components, and documentation/accessibility implementation.",
      "reasoning": "This is a broad task covering multiple component types with consistent styling, accessibility requirements, and documentation. Creating a cohesive design system with proper tokens and ensuring consistency across all components adds significant complexity. The task requires both technical implementation and design system thinking."
    },
    {
      "taskId": 5,
      "taskTitle": "Implement Brand Owner Dashboard Layout",
      "complexityScore": 5,
      "recommendedSubtasks": 4,
      "expansionPrompt": "Break down the brand owner dashboard layout implementation into subtasks covering sidebar navigation, top bar/header, responsive behavior, and route configuration for nested dashboard sections.",
      "reasoning": "This task focuses on creating a layout structure with navigation components. While it requires responsive design considerations and route configuration, it's more straightforward than some other tasks since it's primarily structural and doesn't involve complex data operations."
    },
    {
      "taskId": 6,
      "taskTitle": "Implement Product Management Page",
      "complexityScore": 7,
      "recommendedSubtasks": 5,
      "expansionPrompt": "Divide the product management page implementation into subtasks covering filter controls, product table with pagination, API integration for product data, action functionality (edit/generate QR), and responsive design implementation.",
      "reasoning": "This task involves creating a data-heavy interface with filtering, pagination, and multiple actions. It requires API integration for fetching product data and implementing interactive filtering functionality. The combination of data management and UI implementation increases complexity."
    },
    {
      "taskId": 7,
      "taskTitle": "Implement Add Product Form",
      "complexityScore": 6,
      "recommendedSubtasks": 5,
      "expansionPrompt": "Break down the add product form implementation into subtasks covering form field components, validation logic, metadata management UI, API integration for submission, and success/error feedback implementation.",
      "reasoning": "This task involves enhancing an existing component with form validation, API integration, and dynamic metadata management. The complexity comes from implementing proper validation with react-hook-form and zod, plus handling the dynamic nature of metadata key-value pairs."
    },
    {
      "taskId": 8,
      "taskTitle": "Implement Reseller Dashboard",
      "complexityScore": 7,
      "recommendedSubtasks": 6,
      "expansionPrompt": "Divide the reseller dashboard implementation into subtasks covering layout structure, registration form with validation, file upload functionality, certification page, API integration, and responsive design implementation.",
      "reasoning": "This task involves creating multiple pages with form components, file upload handling, and API integration. The registration form has multiple field types including document uploads, which adds complexity. Creating both the dashboard layout and the registration flow makes this a substantial task."
    },
    {
      "taskId": 9,
      "taskTitle": "Implement User Dashboard",
      "complexityScore": 6,
      "recommendedSubtasks": 5,
      "expansionPrompt": "Break down the user dashboard implementation into subtasks covering profile management UI, verification history list with pagination, rewards display, settings page, and API integration for user data.",
      "reasoning": "This task requires implementing multiple dashboard sections with different functionality, including profile management, verification history with pagination, and settings. It involves API integration for multiple data types and responsive design considerations."
    },
    {
      "taskId": 10,
      "taskTitle": "Implement Comprehensive Error Handling",
      "complexityScore": 8,
      "recommendedSubtasks": 6,
      "expansionPrompt": "Divide the error handling implementation into subtasks covering global error boundary, standardized API error handling, form validation error display, network error handling, error logging system, and consistent loading/empty states.",
      "reasoning": "This is a cross-cutting concern that affects the entire application and requires a systematic approach. It involves creating a global error boundary, standardizing error handling across all components, implementing logging, and ensuring consistent user feedback. The comprehensive nature and dependency on all other tasks makes this complex."
    }
  ]
}
</file>

<file path="src/declarations/TrustOrigin_backend/index.d.ts">
import type {
  ActorSubclass,
  HttpAgentOptions,
  ActorConfig,
  Agent,
} from "@dfinity/agent";
import type { Principal } from "@dfinity/principal";
import type { IDL } from "@dfinity/candid";

import { _SERVICE } from './TrustOrigin_backend.did';

export declare const idlFactory: IDL.InterfaceFactory;
export declare const canisterId: string;

export declare interface CreateActorOptions {
  /**
   * @see {@link Agent}
   */
  agent?: Agent;
  /**
   * @see {@link HttpAgentOptions}
   */
  agentOptions?: HttpAgentOptions;
  /**
   * @see {@link ActorConfig}
   */
  actorOptions?: ActorConfig;
}

/**
 * Intializes an {@link ActorSubclass}, configured with the provided SERVICE interface of a canister.
 * @constructs {@link ActorSubClass}
 * @param {string | Principal} canisterId - ID of the canister the {@link Actor} will talk to
 * @param {CreateActorOptions} options - see {@link CreateActorOptions}
 * @param {CreateActorOptions["agent"]} options.agent - a pre-configured agent you'd like to use. Supercedes agentOptions
 * @param {CreateActorOptions["agentOptions"]} options.agentOptions - options to set up a new agent
 * @see {@link HttpAgentOptions}
 * @param {CreateActorOptions["actorOptions"]} options.actorOptions - options for the Actor
 * @see {@link ActorConfig}
 */
export declare const createActor: (
  canisterId: string | Principal,
  options?: CreateActorOptions
) => ActorSubclass<_SERVICE>;

/**
 * Intialized Actor using default settings, ready to talk to a canister using its candid interface
 * @constructs {@link ActorSubClass}
 */
export declare const TrustOrigin_backend: ActorSubclass<_SERVICE>;
</file>

<file path="src/declarations/TrustOrigin_backend/index.js">
import { Actor, HttpAgent } from "@dfinity/agent";

// Imports and re-exports candid interface
import { idlFactory } from "./TrustOrigin_backend.did.js";
export { idlFactory } from "./TrustOrigin_backend.did.js";

/* CANISTER_ID is replaced by webpack based on node environment
 * Note: canister environment variable will be standardized as
 * process.env.CANISTER_ID_<CANISTER_NAME_UPPERCASE>
 * beginning in dfx 0.15.0
 */
export const canisterId =
  process.env.CANISTER_ID_TRUSTORIGIN_BACKEND;

export const createActor = (canisterId, options = {}) => {
  const agent = options.agent || new HttpAgent({ ...options.agentOptions });

  if (options.agent && options.agentOptions) {
    console.warn(
      "Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent."
    );
  }

  // Fetch root key for certificate validation during development
  if (process.env.DFX_NETWORK !== "ic") {
    agent.fetchRootKey().catch((err) => {
      console.warn(
        "Unable to fetch root key. Check to ensure that your local replica is running"
      );
      console.error(err);
    });
  }

  // Creates an actor with using the candid interface and the HttpAgent
  return Actor.createActor(idlFactory, {
    agent,
    canisterId,
    ...options.actorOptions,
  });
};

export const TrustOrigin_backend = canisterId ? createActor(canisterId) : undefined;
</file>

<file path="src/declarations/TrustOrigin_backend/TrustOrigin_backend.did">
type Metadata = record {
    key: text;
    value: text;
};

type Organization = record {
    id: principal;
    name: text;
    description: text;
    metadata: vec Metadata;
    private_key: text;
    created_at: nat64;
    created_by: principal;
    updated_at: nat64;
    updated_by: principal;
};

type OrganizationPublic = record {
    id: principal;
    name: text;
    description: text;
    metadata: vec Metadata;
    created_at: nat64;
    created_by: principal;
    updated_at: nat64;
    updated_by: principal;
};

type OrganizationInput = record {
    name: text;
    description: text;
    metadata: vec Metadata;
};

type OrganizationResult = variant {
    organization: Organization;
    error: GenericError;
};

type Product = record {
    id: principal;
    name: text;
    org_id: principal;
    category: text;
    description: text;
    metadata: vec Metadata;
    public_key: text;
    created_at: nat64;
    created_by: principal;
    updated_at: nat64;
    updated_by: principal;
};

type ProductInput = record {
    name: text;
    org_id: principal;
    category: text;
    description: text;
    metadata: vec Metadata;
};

type ProductResult = variant {
    none: null;
    product: Product;
    error: GenericError;
};

type ProductSerialNumber = record {
    product_id: principal;
    serial_no: principal;
    user_serial_no: text;
    print_version: nat8;
    metadata: vec Metadata;
    created_at: nat64;
    created_by: principal;
    updated_at: nat64;
    updated_by: principal;
};

type ProductVerification = record {
    id: principal;
    product_id: principal;
    serial_no: principal;
    print_version: nat8;
    metadata: vec Metadata;
    created_at: nat64;
    created_by: principal;
};

type User = record {
    id: principal;
    is_principal: bool;
    is_enabled: bool;
    user_role: opt UserRole;
    org_ids: vec principal;
    first_name: opt text;
    last_name: opt text;
    phone_no: opt text;
    email: opt text;
    detail_meta: vec Metadata;
    created_at: nat64;
    created_by: principal;
    updated_at: nat64;
    updated_by: principal;
};

type UserDetailsInput = record {
    first_name: text;
    last_name: text;
    phone_no: text;
    email: text;
    detail_meta: vec Metadata;
};

type GenericError = record {
    message: text;
    details: vec Metadata;
};

type UserResult = variant {
    none: null;
    user: User;
    error: GenericError;
};

type UserRole = variant {
    Admin;
    Reseller;
    BrandOwner;
};

type Reseller = record {
    id: principal;
    org_id: principal;
    reseller_id: text;
    name: text;
    date_joined: nat64;
    metadata: vec Metadata;
    ecommerce_urls: vec Metadata;
    created_at: nat64;
    created_by: principal;
    updated_at: nat64;
    updated_by: principal;
};

type ResellerInput = record {
    org_id: principal;
    name: text;
    metadata: vec Metadata;
    ecommerce_urls: vec Metadata;
};

type ProductSerialNumberResult = variant {
    result: ProductSerialNumber;
    error: GenericError;
};

type UniqueCodeResult = variant {
    unique_code: text;
    error: GenericError;
};

type ProductVerificationStatus = variant {
    FirstVerification;
    MultipleVerification;
    Invalid;
};

type ProductVerificationResult = variant {
    status: ProductVerificationStatus;
    error: GenericError;
};

type PrivateKeyResult = variant {
    key: text;
    error: GenericError;
};

type VerificationStatus = variant {
    Success;
    Invalid;
};

type ResellerVerificationResultRecord = record {
    status: VerificationStatus;
    organization: OrganizationPublic;
    registered_at: opt nat64;
};

type ResellerVerificationResult = variant {
    result: ResellerVerificationResultRecord;
    error: GenericError;
};

type ProductUniqueCodeResultRecord = record {
    unique_code: text;
    print_version: nat8;
    product_id: principal;
    serial_no: principal;
    created_at: nat64;
};

type ProductUniqueCodeResult = variant {
    result: ProductUniqueCodeResultRecord;
    error: GenericError;
};

service : {
    "get_organization_by_id": (id: principal) -> (OrganizationPublic) query;
    "create_organization": (input: OrganizationInput) -> (OrganizationPublic);
    "update_organization": (id: principal, input: OrganizationInput) -> (OrganizationPublic);
    "get_organization_private_key": (id: principal) -> (PrivateKeyResult) query;
    "find_organizations_by_name": (text) -> (vec OrganizationPublic) query;
    "create_product": (input: ProductInput) -> (ProductResult);
    "list_products": (organization_id: principal) -> (vec Product) query;
    "get_product_by_id": (id: principal) -> (ProductResult) query;
    "update_product": (id: principal, input: ProductInput) -> (Product);
    "register": () -> (User);
    "set_self_role": (role_id: UserRole) -> (UserResult);
    "register_as_reseller": (ResellerInput) -> (UserResult);
    "register_as_organization": (OrganizationInput) -> (UserResult);
    "get_user_by_id": (id: principal) -> (opt User) query;
    "whoami": () -> (opt User) query;
    "update_self_details": (input: UserDetailsInput) -> (UserResult);
    "create_user": (id: principal, input: UserDetailsInput) -> (UserResult);
    "update_user": (id: principal, input: UserDetailsInput) -> (UserResult);
    "update_user_orgs": (id: principal, org_ids: vec principal) -> (UserResult);
    "greet" : (text) -> (text) query;
    "generate_product_review": (product_id: principal) -> (opt Product);
    "find_resellers_by_name_or_id": (text) -> (vec Reseller) query;
    "verify_reseller": (reseller_id: principal, public_key: text) -> (ResellerVerificationResult) query;
    "generate_reseller_unique_code": (reseller_id: principal) -> (UniqueCodeResult) query;
    "list_product_serial_number": (organization_id: opt principal, product_id: opt principal) -> (vec ProductSerialNumber) query;
    "create_product_serial_number": (product_id: principal, user_serial_no: opt text) -> (ProductSerialNumberResult);
    "update_product_serial_number": (product_id: principal, serial_no: principal, user_serial_no: opt text) -> (ProductSerialNumberResult);
    "print_product_serial_number": (product_id: principal, serial_no: principal) -> (ProductUniqueCodeResult);
    "verify_product": (product_id: principal, serial_no: principal, print_version: nat8, unique_code: text, metadata: vec Metadata) -> (ProductVerificationResult);
    "list_product_verifications": (organization_id: opt principal, product_id: opt principal, serial_number: opt principal) -> (vec ProductVerification) query;
    "list_product_verifications_by_user": (user_id: principal, organization_id: opt principal) -> (vec ProductVerification) query;
};
</file>

<file path="src/declarations/TrustOrigin_backend/TrustOrigin_backend.did.d.ts">
import type { Principal } from '@dfinity/principal';
import type { ActorMethod } from '@dfinity/agent';
import type { IDL } from '@dfinity/candid';

export interface GenericError {
  'message' : string,
  'details' : Array<Metadata>,
}
export interface Metadata { 'key' : string, 'value' : string }
export interface Organization {
  'id' : Principal,
  'updated_at' : bigint,
  'updated_by' : Principal,
  'metadata' : Array<Metadata>,
  'name' : string,
  'description' : string,
  'created_at' : bigint,
  'created_by' : Principal,
  'private_key' : string,
}
export interface OrganizationInput {
  'metadata' : Array<Metadata>,
  'name' : string,
  'description' : string,
}
export interface OrganizationPublic {
  'id' : Principal,
  'updated_at' : bigint,
  'updated_by' : Principal,
  'metadata' : Array<Metadata>,
  'name' : string,
  'description' : string,
  'created_at' : bigint,
  'created_by' : Principal,
}
export type OrganizationResult = { 'error' : GenericError } |
  { 'organization' : Organization };
export type PrivateKeyResult = { 'key' : string } |
  { 'error' : GenericError };
export interface Product {
  'id' : Principal,
  'updated_at' : bigint,
  'updated_by' : Principal,
  'public_key' : string,
  'metadata' : Array<Metadata>,
  'name' : string,
  'org_id' : Principal,
  'description' : string,
  'created_at' : bigint,
  'created_by' : Principal,
  'category' : string,
}
export interface ProductInput {
  'metadata' : Array<Metadata>,
  'name' : string,
  'org_id' : Principal,
  'description' : string,
  'category' : string,
}
export type ProductResult = { 'none' : null } |
  { 'error' : GenericError } |
  { 'product' : Product };
export interface ProductSerialNumber {
  'updated_at' : bigint,
  'updated_by' : Principal,
  'product_id' : Principal,
  'metadata' : Array<Metadata>,
  'created_at' : bigint,
  'created_by' : Principal,
  'print_version' : number,
  'user_serial_no' : string,
  'serial_no' : Principal,
}
export type ProductSerialNumberResult = { 'result' : ProductSerialNumber } |
  { 'error' : GenericError };
export type ProductUniqueCodeResult = {
    'result' : ProductUniqueCodeResultRecord
  } |
  { 'error' : GenericError };
export interface ProductUniqueCodeResultRecord {
  'product_id' : Principal,
  'created_at' : bigint,
  'print_version' : number,
  'unique_code' : string,
  'serial_no' : Principal,
}
export interface ProductVerification {
  'id' : Principal,
  'product_id' : Principal,
  'metadata' : Array<Metadata>,
  'created_at' : bigint,
  'created_by' : Principal,
  'print_version' : number,
  'serial_no' : Principal,
}
export type ProductVerificationResult = {
    'status' : ProductVerificationStatus
  } |
  { 'error' : GenericError };
export type ProductVerificationStatus = { 'Invalid' : null } |
  { 'MultipleVerification' : null } |
  { 'FirstVerification' : null };
export interface Reseller {
  'id' : Principal,
  'updated_at' : bigint,
  'updated_by' : Principal,
  'ecommerce_urls' : Array<Metadata>,
  'metadata' : Array<Metadata>,
  'name' : string,
  'org_id' : Principal,
  'date_joined' : bigint,
  'created_at' : bigint,
  'created_by' : Principal,
  'reseller_id' : string,
}
export interface ResellerInput {
  'ecommerce_urls' : Array<Metadata>,
  'metadata' : Array<Metadata>,
  'name' : string,
  'org_id' : Principal,
}
export type ResellerVerificationResult = {
    'result' : ResellerVerificationResultRecord
  } |
  { 'error' : GenericError };
export interface ResellerVerificationResultRecord {
  'status' : VerificationStatus,
  'organization' : OrganizationPublic,
  'registered_at' : [] | [bigint],
}
export type UniqueCodeResult = { 'error' : GenericError } |
  { 'unique_code' : string };
export interface User {
  'id' : Principal,
  'updated_at' : bigint,
  'updated_by' : Principal,
  'user_role' : [] | [UserRole],
  'org_ids' : Array<Principal>,
  'is_principal' : boolean,
  'is_enabled' : boolean,
  'created_at' : bigint,
  'created_by' : Principal,
  'email' : [] | [string],
  'first_name' : [] | [string],
  'detail_meta' : Array<Metadata>,
  'last_name' : [] | [string],
  'phone_no' : [] | [string],
}
export interface UserDetailsInput {
  'email' : string,
  'first_name' : string,
  'detail_meta' : Array<Metadata>,
  'last_name' : string,
  'phone_no' : string,
}
export type UserResult = { 'none' : null } |
  { 'user' : User } |
  { 'error' : GenericError };
export type UserRole = { 'Reseller' : null } |
  { 'Admin' : null } |
  { 'BrandOwner' : null };
export type VerificationStatus = { 'Invalid' : null } |
  { 'Success' : null };
export interface _SERVICE {
  'create_organization' : ActorMethod<[OrganizationInput], OrganizationPublic>,
  'create_product' : ActorMethod<[ProductInput], ProductResult>,
  'create_product_serial_number' : ActorMethod<
    [Principal, [] | [string]],
    ProductSerialNumberResult
  >,
  'create_user' : ActorMethod<[Principal, UserDetailsInput], UserResult>,
  'find_organizations_by_name' : ActorMethod<
    [string],
    Array<OrganizationPublic>
  >,
  'find_resellers_by_name_or_id' : ActorMethod<[string], Array<Reseller>>,
  'generate_product_review' : ActorMethod<[Principal], [] | [Product]>,
  'generate_reseller_unique_code' : ActorMethod<[Principal], UniqueCodeResult>,
  'get_organization_by_id' : ActorMethod<[Principal], OrganizationPublic>,
  'get_organization_private_key' : ActorMethod<[Principal], PrivateKeyResult>,
  'get_product_by_id' : ActorMethod<[Principal], ProductResult>,
  'get_user_by_id' : ActorMethod<[Principal], [] | [User]>,
  'greet' : ActorMethod<[string], string>,
  'list_product_serial_number' : ActorMethod<
    [[] | [Principal], [] | [Principal]],
    Array<ProductSerialNumber>
  >,
  'list_product_verifications' : ActorMethod<
    [[] | [Principal], [] | [Principal], [] | [Principal]],
    Array<ProductVerification>
  >,
  'list_product_verifications_by_user' : ActorMethod<
    [Principal, [] | [Principal]],
    Array<ProductVerification>
  >,
  'list_products' : ActorMethod<[Principal], Array<Product>>,
  'print_product_serial_number' : ActorMethod<
    [Principal, Principal],
    ProductUniqueCodeResult
  >,
  'register' : ActorMethod<[], User>,
  'register_as_organization' : ActorMethod<[OrganizationInput], UserResult>,
  'register_as_reseller' : ActorMethod<[ResellerInput], UserResult>,
  'set_self_role' : ActorMethod<[UserRole], UserResult>,
  'update_organization' : ActorMethod<
    [Principal, OrganizationInput],
    OrganizationPublic
  >,
  'update_product' : ActorMethod<[Principal, ProductInput], Product>,
  'update_product_serial_number' : ActorMethod<
    [Principal, Principal, [] | [string]],
    ProductSerialNumberResult
  >,
  'update_self_details' : ActorMethod<[UserDetailsInput], UserResult>,
  'update_user' : ActorMethod<[Principal, UserDetailsInput], UserResult>,
  'update_user_orgs' : ActorMethod<[Principal, Array<Principal>], UserResult>,
  'verify_product' : ActorMethod<
    [Principal, Principal, number, string, Array<Metadata>],
    ProductVerificationResult
  >,
  'verify_reseller' : ActorMethod<
    [Principal, string],
    ResellerVerificationResult
  >,
  'whoami' : ActorMethod<[], [] | [User]>,
}
export declare const idlFactory: IDL.InterfaceFactory;
export declare const init: (args: { IDL: typeof IDL }) => IDL.Type[];
</file>

<file path="src/declarations/TrustOrigin_backend/TrustOrigin_backend.did.js">
export const idlFactory = ({ IDL }) => {
  const Metadata = IDL.Record({ 'key' : IDL.Text, 'value' : IDL.Text });
  const OrganizationInput = IDL.Record({
    'metadata' : IDL.Vec(Metadata),
    'name' : IDL.Text,
    'description' : IDL.Text,
  });
  const OrganizationPublic = IDL.Record({
    'id' : IDL.Principal,
    'updated_at' : IDL.Nat64,
    'updated_by' : IDL.Principal,
    'metadata' : IDL.Vec(Metadata),
    'name' : IDL.Text,
    'description' : IDL.Text,
    'created_at' : IDL.Nat64,
    'created_by' : IDL.Principal,
  });
  const ProductInput = IDL.Record({
    'metadata' : IDL.Vec(Metadata),
    'name' : IDL.Text,
    'org_id' : IDL.Principal,
    'description' : IDL.Text,
    'category' : IDL.Text,
  });
  const GenericError = IDL.Record({
    'message' : IDL.Text,
    'details' : IDL.Vec(Metadata),
  });
  const Product = IDL.Record({
    'id' : IDL.Principal,
    'updated_at' : IDL.Nat64,
    'updated_by' : IDL.Principal,
    'public_key' : IDL.Text,
    'metadata' : IDL.Vec(Metadata),
    'name' : IDL.Text,
    'org_id' : IDL.Principal,
    'description' : IDL.Text,
    'created_at' : IDL.Nat64,
    'created_by' : IDL.Principal,
    'category' : IDL.Text,
  });
  const ProductResult = IDL.Variant({
    'none' : IDL.Null,
    'error' : GenericError,
    'product' : Product,
  });
  const ProductSerialNumber = IDL.Record({
    'updated_at' : IDL.Nat64,
    'updated_by' : IDL.Principal,
    'product_id' : IDL.Principal,
    'metadata' : IDL.Vec(Metadata),
    'created_at' : IDL.Nat64,
    'created_by' : IDL.Principal,
    'print_version' : IDL.Nat8,
    'user_serial_no' : IDL.Text,
    'serial_no' : IDL.Principal,
  });
  const ProductSerialNumberResult = IDL.Variant({
    'result' : ProductSerialNumber,
    'error' : GenericError,
  });
  const UserDetailsInput = IDL.Record({
    'email' : IDL.Text,
    'first_name' : IDL.Text,
    'detail_meta' : IDL.Vec(Metadata),
    'last_name' : IDL.Text,
    'phone_no' : IDL.Text,
  });
  const UserRole = IDL.Variant({
    'Reseller' : IDL.Null,
    'Admin' : IDL.Null,
    'BrandOwner' : IDL.Null,
  });
  const User = IDL.Record({
    'id' : IDL.Principal,
    'updated_at' : IDL.Nat64,
    'updated_by' : IDL.Principal,
    'user_role' : IDL.Opt(UserRole),
    'org_ids' : IDL.Vec(IDL.Principal),
    'is_principal' : IDL.Bool,
    'is_enabled' : IDL.Bool,
    'created_at' : IDL.Nat64,
    'created_by' : IDL.Principal,
    'email' : IDL.Opt(IDL.Text),
    'first_name' : IDL.Opt(IDL.Text),
    'detail_meta' : IDL.Vec(Metadata),
    'last_name' : IDL.Opt(IDL.Text),
    'phone_no' : IDL.Opt(IDL.Text),
  });
  const UserResult = IDL.Variant({
    'none' : IDL.Null,
    'user' : User,
    'error' : GenericError,
  });
  const Reseller = IDL.Record({
    'id' : IDL.Principal,
    'updated_at' : IDL.Nat64,
    'updated_by' : IDL.Principal,
    'ecommerce_urls' : IDL.Vec(Metadata),
    'metadata' : IDL.Vec(Metadata),
    'name' : IDL.Text,
    'org_id' : IDL.Principal,
    'date_joined' : IDL.Nat64,
    'created_at' : IDL.Nat64,
    'created_by' : IDL.Principal,
    'reseller_id' : IDL.Text,
  });
  const UniqueCodeResult = IDL.Variant({
    'error' : GenericError,
    'unique_code' : IDL.Text,
  });
  const PrivateKeyResult = IDL.Variant({
    'key' : IDL.Text,
    'error' : GenericError,
  });
  const ProductVerification = IDL.Record({
    'id' : IDL.Principal,
    'product_id' : IDL.Principal,
    'metadata' : IDL.Vec(Metadata),
    'created_at' : IDL.Nat64,
    'created_by' : IDL.Principal,
    'print_version' : IDL.Nat8,
    'serial_no' : IDL.Principal,
  });
  const ProductUniqueCodeResultRecord = IDL.Record({
    'product_id' : IDL.Principal,
    'created_at' : IDL.Nat64,
    'print_version' : IDL.Nat8,
    'unique_code' : IDL.Text,
    'serial_no' : IDL.Principal,
  });
  const ProductUniqueCodeResult = IDL.Variant({
    'result' : ProductUniqueCodeResultRecord,
    'error' : GenericError,
  });
  const ResellerInput = IDL.Record({
    'ecommerce_urls' : IDL.Vec(Metadata),
    'metadata' : IDL.Vec(Metadata),
    'name' : IDL.Text,
    'org_id' : IDL.Principal,
  });
  const ProductVerificationStatus = IDL.Variant({
    'Invalid' : IDL.Null,
    'MultipleVerification' : IDL.Null,
    'FirstVerification' : IDL.Null,
  });
  const ProductVerificationResult = IDL.Variant({
    'status' : ProductVerificationStatus,
    'error' : GenericError,
  });
  const VerificationStatus = IDL.Variant({
    'Invalid' : IDL.Null,
    'Success' : IDL.Null,
  });
  const ResellerVerificationResultRecord = IDL.Record({
    'status' : VerificationStatus,
    'organization' : OrganizationPublic,
    'registered_at' : IDL.Opt(IDL.Nat64),
  });
  const ResellerVerificationResult = IDL.Variant({
    'result' : ResellerVerificationResultRecord,
    'error' : GenericError,
  });
  return IDL.Service({
    'create_organization' : IDL.Func(
        [OrganizationInput],
        [OrganizationPublic],
        [],
      ),
    'create_product' : IDL.Func([ProductInput], [ProductResult], []),
    'create_product_serial_number' : IDL.Func(
        [IDL.Principal, IDL.Opt(IDL.Text)],
        [ProductSerialNumberResult],
        [],
      ),
    'create_user' : IDL.Func(
        [IDL.Principal, UserDetailsInput],
        [UserResult],
        [],
      ),
    'find_organizations_by_name' : IDL.Func(
        [IDL.Text],
        [IDL.Vec(OrganizationPublic)],
        ['query'],
      ),
    'find_resellers_by_name_or_id' : IDL.Func(
        [IDL.Text],
        [IDL.Vec(Reseller)],
        ['query'],
      ),
    'generate_product_review' : IDL.Func(
        [IDL.Principal],
        [IDL.Opt(Product)],
        [],
      ),
    'generate_reseller_unique_code' : IDL.Func(
        [IDL.Principal],
        [UniqueCodeResult],
        ['query'],
      ),
    'get_organization_by_id' : IDL.Func(
        [IDL.Principal],
        [OrganizationPublic],
        ['query'],
      ),
    'get_organization_private_key' : IDL.Func(
        [IDL.Principal],
        [PrivateKeyResult],
        ['query'],
      ),
    'get_product_by_id' : IDL.Func([IDL.Principal], [ProductResult], ['query']),
    'get_user_by_id' : IDL.Func([IDL.Principal], [IDL.Opt(User)], ['query']),
    'greet' : IDL.Func([IDL.Text], [IDL.Text], ['query']),
    'list_product_serial_number' : IDL.Func(
        [IDL.Opt(IDL.Principal), IDL.Opt(IDL.Principal)],
        [IDL.Vec(ProductSerialNumber)],
        ['query'],
      ),
    'list_product_verifications' : IDL.Func(
        [
          IDL.Opt(IDL.Principal),
          IDL.Opt(IDL.Principal),
          IDL.Opt(IDL.Principal),
        ],
        [IDL.Vec(ProductVerification)],
        ['query'],
      ),
    'list_product_verifications_by_user' : IDL.Func(
        [IDL.Principal, IDL.Opt(IDL.Principal)],
        [IDL.Vec(ProductVerification)],
        ['query'],
      ),
    'list_products' : IDL.Func([IDL.Principal], [IDL.Vec(Product)], ['query']),
    'print_product_serial_number' : IDL.Func(
        [IDL.Principal, IDL.Principal],
        [ProductUniqueCodeResult],
        [],
      ),
    'register' : IDL.Func([], [User], []),
    'register_as_organization' : IDL.Func(
        [OrganizationInput],
        [UserResult],
        [],
      ),
    'register_as_reseller' : IDL.Func([ResellerInput], [UserResult], []),
    'set_self_role' : IDL.Func([UserRole], [UserResult], []),
    'update_organization' : IDL.Func(
        [IDL.Principal, OrganizationInput],
        [OrganizationPublic],
        [],
      ),
    'update_product' : IDL.Func([IDL.Principal, ProductInput], [Product], []),
    'update_product_serial_number' : IDL.Func(
        [IDL.Principal, IDL.Principal, IDL.Opt(IDL.Text)],
        [ProductSerialNumberResult],
        [],
      ),
    'update_self_details' : IDL.Func([UserDetailsInput], [UserResult], []),
    'update_user' : IDL.Func(
        [IDL.Principal, UserDetailsInput],
        [UserResult],
        [],
      ),
    'update_user_orgs' : IDL.Func(
        [IDL.Principal, IDL.Vec(IDL.Principal)],
        [UserResult],
        [],
      ),
    'verify_product' : IDL.Func(
        [IDL.Principal, IDL.Principal, IDL.Nat8, IDL.Text, IDL.Vec(Metadata)],
        [ProductVerificationResult],
        [],
      ),
    'verify_reseller' : IDL.Func(
        [IDL.Principal, IDL.Text],
        [ResellerVerificationResult],
        ['query'],
      ),
    'whoami' : IDL.Func([], [IDL.Opt(User)], ['query']),
  });
};
export const init = ({ IDL }) => { return []; };
</file>

<file path="src/frontend/src/api/productApi.ts">
/**
 * @file Product API client
 * @fileoverview API client for product-related operations including verification
 * 
 * Functions:
 * - verifyProduct: Verifies a product using its unique code
 * - getProductDetails: Gets details of a product
 * - parseVerificationCode: Parses a verification code into its components
 * 
 * Constants:
 * - None
 * 
 * Flow:
 * 1. Parse verification code
 * 2. Call appropriate backend API methods
 * 3. Handle response formatting
 * 
 * Error Handling:
 * - API call failures
 * - Invalid code format
 * - Backend errors
 * 
 * @module api/productApi
 * @requires declarations/TrustOrigin_backend - Backend API declarations
 * @exports productApi - Product API client methods
 */

import { TrustOrigin_backend } from "../../../declarations/TrustOrigin_backend";
import { Principal } from "@dfinity/principal";
import type { Metadata, ProductVerificationStatus } from "../../../declarations/TrustOrigin_backend/TrustOrigin_backend.did";

interface VerificationResult {
  status: ProductVerificationStatus;
  productInfo?: {
    id: string;
    name: string;
    description: string;
    category: string;
    organization: string;
    metadata: Record<string, string>;
  };
  error?: string;
}

interface VerificationCodeComponents {
  productId: Principal;
  serialNo: Principal;
  printVersion: number;
  uniqueCode: string;
  valid: boolean;
}

/**
 * Parse a verification code into its components
 * 
 * @param {string} code - The verification code to parse
 * @returns {VerificationCodeComponents} Parsed components of the verification code
 */
const parseVerificationCode = (code: string): VerificationCodeComponents => {
  try {
    // Format should be: productId:serialNo:printVersion:uniqueCode
    const parts = code.split(':');
    
    if (parts.length !== 4) {
      return {
        productId: Principal.anonymous(),
        serialNo: Principal.anonymous(),
        printVersion: 0,
        uniqueCode: '',
        valid: false
      };
    }
    
    return {
      productId: Principal.fromText(parts[0]),
      serialNo: Principal.fromText(parts[1]),
      printVersion: parseInt(parts[2], 10),
      uniqueCode: parts[3],
      valid: true
    };
  } catch (error) {
    console.error("Failed to parse verification code:", error);
    return {
      productId: Principal.anonymous(),
      serialNo: Principal.anonymous(),
      printVersion: 0,
      uniqueCode: '',
      valid: false
    };
  }
};

/**
 * Convert metadata array to a key-value object
 * 
 * @param {Metadata[]} metadata - Array of metadata objects
 * @returns {Record<string, string>} Metadata as key-value object
 */
const metadataToObject = (metadata: Metadata[]): Record<string, string> => {
  return metadata.reduce((obj, item) => {
    obj[item.key] = item.value;
    return obj;
  }, {} as Record<string, string>);
};

/**
 * Verify a product using its verification code
 * 
 * @param {string} verificationCode - The code from the QR scan
 * @returns {Promise<VerificationResult>} Result of verification
 * @example
 * const result = await verifyProduct("abc123:def456:1:xyz789");
 */
const verifyProduct = async (verificationCode: string): Promise<VerificationResult> => {
  try {
    const { productId, serialNo, printVersion, uniqueCode, valid } = parseVerificationCode(verificationCode);
    
    if (!valid) {
      return {
        status: { Invalid: null },
        error: "Invalid verification code format"
      };
    }
    
    // Additional metadata for verification
    const metadata: Metadata[] = [
      { key: "source", value: "frontend-verification" },
      { key: "timestamp", value: Date.now().toString() }
    ];
    
    // Call backend verification API
    const result = await TrustOrigin_backend.verify_product(
      productId,
      serialNo,
      printVersion,
      uniqueCode,
      metadata
    );
    
    if ('error' in result) {
      return {
        status: { Invalid: null },
        error: result.error.message
      };
    }
    
    // Get product details if verification was successful
    if ('status' in result) {
      const productResult = await TrustOrigin_backend.get_product_by_id(productId);
      
      if ('product' in productResult) {
        const product = productResult.product;
        const organization = await TrustOrigin_backend.get_organization_by_id(product.org_id);
        
        return {
          status: result.status,
          productInfo: {
            id: product.id.toString(),
            name: product.name,
            description: product.description,
            category: product.category,
            organization: organization.name,
            metadata: metadataToObject(product.metadata)
          }
        };
      }
      
      return {
        status: result.status
      };
    }
    
    return {
      status: { Invalid: null },
      error: "Unknown error during verification"
    };
  } catch (error) {
    console.error("Product verification failed:", error);
    return {
      status: { Invalid: null },
      error: error instanceof Error ? error.message : "Unknown error"
    };
  }
};

/**
 * Get product details by ID
 * 
 * @param {string} productId - The ID of the product
 * @returns {Promise<any>} Product details
 */
const getProductDetails = async (productId: string) => {
  try {
    const principal = Principal.fromText(productId);
    const result = await TrustOrigin_backend.get_product_by_id(principal);
    
    if ('product' in result) {
      const product = result.product;
      const organization = await TrustOrigin_backend.get_organization_by_id(product.org_id);
      
      return {
        id: product.id.toString(),
        name: product.name,
        description: product.description,
        category: product.category,
        organization: organization.name,
        metadata: metadataToObject(product.metadata)
      };
    }
    
    throw new Error('Product not found');
  } catch (error) {
    console.error("Failed to get product details:", error);
    throw error;
  }
};

export const productApi = {
  verifyProduct,
  getProductDetails,
  parseVerificationCode
};
</file>

<file path="src/frontend/src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/frontend/src/components/ui/avatar.tsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/frontend/src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

/**
 * Defines the visual styles for the Button component.
 * Includes variants for different semantic purposes and sizes.
 */
const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      /**
       * Defines the visual style of the button.
       * - `default`: Standard primary button.
       * - `destructive`: Button for actions that delete data or are potentially dangerous.
       * - `outline`: Button with a border and transparent background.
       * - `secondary`: Less prominent button, often used for alternative actions.
       * - `ghost`: Button with no background or border, primarily text/icon.
       * - `link`: Button styled like a hyperlink.
       * - `tertiary`: Button with muted text color, often for less important actions.
       * - `nav`: Button optimized for navigation menus (e.g., sidebars), using ghost styling with left alignment.
       */
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        tertiary: "text-muted-foreground hover:text-accent-foreground hover:bg-accent",
        nav: "hover:bg-accent hover:text-accent-foreground justify-start px-2 h-auto",
      },
      /**
       * Defines the size of the button.
       * - `default`: Standard size.
       * - `sm`: Small size.
       * - `lg`: Large size.
       * - `icon`: Square button optimized for holding a single icon.
       */
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  /**
   * If true, the button will render as its child component, merging their props.
   * Useful for integrating with components like `<Link>` from routing libraries.
   * @default false
   */
  asChild?: boolean
}

/**
 * Renders a button or a link element with various styles and sizes.
 *
 * Based on the shadcn/ui Button component.
 *
 * @example
 * // Default button
 * <Button>Click me</Button>
 *
 * @example
 * // Destructive button, small size
 * <Button variant="destructive" size="sm">Delete</Button>
 *
 * @example
 * // Navigation button with an icon
 * <Button variant="nav" size="sm">
 *   <HomeIcon className="mr-2 h-4 w-4" />
 *   Home
 * </Button>
 *
 * @example
 * // Button as a child (e.g., for react-router Link)
 * <Button asChild variant="link">
 *   <Link to="/dashboard">Go to Dashboard</Link>
 * </Button>
 */
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/frontend/src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/frontend/src/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/frontend/src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/frontend/src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/frontend/src/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/frontend/src/components/ui/radio-group.tsx">
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="src/frontend/src/components/ui/select.tsx">
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/frontend/src/components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

// Table Container
interface TableProps extends React.HTMLAttributes<HTMLTableElement> {
  compact?: boolean;
  bordered?: boolean;
  striped?: boolean;
  hoverable?: boolean;
}

const Table = React.forwardRef<HTMLTableElement, TableProps>(
  ({ className, compact, bordered, striped, hoverable, ...props }, ref) => {
    return (
      <div className="w-full overflow-auto">
        <table
          ref={ref}
          className={cn(
            "w-full caption-bottom text-sm",
            bordered && "border border-border [&_td]:border-border [&_th]:border-border [&_td]:border [&_th]:border",
            className
          )}
          {...props}
        />
      </div>
    );
  }
);
Table.displayName = "Table"

// Table Header
const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("bg-muted/50", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

// Table Body
const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody ref={ref} className={cn("[&_tr:last-child]:border-0", className)} {...props} />
))
TableBody.displayName = "TableBody"

// Table Footer
const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn("bg-muted/50 font-medium text-muted-foreground", className)}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

// Table Row
interface TableRowProps extends React.HTMLAttributes<HTMLTableRowElement> {
  selected?: boolean;
}

const TableRow = React.forwardRef<HTMLTableRowElement, TableRowProps>(
  ({ className, selected, ...props }, ref) => (
    <tr
      ref={ref}
      className={cn(
        "border-b border-border transition-colors data-[state=selected]:bg-muted",
        selected && "bg-muted",
        className
      )}
      {...props}
    />
  )
)
TableRow.displayName = "TableRow"

// Table Head
const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

// Table Cell
const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

// Table Caption
const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableRow,
  TableHead,
  TableCell,
  TableCaption,
}
</file>

<file path="src/frontend/src/components/ui/toast.tsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/frontend/src/components/ui/toaster.tsx">
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/frontend/src/components/ConfirmationModal.tsx">
import * as React from "react";
import { Button } from "@/components/ui/button";
import Modal from "@/components/Modal";

interface ConfirmationModalProps {
  trigger: React.ReactNode;
  title: string;
  description: string;
  onConfirm: () => void;
  onCancel?: () => void;
  confirmText?: string;
  cancelText?: string;
  destructive?: boolean;
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
}

/**
 * A specialized modal for confirmation actions like deletion or approval.
 */
const ConfirmationModal: React.FC<ConfirmationModalProps> = ({
  trigger,
  title,
  description,
  onConfirm,
  onCancel,
  confirmText = "Confirm",
  cancelText = "Cancel",
  destructive = false,
  open,
  onOpenChange,
}) => {
  const [internalOpen, setInternalOpen] = React.useState(false);
  
  // Use either controlled or uncontrolled state
  const isOpen = open !== undefined ? open : internalOpen;
  const setIsOpen = onOpenChange || setInternalOpen;

  const handleCancel = () => {
    setIsOpen(false);
    if (onCancel) onCancel();
  };

  const handleConfirm = () => {
    onConfirm();
    setIsOpen(false);
  };

  return (
    <Modal
      trigger={trigger}
      title={title}
      description={description}
      open={isOpen}
      onOpenChange={setIsOpen}
      size="sm"
      footerContent={
        <div className="flex justify-end gap-2">
          <Button
            variant="outline"
            onClick={handleCancel}
          >
            {cancelText}
          </Button>
          <Button
            variant={destructive ? "destructive" : "default"}
            onClick={handleConfirm}
          >
            {confirmText}
          </Button>
        </div>
      }
    >
      <div className="py-2">
        {/* The description is already in the header, but we need to pass children */}
      </div>
    </Modal>
  );
};

export default ConfirmationModal;
</file>

<file path="src/frontend/src/components/FormField.tsx">
import * as React from "react";
import { cn } from "@/lib/utils";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

interface FormFieldProps extends React.InputHTMLAttributes<HTMLInputElement> {
  id: string;
  label: string;
  error?: string | null | boolean; // Allow boolean for just error state indication
  containerClassName?: string; // Optional class for the wrapping div
}

const FormField = React.forwardRef<HTMLInputElement, FormFieldProps>(
  ({ id, label, error, className, containerClassName, type, ...props }, ref) => {
    const hasError = Boolean(error);
    const errorMessage = typeof error === "string" ? error : null;

    return (
      <div className={cn("grid w-full items-center gap-1.5", containerClassName)}>
        <Label htmlFor={id} className={cn(hasError && "text-destructive")}>
          {label}
        </Label>
        <Input
          type={type}
          id={id}
          ref={ref}
          className={cn(hasError && "border-destructive focus-visible:ring-destructive", className)}
          {...props}
        />
        {errorMessage && (
          <p className="text-sm font-medium text-destructive">
            {errorMessage}
          </p>
        )}
      </div>
    );
  }
);
FormField.displayName = "FormField";

export { FormField };
</file>

<file path="src/frontend/src/components/interfaces.d.ts">
import { ReactNode } from "react";

export type Menu = {
    path: string;
    logo?: ReactNode | string;
    name: string;
};
</file>

<file path="src/frontend/src/components/Modal.tsx">
import * as React from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { cn } from "@/lib/utils";

interface ModalProps {
  trigger: React.ReactNode; // Element that opens the modal
  title: string;
  description?: string; // Optional description
  children: React.ReactNode; // Modal content
  footerContent?: React.ReactNode; // Optional custom footer content
  open?: boolean; // Controlled open state
  onOpenChange?: (open: boolean) => void; // Handler for open state changes
  size?: "sm" | "md" | "lg" | "xl" | "full"; // Size variants
  className?: string; // Additional classes for DialogContent
}

/**
 * A reusable modal dialog component built on top of shadcn/ui Dialog.
 */
const Modal: React.FC<ModalProps> = ({
  trigger,
  title,
  description,
  children,
  footerContent,
  open,
  onOpenChange,
  size = "md",
  className,
}) => {
  // Define size classes based on the size prop
  const sizeClasses = {
    sm: "max-w-md",
    md: "max-w-xl",
    lg: "max-w-2xl",
    xl: "max-w-4xl",
    full: "max-w-[90vw] max-h-[90vh]",
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>{trigger}</DialogTrigger>
      <DialogContent
        className={cn(
          sizeClasses[size],
          size === "full" && "overflow-auto",
          className
        )}
      >
        <DialogHeader>
          <DialogTitle>{title}</DialogTitle>
          {description && <DialogDescription>{description}</DialogDescription>}
        </DialogHeader>
        {children}
        {footerContent && <DialogFooter>{footerContent}</DialogFooter>}
      </DialogContent>
    </Dialog>
  );
};

export default Modal;
</file>

<file path="src/frontend/src/components/ProtectedRoute.tsx">
/**
 * @file Protected route component for authentication-based access control
 * @fileoverview This component handles protecting routes based on authentication
 * status and user roles, redirecting unauthorized users to the login page.
 * 
 * Functions:
 * - ProtectedRoute: Main component to protect routes based on authentication
 * 
 * Constants:
 * - ROLES: UserRole - Available user roles in the system
 * 
 * Flow:
 * 1. Check if user is authenticated
 * 2. If not authenticated, redirect to login
 * 3. If authenticated but roles are required, check user role
 * 4. If role check passes, render the protected children
 * 5. If role check fails, redirect to unauthorized page
 * 
 * Error Handling:
 * - Unauthenticated: Redirect to login page
 * - Unauthorized roles: Redirect to unauthorized page
 * 
 * @module components/ProtectedRoute
 * @requires react-router-dom - For navigation and routing
 * @requires contexts/useAuthContext - For authentication state
 * @exports {FC} ProtectedRoute - Protected route component
 */

import { ReactNode } from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuthContext } from '../contexts/useAuthContext';
import type { UserRole } from '../../../declarations/TrustOrigin_backend/TrustOrigin_backend.did';

interface ProtectedRouteProps {
  children: ReactNode;
  requiredRoles?: UserRole[];
}

// Available roles in the system
const ROLES = {
  ADMIN: { Admin: null } as UserRole,
  BRAND_OWNER: { BrandOwner: null } as UserRole,
  RESELLER: { Reseller: null } as UserRole,
};

/**
 * Loading indicator component
 */
const LoadingIndicator = () => (
  <div className="flex h-screen items-center justify-center">
    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cyan-500"></div>
  </div>
);

/**
 * Protected route component that enforces authentication
 * 
 * Checks if user is authenticated and has required roles before
 * rendering the protected content, otherwise redirects to login.
 * 
 * @param {ReactNode} children - The components to render if authorized
 * @param {UserRole[]} requiredRoles - Optional array of roles required to access the route
 * @returns {JSX.Element} The protected component or redirect
 * @example
 * // Basic usage - require authentication only
 * <ProtectedRoute>
 *   <Dashboard />
 * </ProtectedRoute>
 * 
 * // With role requirements
 * <ProtectedRoute requiredRoles={[ROLES.ADMIN]}>
 *   <AdminPanel />
 * </ProtectedRoute>
 */
const ProtectedRoute = ({ children, requiredRoles }: ProtectedRouteProps) => {
  const { isAuthenticated, isLoading, hasRole, profile } = useAuthContext();
  const location = useLocation();

  // If still loading, show a loading indicator
  if (isLoading) {
    return <LoadingIndicator />;
  }

  // If authentication is explicitly false (not undefined), redirect to login
  if (isAuthenticated === false) {
    return <Navigate to="/auth/login" state={{ from: location }} replace />;
  }

  // If no profile is set up yet but authenticated, redirect to role selection
  if (isAuthenticated && profile && !profile.user_role?.length) {
    return <Navigate to="/auth/choose-role" replace />;
  }

  // If roles are required, check if user has at least one of them
  if (requiredRoles && requiredRoles.length > 0 && profile) {
    const hasRequiredRole = requiredRoles.some(role => hasRole(role));
    
    if (!hasRequiredRole) {
      // User is authenticated but doesn't have the required role
      return <Navigate to="/unauthorized" replace />;
    }
  }

  // User is authenticated and has required roles (if any)
  return <>{children}</>;
};

export { ProtectedRoute, ROLES };
</file>

<file path="src/frontend/src/components/SidebarLogo.tsx">
type LogoProps = {
    fillColor: string;
};

const BrandOwnerLogo: React.FC<LogoProps> = ({ fillColor }) => {
    return (
        <svg className="w-6 h-6 mr-2" fill={fillColor} viewBox="0 0 20 20">
            <path opacity="0.4" d="M22 9.75C21.59 9.75 21.25 9.41 21.25 9V7C21.25 4.42 19.58 2.75 17 2.75H7C4.42 2.75 2.75 4.42 2.75 7V9C2.75 9.41 2.41 9.75 2 9.75C1.59 9.75 1.25 9.41 1.25 9V7C1.25 3.56 3.56 1.25 7 1.25H17C20.44 1.25 22.75 3.56 22.75 7V9C22.75 9.41 22.41 9.75 22 9.75Z" fill={fillColor} />
            <path opacity="0.4" d="M17 22.75H7C3.56 22.75 1.25 20.44 1.25 17V15C1.25 14.59 1.59 14.25 2 14.25C2.41 14.25 2.75 14.59 2.75 15V17C2.75 19.58 4.42 21.25 7 21.25H17C19.58 21.25 21.25 19.58 21.25 17V15C21.25 14.59 21.59 14.25 22 14.25C22.41 14.25 22.75 14.59 22.75 15V17C22.75 20.44 20.44 22.75 17 22.75Z" fill={fillColor} />
            <path d="M16.3999 8.20999L12.6399 6.17996C12.2399 5.96996 11.7699 5.96996 11.3699 6.17996L7.60992 8.20999C7.33992 8.35999 7.16992 8.64995 7.16992 8.97995C7.16992 9.30995 7.33992 9.59997 7.60992 9.74997L11.3699 11.78C11.5699 11.89 11.7899 11.94 12.0099 11.94C12.2299 11.94 12.4499 11.89 12.6499 11.78L16.4099 9.74997C16.6799 9.59997 16.8499 9.30995 16.8499 8.97995C16.8399 8.64995 16.6699 8.35999 16.3999 8.20999Z" fill={fillColor} />
            <path d="M10.7402 12.4699L7.24023 10.7199C6.97023 10.5899 6.66022 10.6 6.40022 10.76C6.14022 10.92 5.99023 11.1899 5.99023 11.4899V14.7999C5.99023 15.3699 6.31024 15.89 6.82024 16.14L10.3202 17.89C10.4402 17.95 10.5702 17.9799 10.7102 17.9799C10.8702 17.9799 11.0202 17.9399 11.1602 17.8499C11.4202 17.6899 11.5702 17.4199 11.5702 17.1199V13.8099C11.5702 13.2399 11.2602 12.7299 10.7402 12.4699Z" fill={fillColor} />
            <path d="M17.5899 10.76C17.3299 10.6 17.0199 10.5899 16.7499 10.7199L13.2499 12.4699C12.7399 12.7299 12.4199 13.2399 12.4199 13.8099V17.1199C12.4199 17.4199 12.5699 17.6899 12.8299 17.8499C12.9699 17.9399 13.1199 17.9799 13.2799 17.9799C13.4099 17.9799 13.5399 17.95 13.6699 17.89L17.1699 16.14C17.6799 15.88 17.9999 15.3699 17.9999 14.7999V11.4899C17.9999 11.1899 17.8499 10.92 17.5899 10.76Z" fill={fillColor} />
        </svg>
    )
}

const AddProductLogo: React.FC<LogoProps> = ({ fillColor }) => {
    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill={fillColor} xmlns="http://www.w3.org/2000/svg">
            <path d="M22 15.7C22 15.69 21.99 15.68 21.98 15.67C21.94 15.61 21.89 15.55 21.84 15.5C21.83 15.49 21.82 15.47 21.81 15.46C21 14.56 19.81 14 18.5 14C17.24 14 16.09 14.52 15.27 15.36C14.48 16.17 14 17.28 14 18.5C14 19.34 14.24 20.14 14.65 20.82C14.87 21.19 15.15 21.53 15.47 21.81C15.49 21.82 15.5 21.83 15.51 21.84C15.56 21.89 15.61 21.93 15.67 21.98C15.67 21.98 15.67 21.98 15.68 21.98C15.69 21.99 15.7 22 15.71 22C16.46 22.63 17.43 23 18.5 23C20.14 23 21.57 22.12 22.35 20.82C22.58 20.43 22.76 20 22.87 19.55C22.96 19.21 23 18.86 23 18.5C23 17.44 22.63 16.46 22 15.7ZM20.18 19.23H19.25V20.2C19.25 20.61 18.91 20.95 18.5 20.95C18.09 20.95 17.75 20.61 17.75 20.2V19.23H16.82C16.41 19.23 16.07 18.89 16.07 18.48C16.07 18.07 16.41 17.73 16.82 17.73H17.75V16.84C17.75 16.43 18.09 16.09 18.5 16.09C18.91 16.09 19.25 16.43 19.25 16.84V17.73H20.18C20.59 17.73 20.93 18.07 20.93 18.48C20.93 18.89 20.6 19.23 20.18 19.23Z" fill={fillColor} />
            <path opacity="0.4" d="M19.3499 5.65995L13.0599 2.27C12.3999 1.91 11.5999 1.91 10.9299 2.27L4.63991 5.65995C4.17991 5.90995 3.8999 6.39998 3.8999 6.93998C3.8999 7.47998 4.17991 7.96995 4.63991 8.21995L10.9299 11.61C11.2599 11.79 11.6299 11.88 11.9899 11.88C12.3499 11.88 12.7199 11.79 13.0499 11.61L19.3399 8.21995C19.7999 7.96995 20.0799 7.47998 20.0799 6.93998C20.0999 6.39998 19.8099 5.90995 19.3499 5.65995Z" fill={fillColor} />
            <path opacity="0.4" d="M9.90021 12.79L4.05022 9.86001C3.60022 9.63001 3.08021 9.66001 2.65021 9.92001C2.22021 10.18 1.97021 10.64 1.97021 11.14V16.67C1.97021 17.63 2.50021 18.49 3.36021 18.92L9.21022 21.8401C9.41022 21.9401 9.63022 21.99 9.85022 21.99C10.1102 21.99 10.3702 21.92 10.6002 21.77C11.0302 21.51 11.2802 21.05 11.2802 20.55V15.02C11.2902 14.08 10.7602 13.22 9.90021 12.79Z" fill={fillColor} />
            <path opacity="0.4" d="M22.03 11.15V15.74C22.02 15.73 22.01 15.71 22 15.7C22 15.69 21.99 15.68 21.9799 15.67C21.9399 15.61 21.89 15.55 21.84 15.5C21.83 15.49 21.82 15.47 21.81 15.46C21 14.56 19.81 14 18.5 14C17.24 14 16.09 14.52 15.27 15.36C14.48 16.17 14 17.28 14 18.5C14 19.34 14.2399 20.14 14.6499 20.82C14.8199 21.11 15.0299 21.37 15.2599 21.61L14.7899 21.85C14.5899 21.95 14.3699 22 14.1499 22C13.8899 22 13.63 21.93 13.39 21.78C12.97 21.52 12.71 21.06 12.71 20.56V15.04C12.71 14.08 13.24 13.22 14.1 12.79L19.95 9.87C20.4 9.64 20.92 9.66 21.35 9.93C21.77 10.19 22.03 10.65 22.03 11.15Z" fill={fillColor} />
        </svg>
    )
}

const ResellerLogo: React.FC<LogoProps> = ({ fillColor }) => {
    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill={fillColor} xmlns="http://www.w3.org/2000/svg">
            <path opacity="0.4" d="M15.0002 22.75C14.7302 22.75 14.4802 22.6 14.3502 22.37C14.2202 22.14 14.2202 21.85 14.3602 21.62L15.4102 19.87C15.6202 19.51 16.0802 19.4 16.4402 19.61C16.8002 19.82 16.9102 20.28 16.7002 20.64L16.4302 21.09C19.1902 20.44 21.2602 17.96 21.2602 15C21.2602 14.59 21.6002 14.25 22.0102 14.25C22.4202 14.25 22.7602 14.59 22.7602 15C22.7502 19.27 19.2702 22.75 15.0002 22.75Z" fill={fillColor} />
            <path opacity="0.4" d="M2 9.75C1.59 9.75 1.25 9.41 1.25 9C1.25 4.73 4.73 1.25 9 1.25C9.27 1.25 9.51999 1.4 9.64999 1.63C9.77999 1.86 9.78 2.15 9.64 2.38L8.59 4.13C8.38 4.49001 7.92 4.60001 7.56 4.39001C7.2 4.18001 7.09 3.71999 7.3 3.35999L7.57001 2.90997C4.81001 3.55997 2.74001 6.04 2.74001 9C2.75001 9.41 2.41 9.75 2 9.75Z" fill={fillColor} />
            <path d="M10.6704 13.8499L7.53044 12.1599C7.20044 11.9799 6.80044 11.9799 6.47044 12.1599L3.33044 13.8499C3.10044 13.9699 2.96045 14.2199 2.96045 14.4899C2.96045 14.7599 3.10044 15.0099 3.33044 15.1299L6.47044 16.8199C6.64044 16.9099 6.82044 16.9499 7.00044 16.9499C7.18044 16.9499 7.36044 16.9099 7.53044 16.8199L10.6704 15.1299C10.9004 15.0099 11.0404 14.7599 11.0404 14.4899C11.0404 14.2199 10.8904 13.9799 10.6704 13.8499Z" fill={fillColor} />
            <path d="M5.95023 17.4099L3.03023 15.9499C2.81023 15.8399 2.55023 15.8499 2.33023 15.9799C2.12023 16.1099 1.99023 16.3399 1.99023 16.5899V19.3499C1.99023 19.8299 2.25022 20.2599 2.68022 20.4699L5.60023 21.9299C5.70023 21.9799 5.81023 22.0099 5.92023 22.0099C6.05023 22.0099 6.18023 21.9699 6.30023 21.8999C6.51023 21.7699 6.64023 21.5399 6.64023 21.2899V18.5299C6.65023 18.0499 6.38023 17.6199 5.95023 17.4099Z" fill={fillColor} />
            <path d="M11.6601 15.9799C11.4501 15.8499 11.1901 15.8399 10.9601 15.9499L8.04008 17.4099C7.61008 17.6199 7.3501 18.0499 7.3501 18.5299V21.2899C7.3501 21.5399 7.48009 21.7699 7.69009 21.8999C7.81009 21.9699 7.9401 22.0099 8.0701 22.0099C8.1801 22.0099 8.29009 21.9799 8.39009 21.9299L11.3101 20.4699C11.7401 20.2599 12.0001 19.8299 12.0001 19.3499V16.5899C12.0001 16.3399 11.8701 16.1099 11.6601 15.9799Z" fill={fillColor} />
            <path d="M20.6704 3.83001L17.5304 2.14C17.2004 1.96 16.8004 1.96 16.4704 2.14L13.3304 3.83001C13.1004 3.95001 12.9604 4.19996 12.9604 4.46996C12.9604 4.73996 13.1004 4.98998 13.3304 5.10998L16.4704 6.79998C16.6404 6.88998 16.8204 6.92998 17.0004 6.92998C17.1804 6.92998 17.3604 6.88998 17.5304 6.79998L20.6704 5.10998C20.9004 4.98998 21.0404 4.73996 21.0404 4.46996C21.0404 4.18996 20.8904 3.95001 20.6704 3.83001Z" fill={fillColor} />
            <path d="M15.9502 7.37999L13.0302 5.91997C12.8102 5.80997 12.5502 5.82 12.3302 5.95C12.1202 6.08 11.9902 6.30999 11.9902 6.55999V9.32C11.9902 9.8 12.2502 10.23 12.6802 10.44L15.6002 11.9C15.7002 11.95 15.8102 11.98 15.9202 11.98C16.0502 11.98 16.1802 11.94 16.3002 11.87C16.5102 11.74 16.6402 11.51 16.6402 11.26V8.49999C16.6502 8.01999 16.3802 7.58999 15.9502 7.37999Z" fill={fillColor} />
            <path d="M21.6601 5.95C21.4501 5.82 21.1901 5.80997 20.9601 5.91997L18.0401 7.37999C17.6101 7.58999 17.3501 8.01999 17.3501 8.49999V11.26C17.3501 11.51 17.4801 11.74 17.6901 11.87C17.8101 11.94 17.9401 11.98 18.0701 11.98C18.1801 11.98 18.2901 11.95 18.3901 11.9L21.3101 10.44C21.7401 10.23 22.0001 9.8 22.0001 9.32V6.55999C22.0001 6.30999 21.8701 6.08 21.6601 5.95Z" fill={fillColor} />
        </svg>
    )
}

const UserLogo: React.FC<LogoProps> = ({ fillColor }) => {
    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill={fillColor} xmlns="http://www.w3.org/2000/svg">
            <path opacity="0.4" d="M9 2C6.38 2 4.25 4.13 4.25 6.75C4.25 9.32 6.26 11.4 8.88 11.49C8.96 11.48 9.04 11.48 9.1 11.49C9.12 11.49 9.13 11.49 9.15 11.49C9.16 11.49 9.16 11.49 9.17 11.49C11.73 11.4 13.74 9.32 13.75 6.75C13.75 4.13 11.62 2 9 2Z" fill={fillColor} />
            <path d="M14.08 14.15C11.29 12.29 6.73996 12.29 3.92996 14.15C2.65996 15 1.95996 16.15 1.95996 17.38C1.95996 18.61 2.65996 19.75 3.91996 20.59C5.31996 21.53 7.15996 22 8.99996 22C10.84 22 12.68 21.53 14.08 20.59C15.34 19.74 16.04 18.6 16.04 17.36C16.03 16.13 15.34 14.99 14.08 14.15Z" fill={fillColor} />
            <path opacity="0.4" d="M19.9899 7.33998C20.1499 9.27998 18.7699 10.98 16.8599 11.21C16.8499 11.21 16.8499 11.21 16.8399 11.21H16.8099C16.7499 11.21 16.6899 11.21 16.6399 11.23C15.6699 11.28 14.7799 10.97 14.1099 10.4C15.1399 9.47998 15.7299 8.09998 15.6099 6.59998C15.5399 5.78998 15.2599 5.04998 14.8399 4.41998C15.2199 4.22998 15.6599 4.10998 16.1099 4.06998C18.0699 3.89998 19.8199 5.35998 19.9899 7.33998Z" fill={fillColor} />
            <path d="M21.9902 16.59C21.9102 17.56 21.2902 18.4 20.2502 18.97C19.2502 19.52 17.9902 19.78 16.7402 19.75C17.4602 19.1 17.8802 18.29 17.9602 17.43C18.0602 16.19 17.4702 15 16.2902 14.05C15.6202 13.52 14.8402 13.1 13.9902 12.79C16.2002 12.15 18.9802 12.58 20.6902 13.96C21.6102 14.7 22.0802 15.63 21.9902 16.59Z" fill={fillColor} />
        </svg>
    )
}

const HeatmapLogo: React.FC<LogoProps> = ({ fillColor }) => {
    return (
        <svg width="24" height="24" viewBox="0 0 24 24" fill={fillColor} xmlns="http://www.w3.org/2000/svg">
            <path opacity="0.4" d="M21 2V14.1C21 16 20 17 18.1 17H5.89999C3.99999 17 3 16 3 14.1V2H21Z" fill={fillColor} />
            <path d="M22 2.75H2C1.59 2.75 1.25 2.41 1.25 2C1.25 1.59 1.59 1.25 2 1.25H22C22.41 1.25 22.75 1.59 22.75 2C22.75 2.41 22.41 2.75 22 2.75Z" fill={fillColor} />
            <path d="M16.6698 22.34C16.5398 22.6 16.2698 22.75 15.9998 22.75C15.8898 22.75 15.7698 22.72 15.6698 22.67L11.9998 20.84L8.32976 22.67C8.22976 22.72 8.10978 22.75 7.99978 22.75C7.72978 22.75 7.45976 22.6 7.32976 22.34C7.13976 21.96 7.28979 21.51 7.66979 21.33L11.2498 19.54V17H12.7498V19.54L16.3298 21.33C16.7098 21.51 16.8598 21.96 16.6698 22.34Z" fill={fillColor} />
            <path d="M7.49993 11.7499C7.28993 11.7499 7.06994 11.6599 6.91994 11.4799C6.64994 11.1599 6.69992 10.6899 7.01992 10.4199L10.1699 7.78993C10.4599 7.54993 10.8299 7.44994 11.1799 7.50994C11.5399 7.56994 11.8499 7.78991 12.0399 8.10991L13.0899 9.85991L16.0199 7.41994C16.3399 7.14994 16.8099 7.19992 17.0799 7.51992C17.3499 7.83992 17.2999 8.30991 16.9799 8.57991L13.8299 11.2099C13.5399 11.4499 13.1699 11.5499 12.8199 11.4899C12.4599 11.4299 12.1499 11.2099 11.9599 10.8899L10.9099 9.13994L7.97994 11.5799C7.83994 11.6899 7.66993 11.7499 7.49993 11.7499Z" fill={fillColor} />
        </svg>
    )
}

export { HeatmapLogo, BrandOwnerLogo, UserLogo, ResellerLogo, AddProductLogo }
</file>

<file path="src/frontend/src/hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="src/frontend/src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/frontend/src/lib/validators.ts">
import * as z from "zod";

// Example: Basic string validation (non-empty)
export const requiredString = z.string().min(1, "This field is required");

// Example: Email validation
export const emailValidator = z.string().email("Invalid email address");

// Example: Password validation (e.g., min length)
export const passwordValidator = z.string().min(8, "Password must be at least 8 characters long");

// Example: Number validation (positive integer)
export const positiveInteger = z.number().int().positive("Must be a positive integer");

// Example: URL validation
export const urlValidator = z.string().url("Invalid URL format");

// Add more custom validation schemas as needed for the application
// e.g., specific formats, lengths, combinations, etc.
</file>

<file path="src/frontend/src/pages/unauthorized.tsx">
/**
 * @file Unauthorized access page
 * @fileoverview This page displays when a user attempts to access a route
 * for which they do not have the required permissions
 * 
 * Functions:
 * - UnauthorizedPage: Displays unauthorized message with options to go back
 * 
 * Constants:
 * - None
 * 
 * Flow:
 * 1. Display unauthorized message
 * 2. Provide options to go back or to dashboard
 * 
 * Error Handling:
 * - None
 * 
 * @module pages/unauthorized
 * @requires react-router-dom - For navigation
 * @exports {FC} UnauthorizedPage - Unauthorized page component
 */

import { useNavigate } from 'react-router-dom';
import { useAuthContext } from '../contexts/useAuthContext';

/**
 * Unauthorized page displayed when a user lacks permission
 * 
 * @returns {JSX.Element} Unauthorized page
 * @example
 * <UnauthorizedPage />
 */
const UnauthorizedPage = () => {
  const navigate = useNavigate();
  const { profile } = useAuthContext();

  const goBack = () => {
    navigate(-1);
  };

  const goToDashboard = () => {
    navigate('/dashboard');
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 px-4">
      <div className="bg-white p-8 rounded-lg shadow-md max-w-md w-full text-center">
        <div className="text-red-500 text-5xl mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-24 w-24 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
        </div>
        
        <h1 className="text-2xl font-bold text-gray-800 mb-2">Access Denied</h1>
        
        <p className="text-gray-600 mb-6">
          {profile ? 
            `Sorry, ${profile.first_name?.[0] || ''}, you don't have permission to access this page.` : 
            'Sorry, you don\'t have permission to access this page.'}
        </p>
        
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <button
            onClick={goBack}
            className="bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 rounded"
          >
            Go Back
          </button>
          
          <button
            onClick={goToDashboard}
            className="bg-cyan-500 hover:bg-cyan-600 text-white font-semibold py-2 px-4 rounded"
          >
            Go to Dashboard
          </button>
        </div>
      </div>
    </div>
  );
};

export default UnauthorizedPage;
</file>

<file path="src/frontend/src/pages/verify.tsx">
/**
 * @file Product verification page
 * @fileoverview Public page for verifying product authenticity using QR codes
 * 
 * Functions:
 * - VerifyPage: Main verification page component
 * - StatusBadge: Displays verification status
 * - ProductInfo: Displays product information
 * 
 * Constants:
 * - None
 * 
 * Flow:
 * 1. User scans product QR code using camera
 * 2. Code is verified with backend API
 * 3. Verification result is displayed to the user
 * 4. Additional product details are shown if authentic
 * 
 * Error Handling:
 * - Camera permission errors
 * - QR code scanning errors
 * - API verification errors
 * - Invalid code format errors
 * 
 * @module pages/verify
 * @requires components/QRCodeScanner - QR code scanner component
 * @requires api/productApi - Product verification API
 * @exports {FC} VerifyPage - Product verification page component
 */

import { useState } from 'react';
import QRCodeScanner from '../components/QRCodeScanner';
import { productApi } from '../api/productApi';
import type { ProductVerificationStatus } from '../../../declarations/TrustOrigin_backend/TrustOrigin_backend.did';
import { Link } from 'react-router-dom';

interface VerificationState {
  status: ProductVerificationStatus | null;
  isLoading: boolean;
  error: string | null;
  productInfo: any | null;
}

/**
 * Status badge component for verification results
 * 
 * @param {object} props - Component props
 * @param {ProductVerificationStatus | null} props.status - Verification status
 * @returns {JSX.Element} Status badge component
 */
const StatusBadge = ({ status }: { status: ProductVerificationStatus | null }) => {
  if (!status) return null;

  if ('FirstVerification' in status) {
    return (
      <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative flex items-center">
        <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
        </svg>
        <strong>Authentic Product</strong> - First verification
      </div>
    );
  }

  if ('MultipleVerification' in status) {
    return (
      <div className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative flex items-center">
        <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
        </svg>
        <strong>Authentic Product</strong> - Previously verified
      </div>
    );
  }

  if ('Invalid' in status) {
    return (
      <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative flex items-center">
        <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
        </svg>
        <strong>Invalid Product</strong> - Verification failed
      </div>
    );
  }

  return null;
};

/**
 * Product information component
 * 
 * @param {object} props - Component props
 * @param {any} props.product - Product information
 * @returns {JSX.Element} Product information component
 */
const ProductInfo = ({ product }: { product: any }) => {
  if (!product) return null;

  return (
    <div className="bg-white shadow-md rounded-lg p-6 mt-4">
      <h2 className="text-xl font-semibold mb-4">{product.name}</h2>
      
      <div className="mb-4">
        <h3 className="text-sm font-medium text-gray-500">Description</h3>
        <p className="mt-1">{product.description}</p>
      </div>
      
      <div className="grid grid-cols-2 gap-4 mb-4">
        <div>
          <h3 className="text-sm font-medium text-gray-500">Category</h3>
          <p className="mt-1">{product.category}</p>
        </div>
        <div>
          <h3 className="text-sm font-medium text-gray-500">Manufacturer</h3>
          <p className="mt-1">{product.organization}</p>
        </div>
      </div>
      
      {product.metadata && Object.keys(product.metadata).length > 0 && (
        <div>
          <h3 className="text-sm font-medium text-gray-500 mb-2">Additional Details</h3>
          <div className="bg-gray-50 rounded p-3">
            {Object.entries(product.metadata).map(([key, value]) => (
              <div key={key} className="grid grid-cols-2 gap-2 mb-1">
                <span className="text-sm font-medium">{key}:</span>
                <span className="text-sm">{value as string}</span>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

/**
 * Product verification page with QR scanner
 * 
 * @returns {JSX.Element} Verification page component
 */
const VerifyPage = () => {
  const [verification, setVerification] = useState<VerificationState>({
    status: null,
    isLoading: false,
    error: null,
    productInfo: null
  });
  const [showScanner, setShowScanner] = useState(true);

  const handleScan = async (result: string) => {
    try {
      setVerification({
        ...verification,
        isLoading: true,
        error: null
      });
      
      // Temporarily hide the scanner to prevent multiple scans
      setShowScanner(false);
      
      // Verify the product
      const verificationResult = await productApi.verifyProduct(result);
      
      setVerification({
        status: verificationResult.status,
        isLoading: false,
        error: verificationResult.error || null,
        productInfo: verificationResult.productInfo || null
      });
    } catch (error) {
      setVerification({
        ...verification,
        isLoading: false,
        error: error instanceof Error ? error.message : "Unknown error"
      });
    }
  };

  const handleScanError = (error: string) => {
    setVerification({
      ...verification,
      isLoading: false,
      error
    });
  };

  const resetScanner = () => {
    setVerification({
      status: null,
      isLoading: false,
      error: null,
      productInfo: null
    });
    setShowScanner(true);
  };

  return (
    <div className="max-w-lg mx-auto p-4">
      <div className="text-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Product Verification</h1>
        <p className="text-gray-600">Scan a product QR code to verify its authenticity</p>
      </div>

      {verification.isLoading && (
        <div className="flex justify-center items-center py-8">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cyan-500"></div>
          <span className="ml-3 text-gray-700">Verifying product...</span>
        </div>
      )}

      {verification.error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          <p className="font-bold">Error</p>
          <p>{verification.error}</p>
          <button 
            onClick={resetScanner}
            className="mt-2 bg-red-500 hover:bg-red-600 text-white py-1 px-3 rounded text-sm"
          >
            Try Again
          </button>
        </div>
      )}

      {verification.status && (
        <div className="mb-4">
          <StatusBadge status={verification.status} />
          
          {verification.productInfo && (
            <ProductInfo product={verification.productInfo} />
          )}
          
          <div className="mt-6 flex flex-col sm:flex-row gap-3 justify-center">
            <button 
              onClick={resetScanner}
              className="bg-cyan-500 hover:bg-cyan-600 text-white py-2 px-4 rounded"
            >
              Scan Another Product
            </button>
            
            <Link 
              to="/"
              className="bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 px-4 rounded text-center"
            >
              Return to Home
            </Link>
          </div>
        </div>
      )}

      {showScanner && !verification.isLoading && (
        <div className="mt-4">
          <QRCodeScanner 
            onScan={handleScan} 
            onError={handleScanError}
            height="350px"
          />
        </div>
      )}
    </div>
  );
};

export default VerifyPage;
</file>

<file path="src/frontend/src/types/global.d.ts">
// Global polyfill type definitions
interface Window {
  global: typeof globalThis;
}
</file>

<file path="src/frontend/src/utils.ts">
import type { UserResult, User } from "../../declarations/TrustOrigin_backend/TrustOrigin_backend.did";

export function handleUserResult(result: UserResult): User | null {
    if ('none' in result) {
        return null;
    }
    if ('user' in result) {
        return result.user;
    }
    if ('error' in result) {
        throw new Error(result.error.message)
    }
    throw new Error('Malformed result!')
}
</file>

<file path="src/frontend/src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="src/frontend/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="src/frontend/components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="src/frontend/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config({
  extends: [js.configs.recommended, ...tseslint.configs.recommended],
  files: ['**/*.{ts,tsx}'],
  ignores: ['dist'],
  languageOptions: {
    ecmaVersion: 2020,
    globals: globals.browser,
  },
  plugins: {
    'react-hooks': reactHooks,
    'react-refresh': reactRefresh,
  },
  rules: {
    ...reactHooks.configs.recommended.rules,
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
})
</file>

<file path="src/frontend/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/true-origin.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lexend:wght@100..900&display=swap" rel="stylesheet">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>True Origin</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="src/frontend/postcss.config.cjs">
module.exports = {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    }
}
</file>

<file path="src/frontend/tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path=".nvmrc">
16.20.0
</file>

<file path=".repomixignore">
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/

src/backend
*.toml
*lock*
*.yaml
*.md
.dfx/
.idea/
node_modules/
target/
*output*
*.svg
*.png
tasks/
</file>

<file path="canister_ids.json">
{
    "backend": {
      "ic": "wwf6q-riaaa-aaaap-qpywq-cai"
    },
    "frontend": {
      "ic": "w7gvm-haaaa-aaaap-qpyxa-cai"
    }
  }
</file>

<file path="repomix.config.json">
{
  "input": {
    "maxFileSize": 52428800
  },
  "output": {
    "filePath": "repomix-output.xml",
    "style": "xml",
    "parsableStyle": false,
    "fileSummary": true,
    "directoryStructure": true,
    "files": true,
    "removeComments": false,
    "removeEmptyLines": false,
    "compress": false,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "copyToClipboard": false,
    "git": {
      "sortByChanges": true,
      "sortByChangesMaxCommits": 100
    }
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  },
  "security": {
    "enableSecurityCheck": true
  },
  "tokenCount": {
    "encoding": "o200k_base"
  }
}
</file>

<file path="src/frontend/src/components/Filters.tsx">
import React from 'react';
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { cn } from '@/lib/utils';

/**
 * Represents a single option within a filter dropdown.
 */
interface FilterOption {
    /** The visible text label for the option. */
    label: string;
    /** The value associated with the option. */
    value: string;
}

/**
 * Represents a single filter category with its options.
 */
interface Filter {
    /** The placeholder label displayed on the dropdown. */
    label: string;
    /** An array of FilterOption objects for the dropdown. */
    options: FilterOption[];
}

/**
 * Props for the Filters component.
 */
interface FiltersProps {
    /** An array of Filter objects defining the available filters. */
    filters: Filter[];
    /** Callback function invoked when the 'Apply' button is clicked. Receives an array of selected values. */
    onApply: (selectedValues: string[]) => void;
    /** Optional className for the container div */
    className?: string;
}

/**
 * Renders a row of dropdown filters with an Apply button, using shadcn/ui components.
 *
 * @param filters - The filter definitions.
 * @param onApply - Callback function for applying filters.
 * @param className - Optional additional classes for the container.
 */
const Filters: React.FC<FiltersProps> = ({ filters, onApply, className }) => {
    // Initialize state with empty strings for each filter
    const [selectedValues, setSelectedValues] = React.useState<Record<string, string>>(() =>
        filters.reduce((acc, filter) => {
            acc[filter.label] = "";
            return acc;
        }, {} as Record<string, string>)
    );

    // Handle select change using the filter label as the key
    const handleSelectChange = (filterLabel: string, value: string) => {
        setSelectedValues(prevValues => ({
            ...prevValues,
            [filterLabel]: value,
        }));
    };

    // Prepare values array for onApply callback
    const handleApply = () => {
        // Convert the selectedValues object back to an array in the original filter order
        const orderedValues = filters.map(filter => selectedValues[filter.label] || "");
        onApply(orderedValues);
    };

    return (
        <div className={cn("flex flex-wrap items-center gap-4 mb-6", className)}> {/* Use gap and flex-wrap */}
            <p className="text-lg font-medium">Filter By:</p> {/* Adjusted text style */}
            {filters.map((filter) => (
                <Select
                    key={filter.label}
                    value={selectedValues[filter.label]} // Use filter label as key
                    onValueChange={(value) => handleSelectChange(filter.label, value)}
                >
                    <SelectTrigger className="w-full sm:w-[180px]"> {/* Fixed width for consistency */}
                        <SelectValue placeholder={filter.label} />
                    </SelectTrigger>
                    <SelectContent>
                        {/* Optional: Add an 'All' option */}
                        {/* <SelectItem value="all">All {filter.label}</SelectItem> */}
                        {filter.options.map((option) => (
                            <SelectItem key={option.value} value={option.value}>
                                {option.label}
                            </SelectItem>
                        ))}
                    </SelectContent>
                </Select>
            ))}
            <Button onClick={handleApply}> {/* Use shadcn Button, removed hardcoded color */}
                Apply
            </Button>
        </div>
    );
};

export default Filters;
</file>

<file path="src/frontend/src/components/QRCodeScanner.tsx">
/**
 * @file QR Code Scanner component
 * @fileoverview Component that provides QR code scanning functionality using the device camera
 * 
 * Functions:
 * - QRCodeScanner: Main scanner component
 * 
 * Constants:
 * - None
 * 
 * Flow:
 * 1. Request camera access
 * 2. Initialize QR code scanner
 * 3. Detect and process QR codes
 * 4. Call onScan callback with result
 * 
 * Error Handling:
 * - Camera access denied
 * - Scanner initialization errors
 * - Invalid QR code formats
 * 
 * @module components/QRCodeScanner
 * @requires react - Core React library
 * @requires html5-qrcode - QR code scanning library
 * @exports {FC} QRCodeScanner - QR code scanner component
 */

import { useEffect, useRef, useState } from 'react';
import { Html5Qrcode, Html5QrcodeScannerState } from 'html5-qrcode';
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Camera, AlertCircle } from 'lucide-react';

interface QRCodeScannerProps {
  onScan: (result: string) => void;
  onError?: (error: string) => void;
  width?: string;
  height?: string;
  fps?: number;
  qrbox?: number;
  disableFlip?: boolean;
}

/**
 * QR Code Scanner component using device camera
 * 
 * Provides a camera view that scans for QR codes and returns results
 * via the onScan callback.
 * 
 * @param {Function} onScan - Callback function for successful scan
 * @param {Function} onError - Optional callback function for errors
 * @param {string} width - Optional width of scanner element
 * @param {string} height - Optional height of scanner element
 * @param {number} fps - Optional frames per second for scanning
 * @param {number} qrbox - Optional QR box size in pixels
 * @param {boolean} disableFlip - Optional flag to disable image flipping
 * @returns {JSX.Element} QR code scanner component
 * @example
 * <QRCodeScanner
 *   onScan={(result) => console.log(result)}
 *   onError={(error) => console.error(error)}
 *   width="100%"
 *   height="300px"
 * />
 */
const QRCodeScanner = ({
  onScan,
  onError,
  width = '100%',
  height = '300px',
  fps = 10,
  qrbox = 250,
  disableFlip = false
}: QRCodeScannerProps) => {
  const scannerRef = useRef<Html5Qrcode | null>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [permissionGranted, setPermissionGranted] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isRequesting, setIsRequesting] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);
  const scannerId = useRef(`qr-scanner-${Math.random().toString(36).substring(2, 9)}`);

  // Function to request camera permission explicitly
  const requestCameraPermission = async () => {
    try {
      setIsRequesting(true);
      // Explicitly request camera permission
      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      // Stop the stream immediately as we just need the permission
      stream.getTracks().forEach(track => track.stop());
      setError(null);
      initializeScanner();
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Camera permission denied';
      setError(errorMessage);
      if (onError) onError(errorMessage);
    } finally {
      setIsRequesting(false);
    }
  };

  // Initialize the scanner after permissions are granted
  const initializeScanner = () => {
    // Create scanner container if it doesn't exist
    if (!document.getElementById(scannerId.current) && containerRef.current) {
      const scannerElement = document.createElement('div');
      scannerElement.id = scannerId.current;
      containerRef.current.appendChild(scannerElement);
    }

    // Initialize scanner
    if (!scannerRef.current) {
      scannerRef.current = new Html5Qrcode(scannerId.current);
    }

    // Start scanner
    startScanner();
  };

  // Start the scanner
  const startScanner = async () => {
    try {
      setIsScanning(true);
      await scannerRef.current?.start(
        { facingMode: 'environment' },
        {
          fps,
          qrbox,
          disableFlip,
          aspectRatio: 1
        },
        (decodedText) => {
          // Successfully scanned QR code
          onScan(decodedText);
        },
        () => {
          // QR code not found - continue scanning
        }
      );
      setPermissionGranted(true);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error';
      setError(errorMessage);
      if (onError) onError(errorMessage);
    }
  };

  useEffect(() => {
    // Initialize scanner on mount
    requestCameraPermission();

    // Clean up scanner on unmount
    return () => {
      if (
        scannerRef.current &&
        scannerRef.current.getState() !== Html5QrcodeScannerState.NOT_STARTED
      ) {
        scannerRef.current
          .stop()
          .then(() => {
            scannerRef.current = null;
          })
          .catch((err) => {
            console.error('Error stopping scanner:', err);
          });
      }
    };
  }, [fps, qrbox, disableFlip, onScan, onError]);

  return (
    <div className="qr-scanner-container w-full max-w-md mx-auto">
      {error && (
        <Alert variant="destructive" className="mb-4">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error Accessing Camera</AlertTitle>
          <AlertDescription>
            {error}. Please ensure camera permissions are enabled for this site.
          </AlertDescription>
          <Button
            onClick={requestCameraPermission}
            variant="destructive"
            className="mt-3 w-full"
            disabled={isRequesting}
          >
            {isRequesting ? 'Requesting Access...' : 'Retry Camera Permission'}
          </Button>
        </Alert>
      )}
      
      <div 
        ref={containerRef}
        className="qr-scanner relative overflow-hidden rounded-lg bg-black"
        style={{ 
          width, 
          height,
        }}
      >
        {!permissionGranted && !error && (
          <div className="absolute inset-0 flex flex-col items-center justify-center bg-black bg-opacity-70 text-white p-4 text-center">
            <Camera className="h-12 w-12 mb-4 text-gray-400" />
            <p className="mb-4">
              {isRequesting ? 'Requesting camera permission...' : 'Camera access is required for scanning'}
            </p>
            {!isRequesting && !permissionGranted && (
              <Button
                onClick={requestCameraPermission}
                className="w-full"
              >
                Allow Camera Access
              </Button>
            )}
          </div>
        )}
        
        {/* Scanner target indicator */}
        {isScanning && !error && permissionGranted && (
          <div className="absolute left-1/2 top-1/2 transform -translate-x-1/2 -translate-y-1/2 pointer-events-none">
            <div className="w-64 h-64 border-2 border-white rounded-lg opacity-70"></div>
          </div>
        )}
      </div>
      
      <p className="text-center text-sm mt-2 text-muted-foreground">
        Position the QR code within the frame to scan
      </p>
    </div>
  );
};

export default QRCodeScanner;
</file>

<file path="src/frontend/src/components/Sidebar.tsx">
import logo from "../assets/true-origin.png"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { LogOut } from 'lucide-react'; // Placeholder icon
import { useAuthContext } from "../contexts/useAuthContext";

/**
 * Represents a single navigation item in the sidebar menu.
 */
type MenuItem = {
    /** The visible text label for the menu item. */
    label: string;
    /** A React component representing the icon for the menu item. */
    icon: React.ComponentType<{ fillColor: string }>;
    /** Whether the menu item is currently active/selected. */
    active: boolean;
    /** Function to call when the menu item is clicked. Receives the item's label. */
    onClickEvent: (label: string) => void;
}

/**
 * Props for the Sidebar component.
 */
type SidebarProps = {
    /** An array of MenuItem objects defining the navigation structure. */
    menuItems: MenuItem[];
    /** URL for the user's avatar image. */
    userAvatar: string;
    /** The principal ID of the logged-in user. */
    principalId: string;
    /** Whether the sidebar is collapsed (optional). */
    collapsed?: boolean;
    /** Callback when a menu item is clicked, useful for mobile views (optional). */
    onItemClick?: () => void;
}

/**
 * Renders the main application sidebar navigation.
 *
 * @param menuItems - Array of navigation items.
 * @param userAvatar - URL for the user's avatar.
 * @param principalId - Principal ID of the user.
 * @param collapsed - Whether the sidebar is in collapsed state.
 * @param onItemClick - Optional callback when a menu item is clicked.
 */
const Sidebar: React.FC<SidebarProps> = ({ 
    menuItems, 
    userAvatar, 
    principalId,
    collapsed = false,
    onItemClick
}) => {
    const { logout } = useAuthContext();

    const handleMenuItemClick = (item: MenuItem) => {
        item.onClickEvent(item.label);
        if (onItemClick) onItemClick();
    };

    const handleLogout = async () => {
        await logout();
    };

    // We don't need to check for principalId existence here since it has a default value from the parent
    // The loading/anonymous states are already handled in BrandOwnerLayout
    const shortPrincipalId = principalId && principalId.length > 10 && principalId !== 'Loading...' && principalId !== 'Anonymous'
        ? `${principalId.slice(0, 5)}...${principalId.slice(-5)}` 
        : principalId;

    // Get first letter of principalId for avatar fallback, or use a default
    const getAvatarFallback = () => {
        if (!principalId || principalId === 'Loading...' || principalId === 'Anonymous') {
            return principalId === 'Loading...' ? '...' : 'A';
        }
        return principalId.charAt(0).toUpperCase();
    };

    return (
        <aside className={`${collapsed ? 'w-20' : 'w-64'} bg-white h-screen shadow-md flex flex-col justify-between transition-all duration-300 ease-in-out`}>
            <div>
                <div className={`p-4 flex items-center ${collapsed ? 'justify-center' : 'justify-center'}`}>
                    <img src={logo} className={collapsed ? "max-w-[40px]" : "max-w-[180px]"} alt="TrueOrigin Logo" />
                </div>
                <nav className="mt-8">
                    <ul className={`${collapsed ? 'p-2' : 'p-5'}`}>
                        {menuItems.map((item, index) => (
                            <li
                                key={index}
                                className={`flex items-center p-2 ${
                                  item.active
                                    ? "text-primary bg-indigo-100 font-semibold"
                                    : "text-gray-600 hover:bg-gray-100 hover:text-gray-900"
                                } rounded-lg ${collapsed ? 'justify-center' : 'gap-2'} mt-2 cursor-pointer`}
                                onClick={() => handleMenuItemClick(item)}
                                title={collapsed ? item.label : undefined}
                            >
                                <item.icon fillColor={item.active ? "#2C42C0" : "currentColor"} />
                                {!collapsed && <span>{item.label}</span>}
                            </li>
                        ))}
                    </ul>
                </nav>
            </div>
            <div className={`p-4 border-t border-gray-200 ${collapsed ? 'flex flex-col items-center' : 'flex items-center'}`}>
                <Avatar className="h-10 w-10">
                    <AvatarImage src={userAvatar} alt={principalId} />
                    <AvatarFallback>{getAvatarFallback()}</AvatarFallback>
                </Avatar>
                {!collapsed && (
                    <>
                        <div className="ml-3">
                            <p className="text-sm font-medium text-gray-900" title={principalId}>{shortPrincipalId}</p>
                            <p className="text-xs text-muted-foreground">Principal ID</p>
                        </div>
                        <Button variant="ghost" size="icon" className="ml-auto rounded-full" onClick={handleLogout}>
                            <LogOut className="h-5 w-5" />
                        </Button>
                    </>
                )}
                {collapsed && (
                    <Button variant="ghost" size="icon" className="mt-2 rounded-full" onClick={handleLogout}>
                        <LogOut className="h-5 w-5" />
                    </Button>
                )}
            </div>
        </aside>
    );
};

export default Sidebar
</file>

<file path="src/frontend/src/hooks/useAuth.ts">
/**
 * @file Authentication hook
 * @fileoverview Custom hook for managing user authentication state
 * 
 * Functions:
 * - useAuth: Main hook for authentication
 * 
 * Constants:
 * - None
 * 
 * Flow:
 * 1. Initialize auth context
 * 2. Provide user login/logout functionality
 * 3. Cache authentication state
 * 4. Load user profile and organization data
 * 
 * Error Handling:
 * - Login errors
 * - Session expiration
 * - Network issues
 * 
 * @module hooks/useAuth
 * @requires react - React library
 * @requires TrustOrigin_backend - Backend canister
 * @exports {Hook} useAuth - Authentication hook
 */

import { useState } from 'react';
import { useAuthContext } from '../contexts/useAuthContext';

// Define frontend-specific user types
export interface Organization {
  id: string;
  name: string;
  role: 'Owner' | 'Member';
}

export interface User {
  id: string;
  name: string;
  email: string;
  isAdmin: boolean;
  // Add organization property
  organization?: Organization;
  [key: string]: any;
}

/**
 * Authentication hook that provides authentication state and methods
 * This hook acts as a wrapper around the AuthContext for components
 * that need authentication functionality
 * 
 * @returns Authentication state and methods
 */
const useAuth = () => {
  const { 
    isAuthenticated, 
    isLoading: isAuthenticating,
    profile,
    login,
    logout
  } = useAuthContext();
  
  const [error, setError] = useState<string | null>(null);

  // Transform backend profile to frontend user format
  let user: User | null = null;
  
  if (profile) {
    // Create a user object with required properties
    const userObj = {
      id: profile.id.toString(),
      name: profile.first_name && profile.last_name && profile.first_name[0] && profile.last_name[0] ? 
        `${profile.first_name[0]} ${profile.last_name[0]}` : 
        'Unknown User',
      email: profile.email && profile.email[0] ? profile.email[0] : '',
      isAdmin: !!(profile.user_role && 
               profile.user_role.length > 0 && 
               profile.user_role[0] && 
               'Admin' in profile.user_role[0])
    } as User;
    
    // Add organization property for brand owners
    if (profile.user_role && 
        profile.user_role.length > 0 && 
        profile.user_role[0] && 
        'BrandOwner' in profile.user_role[0] &&
        profile.org_ids && 
        profile.org_ids.length > 0) {
      
      userObj.organization = {
        id: profile.org_ids[0].toString(),
        name: profile.org_ids[0].toString(),
        role: 'Owner'
      };
    }
    
    user = userObj;
  }

  // Wrapper for login to handle errors
  const handleLogin = async () => {
    try {
      setError(null);
      login();
    } catch (err) {
      console.error('Login error:', err);
      setError('Failed to login. Please try again.');
    }
  };

  // Wrapper for logout to handle errors
  const handleLogout = async () => {
    try {
      setError(null);
      await logout();
    } catch (err) {
      console.error('Logout error:', err);
      setError('Failed to logout. Please try again.');
    }
  };

  return {
    isAuthenticated: !!isAuthenticated,
    isAuthenticating,
    user,
    login: handleLogin,
    logout: handleLogout,
    error
  };
};

export default useAuth;
</file>

<file path="src/frontend/src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%
  }
}
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="src/frontend/tailwind.config.js">
import { transform } from 'typescript'

/** @type {import('tailwindcss').Config} */
export default {
    darkMode: ["class"],
    content: ["./src/**/*.{html,js,ts,tsx}"],
  theme: {
  	extend: {
  		fontFamily: {
  			lexend: [
  				'Lexend',
  				'sans-serif'
  			]
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
}
</file>

<file path="src/frontend/tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
  },
  "include": ["src"]
}
</file>

<file path="src/frontend/tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path=".gitignore">
# Various IDEs and Editors
.vscode/
.idea/
**/*~

# Mac OSX temporary files
.DS_Store
**/.DS_Store

# dfx temporary files
.dfx/

# rust
target/

# frontend code
node_modules/
dist/
.svelte-kit/

# environment variables
.env

# Cursor Rules
.cursor
</file>

<file path="dfx.json">
{
  "canisters": {
    "TrustOrigin_backend": {
      "candid": "src/backend/backend.did",
      "package": "TrustOrigin_backend",
      "type": "rust"
    },
    "internet_identity": {
      "candid": "https://github.com/dfinity/internet-identity/releases/latest/download/internet_identity.did",
      "frontend": {},
      "remote": {
          "id": {
              "ic": "rdmx6-jaaaa-aaaaa-aaadq-cai"
          }
      },
      "type": "custom",
      "wasm": "https://github.com/dfinity/internet-identity/releases/latest/download/internet_identity_dev.wasm.gz"
    }
  },
  "defaults": {
    "build": {
      "args": "",
      "packtool": ""
    }
  },
  "output_env_file": ".env",
  "version": 1
}
</file>

<file path="package.json">
{
    "engines": {
        "node": ">=16.0.0",
        "npm": ">=7.0.0",
        "pnpm": ">=7.0.0",
        "husky": "9.1.4"
    },
    "name": "trustorigin",
    "scripts": {
        "setup-declarations": "dfx generate TrustOrigin_backend",
        "dev": "npm run dev --workspaces --if-present",
        "build": "npm run build --workspaces --if-present",
        "prebuild": "npm run prebuild --workspaces --if-present",
        "pretest": "npm run prebuild --workspaces --if-present",
        "start": "npm start --workspaces --if-present",
        "test": "npm test --workspaces --if-present",
        "prepare": "husky"
    },
    "type": "module",
    "workspaces": [
        "src/frontend"
    ],
    "dependencies": {
        "@dfinity/agent": "^2.0.0"
    },
    "devDependencies": {
        "husky": "^9.1.4"
    },
    "packageManager": "pnpm@9.7.1+sha512.faf344af2d6ca65c4c5c8c2224ea77a81a5e8859cbc4e06b1511ddce2f0151512431dd19e6aff31f2c6a8f5f2aced9bd2273e1fed7dd4de1868984059d2c4247"
}
</file>

<file path="src/frontend/src/components/LandingCard.tsx">
import {
    Card,
    CardDescription,
    CardHeader,
    CardTitle,
} from "@/components/ui/card"
import { cn } from "@/lib/utils";

/**
 * Props for the LandingCard component.
 */
type LandingCardProps = {
    /** The main title displayed on the card. */
    title: string;
    /** The descriptive text content of the card. */
    description: string;
    /** URL for the image displayed at the bottom of the card. */
    image: string;
};

/**
 * Renders a card component specifically designed for the landing page,
 * displaying a title, description, and an image.
 *
 * @param title - The card title.
 * @param description - The card description.
 * @param image - URL for the card image.
 */
const LandingCard: React.FC<LandingCardProps> = ({ title, description, image }) => {
    return (
        <Card className={cn(
            "bg-white text-card-foreground",
            "rounded-2xl shadow-lg",
            "flex flex-col justify-between h-full overflow-hidden",
            "transition-transform duration-300 hover:shadow-xl hover:-translate-y-1"
        )}>
            <CardHeader className="pt-8 px-8">
                <CardTitle className="text-2xl md:text-3xl font-lexend font-bold mb-3">{title}</CardTitle>
                <CardDescription className="text-base text-gray-600">{description}</CardDescription>
            </CardHeader>
            <div className="mt-auto">
                <img 
                    src={image} 
                    alt={title} 
                    className="w-full h-auto object-cover" 
                />
            </div>
        </Card>
    )
}

export default LandingCard
</file>

<file path="src/frontend/src/contexts/useAuthContext/index.tsx">
import React, { createContext, useContext, useState, useCallback, useMemo, useEffect } from 'react';
import { AuthClient } from '@dfinity/auth-client';

import {
  AuthContextInterface,
  AuthContextProviderProps,
} from './interface';
import { TrustOrigin_backend } from '../../../../declarations/TrustOrigin_backend';
import type { OrganizationInput, ResellerInput, User, UserDetailsInput, UserRole } from '../../../../declarations/TrustOrigin_backend/TrustOrigin_backend.did';
import { handleUserResult } from '../../utils';
import { Principal } from '@dfinity/principal';

const AuthContext = createContext({} as AuthContextInterface);

// eslint-disable-next-line react-refresh/only-export-components
export const useAuthContext = () => useContext(AuthContext);

// 7 days in nanoseconds
const MAX_TTL = BigInt(7 * 24 * 60 * 60 * 1000 * 1000 * 1000);

export const AuthContextProvider: React.FC<AuthContextProviderProps> = ({children}) => {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>();
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [authClient, setAuthClient] = useState<AuthClient>();
  const [profile, setProfile] = useState<User | null>(null);
  const IDENTITY_PROVIDER = useMemo(() => 
    process.env.DFX_NETWORK === 'local'
    ? `http://${process.env.CANISTER_ID_INTERNET_IDENTITY}.localhost:4943`
    : `https://identity.ic0.app`
  , []);

  // Check if user has a specific role
  const hasRole = useCallback((role: UserRole) => {
    if (!profile || !profile.user_role.length) return false;
    const userRole = profile.user_role[0];
    
    // Check if the roles match
    if ('Admin' in role && 'Admin' in userRole) return true;
    if ('BrandOwner' in role && 'BrandOwner' in userRole) return true;
    if ('Reseller' in role && 'Reseller' in userRole) return true;
    
    return false;
  }, [profile]);

  // Login with Internet Identity
  const login = useCallback(() => {
    if (!authClient) return;
    setIsLoading(true);
    
    authClient.login({
      identityProvider: IDENTITY_PROVIDER,
      onSuccess: async () => {
        setIsAuthenticated(true);
        try {
          const user = await TrustOrigin_backend.register();
          setProfile(user);
        } catch (error) {
          console.error('Failed to register user:', error);
        } finally {
          setIsLoading(false);
        }
      },
      onError: (error) => {
        console.error('Login failed:', error);
        setIsLoading(false);
      },
      maxTimeToLive: MAX_TTL,
    });
  }, [authClient, IDENTITY_PROVIDER]);

  // Get user profile information
  const getProfile = useCallback(async () => {
    if (!authClient) return;
    setIsLoading(true);

    try {
      const principal = authClient.getIdentity().getPrincipal();
      if (principal.isAnonymous()) {
        setProfile(null);
        setIsLoading(false);
        return;
      }

      const responseData = await TrustOrigin_backend.whoami();
      if ('err' in responseData) {
        setProfile(null);
      } else if (responseData.length > 0) {
        setProfile(responseData[0] as User);
      }
    } catch (error) {
      console.error('Failed to get profile:', error);
      setProfile(null);
    } finally {
      setIsLoading(false);
    }
  }, [authClient]);

  // Create user profile
  const createProfile = useCallback(async (input: Partial<UserDetailsInput>) => {
    if (!authClient) return;
    setIsLoading(true);

    try {
      const responseData = await TrustOrigin_backend.register();
      if (input.first_name) { // only fill in the user details, if the user chooses to do so
        const result = handleUserResult(await TrustOrigin_backend.update_self_details(input as UserDetailsInput))
        if (result) {
          setProfile(result);
        }
      } else {
        setProfile(responseData);
      }
    } catch (error) {
      console.error('Failed to create profile:', error);
    } finally {
      setIsLoading(false);
    }
  }, [authClient]);

  // Update user profile
  const updateProfile = useCallback(async (input: UserDetailsInput) => {
    if (!authClient || !input.first_name) return;
    setIsLoading(true);

    try {
      const result = handleUserResult(await TrustOrigin_backend.update_self_details(input as UserDetailsInput))
      if (result) {
        setProfile(result);
      }
    } catch (error) {
      console.error('Failed to update profile:', error);
    } finally {
      setIsLoading(false);
    }
  }, [authClient]);

  // Set user role
  const setSelfRole = useCallback(async (userRole: UserRole) => {
    setIsLoading(true);
    try {
      const result = handleUserResult(await TrustOrigin_backend.set_self_role(userRole));
      if (result) {
        setProfile(result);
      }
    } catch (error) {
      console.error('Failed to set role:', error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Logout user
  const logout = useCallback(async () => {
    if (!authClient) return;
    
    try {
      await authClient.logout();
      setIsAuthenticated(false);
      setProfile(null);
    } catch (error) {
      console.error('Logout failed:', error);
    }
  }, [authClient]);

  // Register as a brand owner
  const signinAsBrandOwner = useCallback(async (input: OrganizationInput) => {
    setIsLoading(true);
    try {
      const result = handleUserResult(await TrustOrigin_backend.register_as_organization(input));
      if (result) {
        setProfile(result);
      }
    } catch (error) {
      console.error('Failed to register as brand owner:', error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Register as a reseller
  const signinAsReseller = useCallback(async (input: ResellerInput) => {
    setIsLoading(true);
    try {
      const result = handleUserResult(await TrustOrigin_backend.register_as_reseller({
        ...input,
        org_id: Principal.anonymous(),
      }));
      if (result) {
        setProfile(result);
      }
    } catch (error) {
      console.error('Failed to register as reseller:', error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Initialize Auth Client
  useEffect(() => {
    const initAuthClient = async () => {
      setIsLoading(true);
      try {
        const client = await AuthClient.create();
        setAuthClient(client);
        
        const isAnonymous = client.getIdentity().getPrincipal().isAnonymous();
        setIsAuthenticated(!isAnonymous);
        
        if (!isAnonymous) {
          try {
            const responseData = await TrustOrigin_backend.whoami();
            if ('err' in responseData) {
              setProfile(null);
            } else if (responseData.length > 0) {
              setProfile(responseData[0] as User);
            }
          } catch (error) {
            console.error('Failed to get profile during initialization:', error);
            setProfile(null);
          }
        }
      } catch (error) {
        console.error('Failed to initialize auth client:', error);
      } finally {
        setIsLoading(false);
      }
    };

    initAuthClient();
    // No dependencies to avoid infinite re-renders
  }, []);

  // Update profile when auth client changes
  useEffect(() => {
    if (authClient && !authClient.getIdentity().getPrincipal().isAnonymous()) {
      getProfile();
    }
  }, [authClient, getProfile]);

  const contextValue = useMemo(() => ({
    profile,
    authClient,
    isAuthenticated,
    isLoading,
    hasRole,
    createProfile,
    updateProfile,
    setSelfRole,
    signinAsBrandOwner,
    signinAsReseller,
    login,
    logout,
  }), [
    profile, 
    authClient, 
    isAuthenticated, 
    isLoading,
    hasRole,
    createProfile, 
    updateProfile, 
    setSelfRole, 
    signinAsBrandOwner, 
    signinAsReseller, 
    login, 
    logout
  ]);

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};
</file>

<file path="src/frontend/src/contexts/useAuthContext/interface.d.ts">
import type { AuthClient } from '@dfinity/auth-client';
import type { ReactNode } from 'react';
import type { User, UserDetailsInput, ResellerInput, OrganizationInput, UserRole } from '../../../../declarations/TrustOrigin_backend/TrustOrigin_backend.did';

export interface AuthContextProviderProps {
  children: ReactNode;
}

export interface userProfileDataInterface {
  email: string,
  password: string
}

export interface AuthContextInterface {
  isAuthenticated: boolean | undefined;
  isLoading: boolean;
  profile: User | null | undefined;
  hasRole: (role: UserRole) => boolean;
  login: () => void;
  logout: () => Promise<void>;
  createProfile: (input: UserDetailsInput) => Promise<void>;
  updateProfile: (input: UserDetailsInput) => Promise<void>;
  setSelfRole: (userRole: UserRole) => Promise<void>;
  signinAsBrandOwner: (input: OrganizationInput) => Promise<void>;
  signinAsReseller: (input: ResellerInput) => Promise<void>;
  authClient: AuthClient | undefined;
}
</file>

<file path="src/frontend/src/pages/auth/login.tsx">
import { useNavigate, Link } from 'react-router-dom';
import { useEffect, useState } from 'react';
import { Principal } from "@dfinity/principal";
import { useAuthContext } from '../../contexts/useAuthContext';

// assets
import TrueOriginLogo from '../../assets/true-origin.png'
import BrandOwnerIcon from '../../assets/party-1.png' 
import ResellerIcon from '../../assets/party-2.png'
import CustomerIcon from '../../assets/party-3.png'
import InternetIdentityLogo from '../../assets/InternetIdentityLogo.png'

/**
 * Role selection card component
 */
const RoleCard = ({ 
  title, 
  description, 
  icon, 
  isSelected, 
  onSelect 
}: { 
  title: string; 
  description: string; 
  icon: string;
  isSelected: boolean;
  onSelect: () => void;
}) => {
  return (
    <div 
      className={`relative bg-white rounded-xl shadow-md p-5 mx-2 cursor-pointer transition-all duration-300 ${isSelected ? 'border-2 border-cyan-500 scale-105' : 'border border-gray-200 hover:shadow-lg'}`}
      onClick={onSelect}
    >
      <div className="flex flex-col h-full">
        <div className="flex items-center mb-3">
          <div className="w-10 h-10 mr-3 overflow-hidden rounded-full bg-gray-100">
            <img src={icon} alt={title} className="w-full h-full object-cover" />
          </div>
          <h3 className="text-lg font-semibold text-gray-800">{title}</h3>
        </div>
        <p className="text-sm text-gray-600 mb-4">{description}</p>
        
        {isSelected && (
          <div className="mt-auto pt-3">
            <div className="w-full text-center py-2 px-4 bg-cyan-500 text-white rounded-lg">
              Selected
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

const LoginPage = () => {
    const navigate = useNavigate();
    const { login, isAuthenticated, profile, signinAsBrandOwner, signinAsReseller } = useAuthContext();
    const [selectedRole, setSelectedRole] = useState<'brandOwner' | 'reseller' | 'customer' | null>(null);

    const handleRoleSelect = (role: 'brandOwner' | 'reseller' | 'customer') => {
        setSelectedRole(role);
    };

    const handleAuthenticate = () => {
        if (!selectedRole) {
            // Show error or prompt user to select a role
            alert('Please select a role first');
            return;
        }
        
        // Store the selected role to use after authentication
        localStorage.setItem('selectedRole', selectedRole);
        
        // Start Internet Identity authentication
        login();
    };

    useEffect(() => {
        // If authenticated but no profile, assign the role
        if (isAuthenticated && !profile) {
            const storedRole = localStorage.getItem('selectedRole');
            
            if (storedRole === 'brandOwner') {
                signinAsBrandOwner({
                    name: 'My Brand',
                    description: 'Brand Owner Account',
                    metadata: []
                });
            } else if (storedRole === 'reseller') {
                signinAsReseller({
                    name: 'My Reseller Shop',
                    org_id: Principal.anonymous(),
                    ecommerce_urls: [],
                    metadata: []
                });
            }
            // Customer role doesn't need special registration
            
            // Clear the stored role
            localStorage.removeItem('selectedRole');
        }
        
        // If authenticated with profile, redirect to dashboard
        if (isAuthenticated && profile && profile.user_role && profile.user_role.length > 0) {
            const role = profile.user_role[0];
            if (role && 'BrandOwner' in role) {
                navigate('/brand-owners/products');
            } else if (role && 'Reseller' in role) {
                navigate('/reseller/dashboard');
            } else {
                navigate('/dashboard');
            }
        }
    }, [isAuthenticated, profile, navigate, signinAsBrandOwner, signinAsReseller]);

    return (
        <div className="min-h-screen bg-gray-50 flex flex-col">
            <div className="flex-1 flex flex-col items-center justify-center px-4 sm:px-6 lg:px-8 py-12">
                <div className="w-full max-w-4xl bg-white rounded-2xl shadow-xl overflow-hidden">
                    <div className="px-6 py-8 sm:p-10">
                        <div className="text-center mb-8">
                            <img src={TrueOriginLogo} alt="TrueOrigin Logo" className="h-16 mx-auto mb-4" />
                            <h1 className="text-3xl font-bold text-gray-900">Login</h1>
                        </div>
                        
                        <div className="mb-8">
                            <h2 className="text-xl font-semibold text-gray-700 mb-4">Select Your Role</h2>
                            <div className="flex flex-col md:flex-row gap-4 mb-8">
                                <RoleCard
                                    title="Brand Owner"
                                    description="Safeguard Genuine Products by creating a digital identity using ECDSA key generation."
                                    icon={BrandOwnerIcon}
                                    isSelected={selectedRole === 'brandOwner'}
                                    onSelect={() => handleRoleSelect('brandOwner')}
                                />
                                <RoleCard
                                    title="Reseller"
                                    description="Get Authorized and Safely resell products from Brand Owners."
                                    icon={ResellerIcon}
                                    isSelected={selectedRole === 'reseller'}
                                    onSelect={() => handleRoleSelect('reseller')}
                                />
                                <RoleCard
                                    title="Customer"
                                    description="Validate QR Code and Get the Incentives"
                                    icon={CustomerIcon}
                                    isSelected={selectedRole === 'customer'}
                                    onSelect={() => handleRoleSelect('customer')}
                                />
                            </div>
                        </div>
                        
                        <div className="flex flex-col items-center">
                            <button
                                onClick={handleAuthenticate}
                                disabled={!selectedRole}
                                className={`flex items-center justify-center px-8 py-3 rounded-xl shadow-md w-full max-w-md transition-all duration-300 ${
                                    selectedRole 
                                    ? 'bg-cyan-600 hover:bg-cyan-700 text-white' 
                                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                }`}
                            >
                                <span className="mr-3">Authenticate with Internet Identity</span>
                                <img src={InternetIdentityLogo} alt="Internet Identity" className="h-6" />
                            </button>
                            
                            <div className="mt-4 text-sm text-gray-600">
                                <Link to="/privacy" className="hover:text-cyan-600">Privacy Policy and Terms of Service</Link>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default LoginPage;
</file>

<file path="src/frontend/src/pages/brand-owners/products.tsx">
/**
 * @file Brand Owner Products Page
 * @fileoverview Allows brand owners to view, create, and manage their products
 * 
 * Functions:
 * - ProductsPage: Main page component
 * - ProductTable: Displays list of products in a table
 * 
 * Constants:
 * - ITEMS_PER_PAGE: Number of items per page
 * 
 * Flow:
 * 1. Fetch products for the brand owner's organization
 * 2. Display products in a table
 * 3. Enable management of existing products
 * 
 * Error Handling:
 * - Loading state for API calls
 * - Error display for failed API requests
 * - Validation for product creation/editing
 * 
 * @module pages/brand-owners/products
 * @requires TrustOrigin_backend - Backend canister
 * @exports {FC} ProductsPage - Products page component
 */

import React, { useState, useMemo, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { TrustOrigin_backend } from '../../../../declarations/TrustOrigin_backend';
import { Product } from '../../../../declarations/TrustOrigin_backend/TrustOrigin_backend.did';
import { useAuthContext } from '@/contexts/useAuthContext';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Pagination } from '@/components/Pagination';
import { LoadingSpinner } from '@/components/LoadingSpinner';

// Constants
const ITEMS_PER_PAGE = 10;

const ProductsPage: React.FC = () => {
  // Get the authenticated user's profile from AuthContext
  const { profile, isLoading: authLoading } = useAuthContext();
  
  // Get the organization ID from the user's profile
  const orgId = useMemo(() => {
    if (!profile || !profile.org_ids || profile.org_ids.length === 0) return null;
    return profile.org_ids[0]; // Assuming first org is the relevant one
  }, [profile]);

  // State for filters
  const [categoryFilter, setCategoryFilter] = useState<string>('all');
  const [productIdFilter, setProductIdFilter] = useState<string>('');

  // State for pagination
  const [currentPage, setCurrentPage] = useState(1);

  // Fetch products using React Query
  const { 
    data: products = [], 
    isLoading: productsLoading, 
    error: productsError,
    refetch
  } = useQuery<Product[], Error>({
    queryKey: ['products', orgId?.toString()],
    queryFn: async () => {
      if (!orgId) return [];
      const result = await TrustOrigin_backend.list_products(orgId);
      return result;
    },
    enabled: !!orgId, // Only run query if orgId is available
  });

  // Retry fetching products when auth loads or orgId changes
  useEffect(() => {
    if (!authLoading && orgId) {
      refetch();
    }
  }, [authLoading, orgId, refetch]);

  // Extract unique categories from products
  const categories = useMemo(() => {
    const uniqueCategories = new Set(products.map(p => p.category));
    return Array.from(uniqueCategories);
  }, [products]);

  // Apply filters to products
  const filteredProducts = useMemo(() => {
    return products.filter(product => {
      // Category filter - match 'all' or exact category
      const categoryMatch = 
        categoryFilter === 'all' || 
        product.category.toLowerCase() === categoryFilter.toLowerCase();
      
      // Product ID filter - case insensitive search on Principal ID string
      const productIdString = product.id.toString().toLowerCase();
      const productIdMatch = 
        productIdFilter === '' || 
        productIdString.includes(productIdFilter.toLowerCase());
      
      return categoryMatch && productIdMatch;
    });
  }, [products, categoryFilter, productIdFilter]);

  // Calculate total pages for pagination
  const totalPages = Math.ceil(filteredProducts.length / ITEMS_PER_PAGE);

  // Paginate the filtered products
  const paginatedProducts = useMemo(() => {
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    const endIndex = startIndex + ITEMS_PER_PAGE;
    return filteredProducts.slice(startIndex, endIndex);
  }, [filteredProducts, currentPage]);

  // Handle page change from pagination component
  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };
  
  // Handler for clearing all filters
  const handleClearFilters = () => {
    setCategoryFilter('all');
    setProductIdFilter('');
    setCurrentPage(1);
  };

  // Handle refresh button click
  const handleRefresh = () => {
    refetch();
  };

  // Handle loading state (auth loading or products loading)
  const isLoading = authLoading || productsLoading;

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-semibold">Product Management</h1>

      {/* Filters Section */}
      <div className="space-y-4 p-4 border rounded-lg">
        <h2 className="text-lg font-medium">Filter Products</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 items-end">
          <div>
            <label className="text-sm font-medium">Date</label>
            <Input 
              placeholder="Select Date" 
              disabled 
              title="Date filter not implemented yet"
            />
          </div>
          <div>
            <label htmlFor="category-filter" className="text-sm font-medium">Category</label>
            <Select 
              value={categoryFilter} 
              onValueChange={(value) => {
                setCategoryFilter(value);
                setCurrentPage(1);
              }}
            >
              <SelectTrigger id="category-filter">
                <SelectValue placeholder="Select Category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Categories</SelectItem>
                {categories.map(category => (
                  <SelectItem key={category} value={category}>
                    {category}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div>
            <label htmlFor="product-id-filter" className="text-sm font-medium">Product ID</label>
            <Input 
              id="product-id-filter" 
              placeholder="Enter Product ID" 
              value={productIdFilter} 
              onChange={(e) => {
                setProductIdFilter(e.target.value);
                setCurrentPage(1);
              }}
            />
          </div>
          <div>
            <label htmlFor="other-filters" className="text-sm font-medium">Other Filters</label>
            <Input 
              id="other-filters" 
              placeholder="Other Filters" 
              disabled 
              title="Other filters not implemented yet"
            />
          </div>
          <div className="flex gap-2">
            <Button 
              variant="outline" 
              onClick={handleClearFilters} 
              disabled={isLoading}
              className="flex-1"
            >
              Clear
            </Button>
            <Button 
              onClick={handleRefresh} 
              disabled={isLoading}
              className="flex-1"
            >
              Refresh
            </Button>
          </div>
        </div>
      </div>

      {/* Products Table Section */}
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-medium">Product List</h2>
          {filteredProducts.length > 0 && (
            <p className="text-sm text-gray-500">
              Showing {paginatedProducts.length} of {filteredProducts.length} products
            </p>
          )}
        </div>
        
        <div className="border rounded-lg overflow-hidden">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Product Name</TableHead>
                <TableHead>Category</TableHead>
                <TableHead>Description</TableHead>
                <TableHead>Product ID</TableHead>
                <TableHead>ECDSA Public Key</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {isLoading ? (
                <TableRow>
                  <TableCell colSpan={5} className="h-24 text-center">
                    <LoadingSpinner />
                  </TableCell>
                </TableRow>
              ) : productsError ? (
                <TableRow>
                  <TableCell colSpan={5} className="h-24 text-center text-red-600">
                    Error loading products: {productsError.message}
                  </TableCell>
                </TableRow>
              ) : paginatedProducts.length > 0 ? (
                paginatedProducts.map((product) => (
                  <TableRow key={product.id.toString()}>
                    <TableCell>{product.name}</TableCell>
                    <TableCell>{product.category}</TableCell>
                    <TableCell className="max-w-xs truncate">
                      {product.description}
                    </TableCell>
                    <TableCell className="font-mono text-xs">
                      {product.id.toString()}
                    </TableCell>
                    <TableCell className="truncate max-w-xs font-mono text-xs">
                      {product.public_key}
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={5} className="h-24 text-center">
                    {products.length === 0 
                      ? "No products found. Add products to get started."
                      : "No products match your filters."}
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
        
        {/* Pagination Controls */}
        {totalPages > 1 && (
          <Pagination
            currentPage={currentPage}
            totalPages={totalPages}
            onPageChange={handlePageChange}
          />
        )}
      </div>
    </div>
  );
};

export default ProductsPage;
</file>

<file path="src/frontend/src/pages/home.tsx">
import { useState } from "react"
import { useNavigate } from "react-router-dom";
import logo from "../assets/true-origin.png"
import herobg from "../assets/true-origin-hero.png"
import icLogo from "../assets/internet-computer-logo.png"
import cfLogo from "../assets/chain-fusion-logo.png"
import rightArrow from "../assets/right-arrow.svg"
import featureBg from "../assets/feature.png"
import customerBg from "../assets/customer-bg.png"
import party1 from "../assets/party-1.png"
import party2 from "../assets/party-2.png"
import party3 from "../assets/party-3.png"
import icInfra from "../assets/ic-infra.png"
import eCoin from "../assets/e-coin.png"
import cFusion from "../assets/chain-fusion@2x.png"
import LandingCard from "../components/LandingCard"
import { Button } from "@/components/ui/button"

const landingCardData = [
    {
        title: "Brand Owners",
        description: "Safeguard Genuine Products by creating a digital identity using ECDSA key generation. Get insights into your product's verification details.",
        image: party1
    },
    {
        title: "Resellers",
        description: "Get Authorized and Safely resell products from Brand Owners. Receive certification and build trust with your customers.",
        image: party2
    },
    {
        title: "Customers",
        description: "Scan the QR Code and Get Paid with ICP/ETH tokens. Validate product authenticity and earn rewards for your engagement.",
        image: party3
    }
]

function Homepage() {
    const [isOpen, setIsOpen] = useState(false);
    const navigate = useNavigate();

    const toggleMenu = () => {
        setIsOpen(!isOpen);
    };

    return (
        <>
            <div className="flex flex-col min-h-screen font-sans">
                {/* Header/Navigation */}
                <header className="w-full bg-white shadow sticky top-0 z-10">
                    <nav className="container mx-auto px-4 sm:px-6 py-4 md:py-6 flex justify-between items-center">
                        <img src={logo} alt="TrueOrigin Logo" className="w-[120px] md:w-[150px]" />
                        <div className="hidden md:flex gap-4 md:gap-8 items-center">
                            <a href="#" className="text-gray-600 hover:text-[#0B0AFF] transition-colors">Homepage</a>
                            <a href="#" className="text-gray-600 hover:text-[#0B0AFF] transition-colors">Brand Owners Dashboard</a>
                            <a href="#" className="text-gray-600 hover:text-[#0B0AFF] transition-colors">Resellers Dashboard</a>
                            <Button 
                                onClick={() => navigate('/verify')} 
                                variant="ghost" 
                                className="text-[#0B0AFF]"
                            >
                                Verify Product
                            </Button>
                            <Button 
                                onClick={() => navigate('/auth/login')} 
                                variant="outline" 
                                className="text-[#0B0AFF] border-[#0B0AFF] hover:bg-[#0B0AFF]/10"
                            >
                                Login
                            </Button>
                        </div>
                        <button
                            className="md:hidden flex items-center text-gray-600"
                            onClick={toggleMenu}
                            aria-label="Toggle mobile menu"
                        >
                            <svg
                                className="w-6 h-6"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                                xmlns="http://www.w3.org/2000/svg"
                            >
                                <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth="2"
                                    d={
                                        isOpen
                                            ? "M6 18L18 6M6 6l12 12"
                                            : "M4 6h16M4 12h16m-7 6h7"
                                    }
                                />
                            </svg>
                        </button>
                    </nav>
                    {isOpen && (
                        <div className="md:hidden flex flex-col items-center bg-white shadow-lg py-4">
                            <a href="#" className="py-2 text-gray-600 hover:text-[#0B0AFF]" onClick={toggleMenu}>
                                Homepage
                            </a>
                            <a href="#" className="py-2 text-gray-600 hover:text-[#0B0AFF]" onClick={toggleMenu}>
                                Brand Owners Dashboard
                            </a>
                            <a href="#" className="py-2 text-gray-600 hover:text-[#0B0AFF]" onClick={toggleMenu}>
                                Resellers Dashboard
                            </a>
                            <a className="py-2 text-[#0B0AFF] font-medium" onClick={() => {toggleMenu(); navigate('/verify');}}>
                                Verify Product
                            </a>
                            <a className="py-2 text-[#0B0AFF] font-medium" onClick={() => {toggleMenu(); navigate('/auth/login');}}>
                                Login
                            </a>
                        </div>
                    )}
                </header>

                {/* Hero Section */}
                <section className="bg-white font-lexend py-8 md:py-16">
                    <div className="container mx-auto px-4 sm:px-6">
                        <div className="flex flex-col-reverse lg:flex-row gap-8 lg:gap-12 items-center">
                            <div className="flex flex-col justify-center gap-6 md:gap-8 max-w-xl">
                                <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold leading-tight">
                                    Incentivizing <br /> Genuine Product Transactions
                                </h1>
                                <p className="text-base md:text-lg text-gray-600">
                                    Safely sell your products and increase customer's trust with blockchain verification and reward systems.
                                </p>
                                <div className="flex flex-col gap-3">
                                    <p className="text-gray-600">Powered by</p>
                                    <div className="flex gap-5 items-center">
                                        <img src={icLogo} alt="Internet Computer Logo" className="h-7 md:h-8" />
                                        <img src={cfLogo} alt="Chain Fusion Logo" className="h-7 md:h-8" />
                                    </div>
                                </div>
                                <div className="flex flex-wrap gap-4 mt-2">
                                    <Button 
                                        onClick={() => navigate('/verify')}
                                        className="flex gap-2 items-center rounded-full bg-[#0B0AFF] hover:bg-[#0B0AFF]/90 text-white px-6 py-2.5"
                                    >
                                        Verify Product
                                        <img src={rightArrow} alt="Arrow" className="h-4 w-4" />
                                    </Button>
                                    <Button 
                                        variant="outline"
                                        className="flex gap-2 items-center rounded-full border border-[#0B0AFF] text-[#0B0AFF] hover:bg-[#0B0AFF]/10 px-6 py-2.5"
                                    >
                                        Book demo
                                    </Button>
                                </div>
                            </div>
                            <div className="lg:flex-1 flex justify-center lg:justify-end">
                                <img 
                                    className="w-full max-w-lg lg:max-w-none" 
                                    src={herobg} 
                                    alt="TrueOrigin Hero" 
                                />
                            </div>
                        </div>
                    </div>
                </section>

                {/* Transition Section */}
                <section className="bg-gradient-to-b from-[#0B0AFF] to-[#6299FF] py-12 md:py-20">
                    <div className="container mx-auto px-4 sm:px-6">
                        <div className="flex flex-col text-center gap-4 md:gap-6 max-w-4xl mx-auto mb-12 md:mb-16">
                            <h2 className="text-white text-3xl md:text-5xl lg:text-6xl font-bold">
                                Simple. Seamless.
                            </h2>
                            <p className="text-white text-base md:text-lg opacity-90">
                                Enjoy a smooth mobile app and desktop experience with easy-to-use, powerful tools to support your entire Web3 journey.
                            </p>
                        </div>
                        <div className="max-w-6xl mx-auto">
                            <div className="bg-white rounded-[30px] overflow-hidden flex flex-col md:flex-row shadow-xl">
                                <div className="flex flex-col gap-6 md:gap-8 p-6 md:p-10 lg:p-12">
                                    <h3 className="text-2xl md:text-3xl lg:text-4xl font-bold font-lexend">
                                        Validate QR to <br /> get ICP / ETH now!
                                    </h3>
                                    <ol className="list-decimal pl-5 text-base space-y-2">
                                        <li>Scan QR Code to validate</li>
                                        <li>Open Telegram wallet and get coin address</li>
                                        <li>Paste the address on the QR Code landing page</li>
                                        <li>Get bitcoin instantly to your telegram wallet</li>
                                    </ol>
                                    <div className="mt-2">
                                        <Button 
                                            variant="outline"
                                            className="rounded-full text-[#0B0AFF] border-[#0B0AFF] hover:bg-[#0B0AFF] hover:text-white"
                                        >
                                            Get started with deposits
                                        </Button>
                                    </div>
                                </div>
                                <div className="hidden md:block md:flex-1">
                                    <img 
                                        className="w-full h-full object-cover object-left" 
                                        src={featureBg} 
                                        alt="Feature" 
                                    />
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

                {/* Stakeholders Section */}
                <section className="py-12 md:py-20">
                    <div className="container mx-auto px-4 sm:px-6">
                        <div className="flex flex-col text-center gap-4 md:gap-6 max-w-4xl mx-auto mb-12 md:mb-16">
                            <h2 className="text-3xl md:text-5xl lg:text-6xl font-bold font-lexend">
                                Securing the chains between parties
                            </h2>
                            <p className="text-gray-800 text-base md:text-lg">
                                We believe that solutions will be applied to ecosystem stakeholders to strengthen the supply chain
                            </p>
                        </div>
                        <div className="max-w-6xl mx-auto">
                            <div className="bg-[#FFB73B] rounded-[30px] overflow-hidden flex flex-col md:flex-row shadow-lg mb-12 md:mb-16">
                                <div className="p-6 md:p-10 lg:p-12 w-full md:w-2/3">
                                    <div className="flex flex-col gap-4">
                                        <h3 className="text-2xl md:text-3xl lg:text-4xl font-semibold font-lexend">
                                            Safeguarding on <span className="text-[#2C42C0]">TrueOrigin</span>
                                        </h3>
                                        <p className="text-base">
                                            We know that working together as a community is better for everyone. Our platform enables blockchain developers to build their Apps and wallets natively and connect with millions of users, without having to worry about the low-level implementation details.
                                        </p>
                                    </div>
                                    <div className="mt-6 md:mt-10">
                                        <Button className="rounded-full bg-white text-black hover:bg-black hover:text-white px-6 py-2.5">
                                            Check out our Developer Docs
                                        </Button>
                                    </div>
                                </div>
                                <div className="hidden md:block md:flex-1">
                                    <img 
                                        src={customerBg} 
                                        alt="Customer Background"
                                        className="w-full h-full object-cover" 
                                    />
                                </div>
                            </div>
                            
                            {/* Stakeholder Cards */}
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-8 mb-10 md:mb-16">
                                {landingCardData.map((data) => (
                                    <LandingCard key={data.title} {...data} />
                                ))}
                            </div>
                            
                            <div className="flex justify-center">
                                <Button 
                                    variant="outline"
                                    className="rounded-full border-black hover:bg-[#FFB73B] hover:border-[#FFB73B] transition-colors duration-300"
                                >
                                    Learn more about privacy & security
                                </Button>
                            </div>
                        </div>
                    </div>
                </section>
                
                <hr className="max-w-6xl mx-auto" />
                
                {/* Technology Section */}
                <section className="py-12 md:py-20">
                    <div className="container mx-auto px-4 sm:px-6">
                        <div className="max-w-6xl mx-auto">
                            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                                {/* ICP Card */}
                                <div className="flex flex-col bg-[#1A1A1A] rounded-[30px] overflow-hidden">
                                    <div className="flex flex-col gap-4 p-6 md:p-10 lg:p-12 flex-1">
                                        <h3 className="text-3xl md:text-4xl text-white font-lexend font-bold">ICP</h3>
                                        <p className="text-white/90">
                                            Fully built on the ICP platform, ECDSA enhances security for digital certification beyond existing solutions. Additionally, low latency and low storage costs are highly suitable for big data processing, leading to significant cost savings.
                                        </p>
                                        <div className="mt-4">
                                            <Button className="bg-gradient-to-r from-[#3B00B9] to-[#29ABE2] text-white hover:opacity-95 px-5 py-3 rounded-lg font-medium">
                                                ICP INFRASTRUCTURE
                                            </Button>
                                        </div>
                                    </div>
                                    <div className="mt-auto">
                                        <img 
                                            src={icInfra} 
                                            alt="ICP Infrastructure"
                                            className="w-full" 
                                        />
                                    </div>
                                </div>
                                
                                {/* Ethereum Card */}
                                <div className="flex flex-col bg-[#1A1A1A] rounded-[30px] overflow-hidden">
                                    <div className="flex flex-col gap-4 p-6 md:p-10 lg:p-12 flex-1">
                                        <h3 className="text-3xl md:text-4xl text-white font-lexend font-bold">Ethereum</h3>
                                        <p className="text-white/90">
                                            Support Ethereum through HTTPS Outcalls to enable wallet transaction for user's incentivization. Widely adopted coin makes ETH becomes everyone's favorite.
                                        </p>
                                        <div className="mt-4">
                                            <Button className="bg-gradient-to-r from-[#FC8941] to-[#5D29E2] text-white hover:opacity-95 px-5 py-3 rounded-lg font-medium">
                                                ETHEREUM COINS
                                            </Button>
                                        </div>
                                    </div>
                                    <div className="mt-auto">
                                        <img 
                                            src={eCoin} 
                                            alt="Ethereum Coins"
                                            className="w-full" 
                                        />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
                
                {/* Chain Fusion Section */}
                <section className="py-10 md:py-16 bg-gray-50">
                    <div className="container mx-auto px-4 sm:px-6 flex justify-center">
                        <img 
                            className="w-full max-w-4xl" 
                            src={cFusion} 
                            alt="Chain Fusion" 
                        />
                    </div>
                </section>
                
                {/* Footer */}
                <footer className="bg-gray-900 text-white py-8 mt-auto">
                    <div className="container mx-auto px-4 sm:px-6">
                        <div className="flex flex-col md:flex-row justify-between items-center gap-4">
                            <div className="text-center md:text-left">
                                &copy; 2024 TrueOrigin, Inc. All rights reserved.
                            </div>
                            <div className="flex flex-wrap justify-center gap-6">
                                <a href="#" className="text-gray-400 hover:text-white transition-colors">Privacy Policy</a>
                                <a href="#" className="text-gray-400 hover:text-white transition-colors">Terms of Service</a>
                                <a href="#" className="text-gray-400 hover:text-white transition-colors">Contact Us</a>
                            </div>
                            <div className="flex space-x-4">
                                <a href="#" className="text-gray-400 hover:text-white transition-colors">
                                    <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                        <path fillRule="evenodd" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" clipRule="evenodd" />
                                    </svg>
                                </a>
                                <a href="#" className="text-gray-400 hover:text-white transition-colors">
                                    <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                        <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
                                    </svg>
                                </a>
                                <a href="#" className="text-gray-400 hover:text-white transition-colors">
                                    <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                        <path fillRule="evenodd" d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z" clipRule="evenodd" />
                                    </svg>
                                </a>
                                <a href="#" className="text-gray-400 hover:text-white transition-colors">
                                    <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                        <path fillRule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clipRule="evenodd" />
                                    </svg>
                                </a>
                            </div>
                        </div>
                    </div>
                </footer>
            </div>
        </>
    )
}

export default Homepage;
</file>

<file path="src/frontend/src/main.tsx">
// Polyfill for the 'global' object used by dfinity libraries
window.global = window;

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
</file>

<file path="src/frontend/vite.config.ts">
import { defineConfig } from 'vite';
import environment from 'vite-plugin-environment';
import react from '@vitejs/plugin-react';
import dotenv from 'dotenv';
import path from "path"


dotenv.config({ path: '../../.env' });

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    react(),
    environment('all', { prefix: 'CANISTER_' }),
    environment('all', { prefix: 'DFX_' }),
  ],
  server: {
    proxy: {
      "/api": {
        target: "http://127.0.0.1:4943",
        changeOrigin: true,
      },
    },
  },
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  }
})
</file>

<file path="src/frontend/src/App.tsx">
/**
 * @file Main application component
 * @fileoverview Root component that sets up routing for the application
 * with authentication and role-based access control
 * 
 * Functions:
 * - App: Main application component with routing configuration
 * 
 * Constants:
 * - None
 * 
 * Flow:
 * 1. Set up routing with react-router
 * 2. Protect routes that require authentication
 * 3. Apply role-based access control to protected routes
 * 
 * Error Handling:
 * - Unauthorized access is handled by ProtectedRoute component
 * 
 * @module App
 * @requires react-router-dom - For routing
 * @requires components/ProtectedRoute - For authentication protection
 * @exports {FC} App - Main application component
 */

import './App.css';
import { BrowserRouter as Router, Route, Routes, Outlet } from 'react-router-dom';
import { Suspense, lazy } from 'react';
import { ProtectedRoute, ROLES } from './components/ProtectedRoute';
import { AuthContextProvider } from './contexts/useAuthContext';
import { Toaster } from "@/components/ui/toaster";
import BrandOwnerLayout from './layouts/BrandOwnerLayout';
import { QueryProvider } from './providers/QueryProvider';

// Lazy load components to improve initial load performance
const Homepage = lazy(() => import('@/pages/home'));
const LoginPage = lazy(() => import('@/pages/auth/login'));
const UnauthorizedPage = lazy(() => import('@/pages/unauthorized'));
const VerifyPage = lazy(() => import('@/pages/verify'));
const ProductsPage = lazy(() => import('@/pages/brand-owners/products'));

// Lazy load placeholders for future development
const AddProductPage = lazy(() => 
  import('@/pages/placeholder').then(module => ({ 
    default: () => module.default({ title: 'Add Product' }) 
  }))
);
const ResellerManagementPage = lazy(() => 
  import('@/pages/placeholder').then(module => ({ 
    default: () => module.default({ title: 'Reseller Dashboard' }) 
  }))
);
const AnalyticsPage = lazy(() => 
  import('@/pages/placeholder').then(module => ({ 
    default: () => module.default({ title: 'Analytics Dashboard' }) 
  }))
);
const UserManagementPage = lazy(() => 
  import('@/pages/placeholder').then(module => ({ 
    default: () => module.default({ title: 'User Dashboard' }) 
  }))
);

// Layout wrapper component for brand owner routes
const BrandOwnerLayoutWrapper = () => (
  <BrandOwnerLayout>
    <Outlet />
  </BrandOwnerLayout>
);

// Loading fallback for lazy-loaded components
const LoadingFallback = () => (
  <div className="flex h-screen items-center justify-center">
    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cyan-500"></div>
  </div>
);

/**
 * Main application component with routing configuration
 * 
 * Sets up the application routes with authentication protection
 * and role-based access control
 * 
 * @returns {JSX.Element} The application component
 * @example
 * <App />
 */
function App() {
  return (
    <QueryProvider>
      <AuthContextProvider>
        <Router>
          <Suspense fallback={<LoadingFallback />}>
            <Routes>
              {/* Public routes */}
              <Route path="/" element={<Homepage />} />
              <Route path="/auth/login" element={<LoginPage />} />
              <Route path="/unauthorized" element={<UnauthorizedPage />} />
              <Route path="/verify" element={<VerifyPage />} />
              
              {/* Admin routes - require Admin role */}
              <Route path="/admin/*" element={
                <ProtectedRoute requiredRoles={[ROLES.ADMIN]}>
                  <div>Admin Dashboard</div>
                </ProtectedRoute>
              } />
              
              {/* Brand Owner routes - require BrandOwner role */}
              <Route path="/brand-owners/*" element={
                <ProtectedRoute requiredRoles={[ROLES.BRAND_OWNER]}>
                  <Routes>
                    <Route element={<BrandOwnerLayoutWrapper />}>
                      <Route path="products" element={<ProductsPage />} />
                      <Route path="add-product" element={<AddProductPage />} />
                      <Route path="resellers" element={<ResellerManagementPage />} />
                      <Route path="users" element={<UserManagementPage />} />
                      <Route path="analytics" element={<AnalyticsPage />} />
                      <Route path="*" element={<ProductsPage />} />
                    </Route>
                  </Routes>
                </ProtectedRoute>
              } />
              
              {/* Reseller routes - require Reseller role */}
              <Route path="/reseller/*" element={
                <ProtectedRoute requiredRoles={[ROLES.RESELLER]}>
                  <div>Reseller Dashboard</div>
                </ProtectedRoute>
              } />
              
            </Routes>
          </Suspense>
          <Toaster />
        </Router>
      </AuthContextProvider>
    </QueryProvider>
  );
}

export default App;
</file>

<file path="src/frontend/package.json">
{
  "name": "trustorigin",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@dfinity/agent": "^1.4.0",
    "@dfinity/auth-client": "^1.4.0",
    "@dfinity/candid": "^1.4.0",
    "@dfinity/identity": "^1.4.0",
    "@dfinity/principal": "^1.4.0",
    "@radix-ui/react-avatar": "^1.1.7",
    "@radix-ui/react-checkbox": "^1.2.3",
    "@radix-ui/react-dialog": "^1.1.11",
    "@radix-ui/react-label": "^2.1.4",
    "@radix-ui/react-radio-group": "^1.3.4",
    "@radix-ui/react-select": "^2.2.2",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-tabs": "^1.1.9",
    "@radix-ui/react-toast": "^1.2.11",
    "@tanstack/react-query": "^5.75.0",
    "@vitejs/plugin-react": "^4.3.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "dotenv": "^16.4.5",
    "html5-qrcode": "^2.3.8",
    "lucide-react": "^0.503.0",
    "qrcode": "^1.5.4",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.56.1",
    "react-router-dom": "^6.26.0",
    "tailwind-merge": "^3.2.0",
    "tailwindcss-animate": "^1.0.7",
    "vite-plugin-environment": "^1.1.3",
    "zod": "^3.24.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.8.0",
    "@types/node": "^20",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.8.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "postcss": "^8.4.41",
    "tailwindcss": "^3.4.10",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.0",
    "vite": "^5.4.0"
  }
}
</file>

<file path="src/frontend/src/components/Table.tsx">
import React from 'react';
import type { Product } from '../../../declarations/TrustOrigin_backend/TrustOrigin_backend.did';
import {
    Table,
    TableBody,
    TableCaption,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

/**
 * Internal component to display product sentiment or a button to trigger analysis.
 */
const ProductSentiment: React.FC<{ product: Product; isShowing: boolean; isLoading: boolean; doLoad: () => void; }> = ({ product, isShowing, isLoading, doLoad }) => {
    if (isLoading) {
        return <span className="text-sm text-muted-foreground">Loading...</span>
    };
    if (isShowing) {
        const productSentiment = product.metadata.find(m => m.key === 'sentiment');
        let productSentimentStr = 'UNKNOWN'
        if (productSentiment) {
            productSentimentStr = productSentiment.value;
        }
        let sentimentColor = "text-muted-foreground";
        if (productSentimentStr.toLowerCase().includes('positive')) sentimentColor = "text-green-600";
        if (productSentimentStr.toLowerCase().includes('negative')) sentimentColor = "text-red-600";
        return <span className={cn("text-sm font-medium", sentimentColor)}>{productSentimentStr}</span>
    }
    return <Button type="button" variant="outline" size="sm" onClick={doLoad}>Analyze Sentiment</Button>
};

/**
 * Props for the Table component.
 */
interface TableProps {
    /** An array of Product objects, potentially augmented with UI state for sentiment display. */
    products: (Product & { showSentiment?: boolean; sentimentLoading?: boolean }) [];
    /** Callback function invoked when the 'Do Sentiment Analysis' button is clicked for a product. */
    onSentimentAnalysis?: (product: Product) => void;
    /** Optional className for the table container */
    className?: string;
    /** Optional caption for the table */
    caption?: string;
}

/**
 * Renders a table displaying a list of products using shadcn/ui components.
 *
 * @param products - The array of product data to display.
 * @param onSentimentAnalysis - Callback for triggering sentiment analysis.
 * @param className - Optional additional classes for the container.
 * @param caption - Optional table caption.
 */
const ProductTable: React.FC<TableProps> = ({ products, onSentimentAnalysis, className, caption }) => {
    return (
        <div className={cn("rounded-md border", className)}>
            <Table>
                {caption && <TableCaption>{caption}</TableCaption>}
                <TableHeader>
                    <TableRow className="bg-muted hover:bg-muted">
                        <TableHead>Product Name</TableHead>
                        <TableHead>Description</TableHead>
                        <TableHead>Category</TableHead>
                        <TableHead>Product ID</TableHead>
                        <TableHead>ECDSA Public Key</TableHead>
                        <TableHead>AI Product Sentiment</TableHead>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    {products.length === 0 ? (
                        <TableRow>
                            <TableCell colSpan={6} className="h-24 text-center text-muted-foreground">
                                No products found.
                            </TableCell>
                        </TableRow>
                    ) : (
                        products.map((product) => {
                            const { showSentiment = false, sentimentLoading = false } = product;
                            return (
                                <TableRow key={product.id.toHex()}>
                                    <TableCell className="font-medium">{product.name}</TableCell>
                                    <TableCell>{product.description}</TableCell>
                                    <TableCell>{product.category}</TableCell>
                                    <TableCell className="text-xs">{product.id.toHex()}</TableCell>
                                    <TableCell className="text-xs">{product.public_key}</TableCell>
                                    <TableCell>
                                        <ProductSentiment
                                            product={product}
                                            isShowing={showSentiment}
                                            isLoading={sentimentLoading}
                                            doLoad={() => onSentimentAnalysis && onSentimentAnalysis(product)}
                                        />
                                    </TableCell>
                                </TableRow>
                            );
                        })
                    )}
                </TableBody>
            </Table>
        </div>
    );
};

export { ProductTable };
</file>

</files>
