type ApiError = variant {
  InvalidInput : record { details : ErrorDetails };
  NotFound : record { details : ErrorDetails };
  ExternalApiError : record { details : ErrorDetails };
  Unauthorized : record { details : ErrorDetails };
  AlreadyExists : record { details : ErrorDetails };
  MalformedData : record { details : ErrorDetails };
  InternalError : record { details : ErrorDetails };
};
type ApiResponse = record {
  metadata : ResponseMetadata;
  data : opt bool;
  error : opt ApiError;
};
type ApiResponse_1 = record {
  metadata : ResponseMetadata;
  data : opt AuthContextResponse;
  error : opt ApiError;
};
type ApiResponse_10 = record {
  metadata : ResponseMetadata;
  data : opt text;
  error : opt ApiError;
};
type ApiResponse_11 = record {
  metadata : ResponseMetadata;
  data : opt RateLimitInfo;
  error : opt ApiError;
};
type ApiResponse_12 = record {
  metadata : ResponseMetadata;
  data : opt OrganizationsListResponse;
  error : opt ApiError;
};
type ApiResponse_13 = record {
  metadata : ResponseMetadata;
  data : opt LogoutResponse;
  error : opt ApiError;
};
type ApiResponse_14 = record {
  metadata : ResponseMetadata;
  data : opt UserResponse;
  error : opt ApiError;
};
type ApiResponse_15 = record {
  metadata : ResponseMetadata;
  data : opt ResetStorageResponse;
  error : opt ApiError;
};
type ApiResponse_16 = record {
  metadata : ResponseMetadata;
  data : opt null;
  error : opt ApiError;
};
type ApiResponse_17 = record {
  metadata : ResponseMetadata;
  data : opt ProductVerificationEnhancedResponse;
  error : opt ApiError;
};
type ApiResponse_18 = record {
  metadata : ResponseMetadata;
  data : opt ResellerVerificationResponse;
  error : opt ApiError;
};
type ApiResponse_2 = record {
  metadata : ResponseMetadata;
  data : opt OrganizationContextResponse;
  error : opt ApiError;
};
type ApiResponse_3 = record {
  metadata : ResponseMetadata;
  data : opt OrganizationResponse;
  error : opt ApiError;
};
type ApiResponse_4 = record {
  metadata : ResponseMetadata;
  data : opt ProductResponse;
  error : opt ApiError;
};
type ApiResponse_5 = record {
  metadata : ResponseMetadata;
  data : opt ResellerUniqueCodeResponse;
  error : opt ApiError;
};
type ApiResponse_6 = record {
  metadata : ResponseMetadata;
  data : opt vec UserRole;
  error : opt ApiError;
};
type ApiResponse_7 = record {
  metadata : ResponseMetadata;
  data : opt vec OrganizationPublic;
  error : opt ApiError;
};
type ApiResponse_8 = record {
  metadata : ResponseMetadata;
  data : opt ResellerCertificationPageContext;
  error : opt ApiError;
};
type ApiResponse_9 = record {
  metadata : ResponseMetadata;
  data : opt NavigationContextResponse;
  error : opt ApiError;
};
type AuthContextResponse = record {
  reseller_details : opt ResellerContextDetails;
  role : opt UserRole;
  user : opt UserPublic;
  brand_owner_details : opt BrandOwnerContextDetails;
  is_registered : bool;
};
type BrandOwnerContextDetails = record {
  active_organization : opt OrganizationPublic;
  has_organizations : bool;
  organizations : opt vec OrganizationPublic;
};
type CompleteResellerProfileRequest = record {
  ecommerce_urls : vec Metadata;
  additional_metadata : opt vec Metadata;
  contact_email : opt text;
  contact_phone : opt text;
  target_organization_id : principal;
  reseller_name : text;
};
type ErrorDetails = record { message : text; details : vec Metadata };
type FindOrganizationsRequest = record {
  pagination : opt PaginationRequest;
  name : text;
};
type GenerateResellerUniqueCodeRequest = record {
  context : opt text;
  reseller_id : principal;
};
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type LogoutResponse = record { redirect_url : opt text; message : text };
type Metadata = record { key : text; value : text };
type NavigationContextResponse = record {
  user_display_name : text;
  user_avatar_id : opt text;
  current_organization_name : opt text;
};
type OrganizationContextResponse = record {
  user_auth_context : AuthContextResponse;
  organization : OrganizationPublic;
};
type OrganizationInput = record {
  metadata : vec Metadata;
  name : text;
  description : text;
};
type OrganizationPublic = record {
  id : principal;
  updated_at : nat64;
  updated_by : principal;
  metadata : vec Metadata;
  name : text;
  description : text;
  created_at : nat64;
  created_by : principal;
};
type OrganizationResponse = record { organization : OrganizationPublic };
type OrganizationResult = variant {
  error : ApiError;
  organization : OrganizationPublic;
};
type OrganizationsListResponse = record {
  pagination : opt PaginationResponse;
  organizations : vec OrganizationPublic;
};
type PaginationRequest = record { page : opt nat32; limit : opt nat32 };
type PaginationResponse = record {
  total : nat64;
  page : nat32;
  limit : nat32;
  has_more : bool;
};
type PrivateKeyResult = variant { key : text; error : ApiError };
type Product = record {
  id : principal;
  updated_at : nat64;
  updated_by : principal;
  public_key : text;
  metadata : vec Metadata;
  name : text;
  org_id : principal;
  description : text;
  created_at : nat64;
  created_by : principal;
  category : text;
};
type ProductInput = record {
  metadata : vec Metadata;
  name : text;
  org_id : principal;
  description : text;
  category : text;
};
type ProductResponse = record { product : Product };
type ProductResult = variant { none; error : ApiError; product : Product };
type ProductSerialNumber = record {
  updated_at : nat64;
  updated_by : principal;
  product_id : principal;
  metadata : vec Metadata;
  created_at : nat64;
  created_by : principal;
  print_version : nat8;
  serial_no : principal;
};
type ProductSerialNumberResult = variant {
  result : ProductSerialNumber;
  error : ApiError;
};
type ProductUniqueCodeResult = variant {
  result : ProductUniqueCodeResultRecord;
  error : ApiError;
};
type ProductUniqueCodeResultRecord = record {
  product_id : principal;
  created_at : nat64;
  print_version : nat8;
  unique_code : text;
  serial_no : principal;
};
type ProductVerification = record {
  id : principal;
  status : ProductVerificationStatus;
  product_id : principal;
  metadata : vec Metadata;
  created_at : nat64;
  created_by : principal;
  print_version : nat8;
  serial_no : principal;
};
type ProductVerificationDetail = record {
  user_email : opt text;
  product_id : principal;
  created_at : nat64;
  product_name : text;
  serial_no : principal;
};
type ProductVerificationEnhancedResponse = record {
  status : ProductVerificationStatus;
  expiration : opt nat64;
  rewards : opt VerificationRewards;
  verification : opt ProductVerification;
};
type ProductVerificationStatus = variant {
  Invalid;
  MultipleVerification;
  FirstVerification;
};
type RateLimitInfo = record {
  current_window_start : nat64;
  remaining_attempts : nat32;
  reset_time : nat64;
};
type Reseller = record {
  id : principal;
  updated_at : nat64;
  updated_by : principal;
  ecommerce_urls : vec Metadata;
  public_key : text;
  metadata : vec Metadata;
  additional_metadata : opt vec Metadata;
  name : text;
  org_id : principal;
  contact_email : opt text;
  certification_code : opt text;
  certification_timestamp : opt nat64;
  date_joined : nat64;
  created_at : nat64;
  created_by : principal;
  user_id : principal;
  is_verified : bool;
  contact_phone : opt text;
};
type ResellerCertificationPageContext = record {
  certification_code : text;
  certification_timestamp : nat64;
  reseller_profile : ResellerPublic;
  user_details : UserPublic;
  associated_organization : OrganizationPublic;
};
type ResellerContextDetails = record {
  certification_code : opt text;
  certification_timestamp : opt nat64;
  associated_organization : opt OrganizationPublic;
  is_profile_complete_and_verified : bool;
};
type ResellerInput = record {
  ecommerce_urls : vec Metadata;
  metadata : vec Metadata;
  name : text;
  org_id : principal;
};
type ResellerPublic = record {
  id : principal;
  updated_at : nat64;
  ecommerce_urls : vec Metadata;
  public_key : text;
  additional_metadata : opt vec Metadata;
  name : text;
  contact_email : opt text;
  certification_code : opt text;
  certification_timestamp : opt nat64;
  created_at : nat64;
  user_id : principal;
  is_verified : bool;
  contact_phone : opt text;
  organization_id : principal;
};
type ResellerUniqueCodeResponse = record {
  context : opt text;
  unique_code : text;
  timestamp : nat64;
  reseller_id : principal;
};
type ResellerVerificationResponse = record {
  status : ResellerVerificationStatus;
  reseller : opt Reseller;
  organization : opt OrganizationPublic;
};
type ResellerVerificationStatus = variant {
  ExpiredCode;
  Success;
  ReplayAttackDetected;
  InvalidCode;
  OrganizationNotFound;
  InternalError;
  ResellerNotFound;
};
type ResetStorageResponse = record { message : text };
type ResponseMetadata = record {
  request_id : opt text;
  version : text;
  timestamp : nat64;
};
type Result = variant { Ok : vec ProductSerialNumber; Err : ApiError };
type TransformArgs = record { context : blob; response : HttpResponse };
type UpdateOrganizationRequest = record {
  id : principal;
  metadata : vec Metadata;
  name : text;
  description : text;
};
type User = record {
  id : principal;
  updated_at : nat64;
  updated_by : principal;
  user_role : opt UserRole;
  org_ids : vec principal;
  is_principal : bool;
  is_enabled : bool;
  created_at : nat64;
  created_by : principal;
  email : opt text;
  active_org_id : opt principal;
  first_name : opt text;
  detail_meta : vec Metadata;
  last_name : opt text;
  phone_no : opt text;
  session_keys : vec principal;
};
type UserDetailsInput = record {
  email : text;
  first_name : text;
  detail_meta : vec Metadata;
  last_name : text;
  phone_no : text;
};
type UserPublic = record {
  id : principal;
  created_at : nat64;
  email : opt text;
  first_name : opt text;
  last_name : opt text;
};
type UserResponse = record { user : User };
type UserResult = variant { none; user : User; error : ApiError };
type UserRole = variant { Reseller; Admin; BrandOwner };
type VerificationRewards = record {
  special_reward : opt text;
  reward_description : opt text;
  is_first_verification : bool;
  points : nat32;
};
type VerifyProductEnhancedRequest = record {
  product_id : principal;
  metadata : vec Metadata;
  print_version : nat8;
  nonce : opt text;
  unique_code : text;
  timestamp : opt nat64;
  serial_no : principal;
};
type VerifyResellerRequest = record {
  context : opt text;
  unique_code : text;
  timestamp : nat64;
  reseller_id : principal;
};
service : () -> {
  check_reseller_verification : (principal) -> (ApiResponse) query;
  complete_reseller_profile : (CompleteResellerProfileRequest) -> (
      ApiResponse_1,
    );
  create_organization : (OrganizationInput) -> (OrganizationPublic);
  create_organization_for_owner : (OrganizationInput) -> (ApiResponse_2);
  create_organization_v2 : (OrganizationInput) -> (ApiResponse_3);
  create_product : (ProductInput) -> (ProductResult);
  create_product_serial_number : (principal) -> (ProductSerialNumberResult);
  create_user : (principal, UserDetailsInput) -> (UserResult);
  find_organizations_by_name : (text) -> (vec OrganizationPublic) query;
  find_resellers_by_name_or_id : (text) -> (vec Reseller) query;
  generate_product_review_v2 : (principal) -> (ApiResponse_4);
  generate_reseller_unique_code_v2 : (GenerateResellerUniqueCodeRequest) -> (
      ApiResponse_5,
    );
  get_auth_context : () -> (ApiResponse_1) query;
  get_available_roles : () -> (ApiResponse_6) query;
  get_my_organizations : () -> (ApiResponse_7) query;
  get_my_reseller_certification : () -> (ApiResponse_8) query;
  get_navigation_context : () -> (ApiResponse_9) query;
  get_openai_api_key : () -> (ApiResponse_10) query;
  get_organization_by_id : (principal) -> (OrganizationResult) query;
  get_organization_by_id_v2 : (principal) -> (ApiResponse_3) query;
  get_organization_private_key : (principal) -> (PrivateKeyResult) query;
  get_product_by_id : (principal) -> (ProductResult) query;
  get_scraper_url : () -> (ApiResponse_10) query;
  get_user_by_id : (principal) -> (opt User) query;
  get_verification_rate_limit : (principal) -> (ApiResponse_11) query;
  greet : (text) -> (text) query;
  initialize_user_session : (opt UserRole) -> (ApiResponse_1);
  list_organizations_v2 : (FindOrganizationsRequest) -> (ApiResponse_12);
  list_product_serial_numbers : (opt principal, opt principal) -> (
      Result,
    ) query;
  list_product_verifications_by_org_id : (principal) -> (
      vec ProductVerificationDetail,
    ) query;
  list_products : (principal) -> (vec Product) query;
  list_resellers_by_org_id : (principal) -> (vec Reseller) query;
  logout_user : () -> (ApiResponse_13);
  print_product_serial_number : (principal, principal) -> (
      ProductUniqueCodeResult,
    );
  register : () -> (User);
  register_as_organization : (OrganizationInput) -> (UserResult);
  register_as_reseller_v2 : (ResellerInput) -> (ApiResponse_14);
  reset_all_stable_storage : () -> (ApiResponse_15);
  select_active_organization : (principal) -> (ApiResponse_1);
  set_openai_api_key : (text) -> (ApiResponse_16);
  set_scraper_url : (text) -> (ApiResponse_16);
  set_self_role : (UserRole) -> (UserResult);
  transform : (TransformArgs) -> (HttpResponse) query;
  update_organization : (principal, OrganizationInput) -> (OrganizationResult);
  update_organization_v2 : (UpdateOrganizationRequest) -> (ApiResponse_3);
  update_product : (principal, ProductInput) -> (ProductResult);
  update_product_serial_number : (principal, principal) -> (
      ProductSerialNumberResult,
    );
  update_self_details : (UserDetailsInput) -> (UserResult);
  update_user : (principal, UserDetailsInput) -> (UserResult);
  update_user_orgs : (principal, vec principal) -> (UserResult);
  verify_product_v2 : (VerifyProductEnhancedRequest) -> (ApiResponse_17);
  verify_reseller_v2 : (VerifyResellerRequest) -> (ApiResponse_18) query;
  whoami : () -> (opt User) query;
}
